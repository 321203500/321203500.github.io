<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2019/01/03/mysql-quan-xian-guan-li/"/>
      <url>/2019/01/03/mysql-quan-xian-guan-li/</url>
      
        <content type="html"><![CDATA[<p>use hrs</p><p>– 事务：多个数据操作要么全都成功要么全都失败（不可分割） - 一致性问题<br>start transaction;  – 开启事务<br>begin;              – 开启事务</p><p>commit;             – 提交事务</p><p>rollback;           – 回滚（撤销全部）</p><p>create user hellokitty@’%’ identified by ‘123123’;</p><p>grant select on hrs.* to hellokitty@’%’;</p><p>grant insert on hrs.* to hellokitty@’%’;</p><p>grant all privileges on *.* to hellokitty@’%’;</p><p>grant all privileges on *.* to hellokitty@’%’ with grant option;</p><p>revoke all privileges on *.* from hellokitty@’%’;</p><p>drop user hellokitty@’%’;</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/01/03/mysql-zeng-shan-cha-gai/"/>
      <url>/2019/01/03/mysql-zeng-shan-cha-gai/</url>
      
        <content type="html"><![CDATA[<p>– 关系型数据库可以保证数据的完整性<br>– 实体完整性:每条记录都是独一无二的没有冗余 - 主键/唯一索引<br>– 参照完整性(引用完整性):外键<br>– 域完整性:数据类型、非空约束、默认值约束、检查约束</p><p>– 创建SRS数据库<br>drop database if exists SRS;<br>create database SRS default charset utf8 collate utf8_bin;</p><p>– 切换到SRS数据库<br>use SRS;</p><p>– 创建学院表<br>create table tb_college<br>(<br>collid int not null auto_increment comment ‘学院编号’,<br>collname varchar(50) not null comment ‘学院名称’,<br>collmaster varchar(20) not null comment ‘院长姓名’,<br>collweb varchar(511) default ‘’ comment ‘学院网站’,<br>primary key (collid)<br>);</p><p>– 添加唯一约束<br>alter table tb_college add constraint uni_college_collname unique (collname);</p><p>– 创建学生表<br>create table tb_student<br>(<br>stuid int not null comment ‘学号’,<br>sname varchar(20) not null comment ‘学生姓名’,<br>gender bit default 1 comment ‘性别’,<br>birth date not null comment ‘出生日期’,<br>addr varchar(255) default ‘’ comment ‘籍贯’,<br>collid int not null comment ‘所属学院编号’,<br>primary key (stuid)<br>);</p><p>– 添加外键约束<br>alter table tb_student add constraint fk_student_collid foreign key (collid) references tb_college (collid);</p><p>– 创建教师表<br>create table tb_teacher<br>(<br>teaid int not null comment ‘教师工号’,<br>tname varchar(20) not null comment ‘教师姓名’,<br>title varchar(10) default ‘’ comment ‘职称’,<br>collid int not null comment ‘所属学院编号’<br>);</p><p>– 添加主键约束<br>alter table tb_teacher add constraint pk_teacher primary key (teaid);</p><p>– 添加外键约束<br>alter table tb_teacher add constraint fk_teacher_collid foreign key (collid) references tb_college (collid);</p><p>– 创建课程表<br>create table tb_course<br>(<br>couid int not null comment ‘课程编号’,<br>cname varchar(50) not null comment ‘课程名称’,<br>credit tinyint not null comment ‘学分’,<br>teaid int not null comment ‘教师工号’,<br>primary key (couid)<br>);</p><p>– 添加外键约束<br>alter table tb_course add constraint fk_course_tid foreign key (teaid) references tb_teacher (teaid);</p><p>– 创建学生选课表<br>create table tb_score<br>(<br>scid int not null auto_increment comment ‘选课编号’,<br>sid int not null comment ‘学号’,<br>cid int not null comment ‘课程编号’,<br>seldate date comment ‘选课时间日期’,<br>mark decimal(4,1) comment ‘考试成绩’,<br>primary key (scid)<br>);</p><p>– 添加外键约束<br>alter table tb_score add constraint fk_score_sid foreign key (sid) references tb_student (stuid);<br>alter table tb_score add constraint fk_score_cid foreign key (cid) references tb_course (couid);<br>– 添加唯一约束<br>alter table tb_score add constraint uni_score_sid_cid unique (sid, cid);</p><p>– 插入学院数据<br>insert into tb_college (collname, collmaster, collweb) values<br>(‘计算机学院’, ‘左冷禅’, ‘<a href="http://www.abc.com&#39;)" target="_blank" rel="noopener">http://www.abc.com&#39;)</a>,<br>(‘外国语学院’, ‘岳不群’, ‘<a href="http://www.xyz.com&#39;)" target="_blank" rel="noopener">http://www.xyz.com&#39;)</a>,<br>(‘经济管理学院’, ‘风清扬’, ‘<a href="http://www.foo.com&#39;)" target="_blank" rel="noopener">http://www.foo.com&#39;)</a>;</p><p>– 插入学生数据<br>insert into tb_student (stuid, sname, gender, birth, addr, collid) values<br>(1001, ‘杨逍’, 1, ‘1990-3-4’, ‘四川成都’, 1),<br>(1002, ‘任我行’, 1, ‘1992-2-2’, ‘湖南长沙’, 1),<br>(1033, ‘王语嫣’, 0, ‘1989-12-3’, ‘四川成都’, 1),<br>(1572, ‘岳不群’, 1, ‘1993-7-19’, ‘陕西咸阳’, 1),<br>(1378, ‘纪嫣然’, 0, ‘1995-8-12’, ‘四川绵阳’, 1),<br>(1954, ‘林平之’, 1, ‘1994-9-20’, ‘福建莆田’, 1),<br>(2035, ‘东方不败’, 1, ‘1988-6-30’, null, 2),<br>(3011, ‘林震南’, 1, ‘1985-12-12’, ‘福建莆田’, 3),<br>(3755, ‘项少龙’, 1, ‘1993-1-25’, null, 3),<br>(3923, ‘杨不悔’, 0, ‘1985-4-17’, ‘四川成都’, 3);</p><p>– 插入老师数据<br>insert into tb_teacher (teaid, tname, title, collid) values<br>(1122, ‘张三丰’, ‘教授’, 1),<br>(1133, ‘宋远桥’, ‘副教授’, 1),<br>(1144, ‘杨逍’, ‘副教授’, 1),<br>(2255, ‘范遥’, ‘副教授’, 2),<br>(3366, ‘韦一笑’, ‘讲师’, 3);</p><p>– 插入课程数据<br>insert into tb_course (couid, cname, credit, teaid) values<br>(1111, ‘Python程序设计’, 3, 1122),<br>(2222, ‘Web前端开发’, 2, 1122),<br>(3333, ‘操作系统’, 4, 1122),<br>(4444, ‘计算机网络’, 2, 1133),<br>(5555, ‘编译原理’, 4, 1144),<br>(6666, ‘算法和数据结构’, 3, 1144),<br>(7777, ‘经贸法语’, 3, 2255),<br>(8888, ‘成本会计’, 2, 3366),<br>(9999, ‘审计学’, 3, 3366);</p><p>– 插入选课数据<br>insert into tb_score (sid, cid, seldate, mark) values<br>(1001, 1111, ‘2017-09-01’, 95),<br>(1001, 2222, ‘2017-09-01’, 87.5),<br>(1001, 3333, ‘2017-09-01’, 100),<br>(1001, 4444, ‘2018-09-03’, null),<br>(1001, 6666, ‘2017-09-02’, 100),<br>(1002, 1111, ‘2017-09-03’, 65),<br>(1002, 5555, ‘2017-09-01’, 42),<br>(1033, 1111, ‘2017-09-03’, 92.5),<br>(1033, 4444, ‘2017-09-01’, 78),<br>(1033, 5555, ‘2017-09-01’, 82.5),<br>(1572, 1111, ‘2017-09-02’, 78),<br>(1378, 1111, ‘2017-09-05’, 82),<br>(1378, 7777, ‘2017-09-02’, 65.5),<br>(2035, 7777, ‘2018-09-03’, 88),<br>(2035, 9999, date(now()), null),<br>(3755, 1111, date(now()), null),<br>(3755, 8888, date(now()), null),<br>(3755, 9999, ‘2017-09-01’, 92);</p><p>– 查询所有学生信息<br>select * from tb_student;</p><p>– 查询所有课程名称及学分(投影和别名)<br>select cname as 课程名称, credit as 学分 from tb_course;</p><p>– 查询所有女学生的姓名和出生日期(筛选)<br>select sname as 姓名, birth as 出生日期 from tb_student where gender=0;</p><p>– 查询所有80后学生的姓名、性别和出生日期(筛选)<br>select<br>    sname as 姓名,<br>    case gender when 1 then ‘男’ else ‘女’ end as 性别,<br>    birth as 出生日期<br>from tb_student<br>where birth between ‘1980-1-1’ and ‘1989-12-31’;</p><p>– 写法2(使用MySQL中的分支函数)<br>select<br>    sname as 姓名,<br>    if(gender,’男’,’女’) as 性别,<br>    birth as 出生日期<br>from tb_student<br>where birth between ‘1980-1-1’ and ‘1989-12-31’;</p><p>– 查询名字有四个中文字符的学生学号和姓名(函数)<br>select stuid as 学号, sname as 姓名 from tb_student<br>where length(sname)/3=4;</p><p>– 查询姓”杨“的学生姓名和性别(模糊)<br>select sname as 姓名, if(gender,’男’,’女’) as 性别<br>from tb_student where sname like ‘杨%’;</p><p>– 查询姓”杨“名字两个字的学生姓名和性别(模糊)<br>select sname as 姓名, if(gender,’男’,’女’) as 性别<br>from tb_student where sname like ‘杨_’;</p><p>– 查询姓”杨“名字三个字的学生姓名和性别(模糊)<br>select sname as 姓名, if(gender,’男’,’女’) as 性别<br>from tb_student where sname like ‘杨__’;</p><p>– 查询名字中有”不“字或“嫣”字的学生的姓名(模糊)<br>select sname as 姓名<br>from tb_student where sname like ‘%不%’ or sname like ‘%嫣%’</p><p>– 查询没有录入家庭住址的学生姓名(空值)<br>select sname as 姓名<br>from tb_student where addr is null or addr=’’;</p><p>– 查询录入了家庭住址的学生姓名(空值)<br>select sname as 姓名 from tb_student<br>where addr is not null and addr&lt;&gt;’’;</p><p>– 查询学生选课的所有日期(去重)<br>select distinct seldate as 选课日期 from tb_score;</p><p>– 查询学生的家庭住址(去重)<br>select distinct addr 家庭地址 from tb_student<br>where addr is not null and addr&lt;&gt;’’;</p><p>– 查询男学生的姓名和生日按年龄从大到小排列(排序)<br>– 降序 desc / 升序 asc（默认）<br>select sname as 姓名, year(now())-year(birth) as 出生日期 from tb_student<br>where gender=1 order by birth desc;</p><p>select stuid, sname, gender from tb_student<br>order by gender asc, stuid desc;</p><p>– 聚合函数: max / min / sum / avg / count</p><p>– 查询学生数量<br>select count(stuid) from tb_student<br>select count(*) from tb_course;</p><p>– 查询年龄最大的学生的出生日期(聚合函数)<br>select min(birth) from tb_student;</p><p>– 查询年龄最小的学生的出生日期(聚合函数)<br>select max(birth) from tb_student;</p><p>– 查询男女学生的人数(分组和聚合函数)<br>select gender as 性别, count(gender) as 人数<br>from tb_student group by gender;</p><p>– 查询课程编号为1111的课程的平均成绩(筛选和聚合函数)<br>select avg(mark) as 平均成绩 from tb_score<br>where cid=1111;</p><p>– 查询学号为1001的学生所有课程的平均分(筛选和聚合函数)<br>select avg(mark) as 平均成绩 from tb_score<br>where sid=1001;</p><p>– 查询每个学生的学号和平均成绩(分组和聚合函数)<br>select sid as 学号, avg(mark) as 平均成绩 from tb_score<br>group by sid;</p><p>– 查询平均成绩大于等于90分且学号在1000到2000之间的的学生的学号和平均成绩<br>– 总结：分组之前的筛选用where子句，分组之后的筛选用having子句。<br>select sid as 学号, avg(mark) as 平均成绩 from tb_score<br>where sid between 1000 and 3999<br>group by sid having avg(mark)&gt;=90<br>order by avg(mark) desc;</p><p>– 查询年龄最大的学生的姓名(嵌套查询/子查询)<br>– 把一个查询的结果当成另一个查询的一部分来使用<br>select sname as 姓名 from tb_student<br>where birth=(select min(birth) from tb_student);</p><p>– 查询选了两门以上的课程的学生姓名(子查询/分组条件/集合运算)<br>select sname as 姓名 from tb_student<br>where stuid in (<br>select sid from tb_score<br>group by sid having count(sid)&gt;2<br>);</p><p>– 查询学生姓名、课程名称以及成绩(连接查询)<br>select sname, cname, mark<br>from tb_student, tb_course, tb_score<br>where stuid=sid and couid=cid;<br>– 查询选课学生的姓名和平均成绩(子查询和连接查询)<br>select sname as 姓名, avgmark as 平均分<br>from tb_student t1,<br>(select sid, avg(mark) as avgmark<br>from tb_score group by sid) t2<br>where stuid=sid;</p><p>select sname as 姓名, avgmark as 平均分<br>from tb_student t1 inner join<br>(select sid, avg(mark) as avgmark<br>from tb_score group by sid) t2<br>on stuid=sid;</p><p>– 查询每个学生的姓名和选课数量(左外连接和子查询)<br>– 左外连接：将左表不满足连表条件的记录也要查出来，不满足连表条件的地方补空值<br>– 右外连接：将右表不满足连表条件的记录也要查出来，不满足连表条件的地方补空值<br>– 在连接多表查询时写在前面的表称为左表，下载后面的称为右表<br>– left outer join / right outer join<br>– MySQL不支持全外连接 full outer join<br>select sname as 姓名, ifnull(total, 0) as 选课数量<br>from tb_student t1<br>left join (select sid, count(sid) as total<br>from tb_score group by sid) t2<br>on stuid=sid;</p><p>– 练习<br>select sname as 学生姓名, cname as 课程名称, mark as 成绩<br>from tb_student, tb_course, tb_score<br>where stuid=sid and couid=cid;</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/01/03/mysql-ji-chu/"/>
      <url>/2019/01/03/mysql-ji-chu/</url>
      
        <content type="html"><![CDATA[<p>xlrd xlwt<br>1.���ݿ� - ʵ����Ŀ�е����ݳ־û�</p><p>���ݿ�����</p><ul><li>��ϵ�����ݿ� - MySQL<br>�ص�:<br>1.���ۻ����������ۺ͹�ϵ����<br>2.�ö�ά������֯���ݣ��У���¼�����У��ֶΣ���</li><li>�ܹ�Ψһ��ʶһ����¼���г�Ϊ����(primary key)<br>3.SQL - �ṹ����ѯ����</li><li>DDL - ���ݶ������� - create(����) / drop(ɾ��) / alter(�޸�)</li><li>DML - ���ݲ������� - insert(����) / delete(ɾ��) / update(����) / select(ѡ��)</li><li>DCL - ���ݿ������� - grant(����Ȩ��) / revoke(ɾ��Ȩ��) / commit(�ύ����) / rollback(�ع�)</li></ul><p>��ϵ�����ݿ��Ʒ��<br>1.Oracle - �׹���<br>2.MySQL - �׹��� - MariaDB<br>3.DB2��SQLServer��PostgreSQL��SQLite</p><ul><li><p>NoSQL���ݿ� - Redis<br>1.MongoDB - �ĵ����ݿ� - �ʺ������Ǽ�ֵ�͵����ݿ�<br>2.Redis - KV���ݿ� - ���ܺ��ʺ������ٻ������<br>3.ElasticSearch - ��������</p></li><li><p>Linux��װ����<br>1.���������� - yum / rpm</p></li></ul><p>Docker - ���⻯���񣬴������⻯��������װ����<br>yum -y install docker-io<br>yum -y remove docker-io<br>yum info …<br>yum search …<br>yum list installed | grep docker-io</p><p>����Docker����<br>systemctl start docker - ��������<br>systemctl stop docker - ֹͣ����<br>systemctl restart docker - ����<br>systemctl status docker - �鿴״̬<br>systemctl enabl docker  - ��������<br>systemctl disable docker - ���ÿ�������</p><p>ʹ��Docker������<br>1.�鿴�Ѿ����صľ����ļ�����װ������</p><ul><li>docker images</li></ul><p>2.����MySQL�ľ����ļ���<br>docker pull mysql:5.7</p><p>MySQL���ݳ�������Ա�˺� - root<br>Oracle���ݿⳬ������Ա�˺� - sys<br>SQLServer���ݳ�������Ա�˺� - sa</p><p>3.��������������<br>docker run -d -p 3306:3306 –name mysql57 -e MYSQL_ROOT_PASSWORD=123456 mysql:5.7</p><p>4.�鿴�����е�����<br>docker ps</p><p>5.�鿴���е�����<br>docker container ls -a</p><p>6.ֹͣ����<br>docker stop mysql57</p><p>7.��������<br>docker start mysql57</p><p>8.ɾ������<br>docker rm -f mysql57</p><p>��װMySQL�ͻ��˹���:<br>Navicat for MySQL - è<br>SQLyoh - ����<br>Toad for MySQL - ���</p><p>===========================================================<br>1.<br>– SQL - �ṹ����ѯ����<br>– DDL - ���ݶ������� - create / drop / alter<br>– DML - ���ݲ������� - insert / delete / update / select<br>– DCL - ���ݿ������� - grant / revoke</p><p>2.<br>– ������Ϊsrs�����ݿⲢ����Ĭ���ַ���Ϊutf8<br>create database srs default charset utf8;</p><p>– �л���srs���ݿ�<br>use srs;</p><p>– ���������Ϊtb_student�ı���ɾ��<br>drop table if exists tb_student;</p><p>3.<br>– ��ѧ������ѧ�ſ���Ψһ�ı��һ��ѧ����¼</p><p>– ����ͨ������������Ϊ������</p><p>– Error: Duplicated Entry  ������ͻ���Ĵ��������Ѿ����ڣ�</p><p>4.– �޸�ѧ����������ϵ��ʽ��</p><p>alter table tb_student add column stutel char(11);  – �����ַ�����������11���ַ���</p><p>– �޸�ѧ����ɾ����ϵ��ʽ��</p><p>alter table tb_student drop column stutel;</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/01/03/zi-fu-chuan-fang-fa-zong-jie/"/>
      <url>/2019/01/03/zi-fu-chuan-fang-fa-zong-jie/</url>
      
        <content type="html"><![CDATA[<p>0.len(字符串) - 返回字符串长度（字符的个数）<br>1.字符串.capitalize() - 第一个字母转换大写<br>2.字符串.center(宽度，填充物) - 居中 （ljust-左对齐，rjust-右对齐）<br>3.字符串1.join（字符串2）- 字符串1加入到字符串2每个字符之间<br>4.max（字符串），min（字符串）  - 取最大、最小字符<br>5.字符串.count(字符) - 判断字符在字符串中出现的次数<br>6.字符串.find(字符) - 如果字符在字符串中返回字符，不在返回-1<br>7.字符串.isalnum() - 字符都是字母或数字返回True，否则返回False<br>8.字符串.isalpha() - 字符都是字母返回True<br>9.字符串.isdigit() - 字符都是数字返回True<br>10.字符串.islower() - 至少有一个字母，并且字母都是小写返回True<br>11.字符串.isupper() - 至少有一个字母，并且都是大写返回true<br>12.字符串.isnumeric() - 只包含数字字符返回True<br>13.字符串.isspace() - 只包含空格或者tab空白返回True<br>14.字符串.lower() - 将字符串中的大写字符改为小写<br>15.字符串.upper() - 将字符串中的小写改为大写<br>16.字符串.lstrip() - 截掉字符串最左边空格或者指定字符<br>17.字符串.rstrip() - 只能截掉字符串右边空格<br>18.字符串1.replace(‘字符’,’字符串2’，次数) - 将字符串1中的指定字符替换为字符串2，次数决定替换几次</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Django增删查改</title>
      <link href="/2019/01/03/django-zeng-shan-cha-gai/"/>
      <url>/2019/01/03/django-zeng-shan-cha-gai/</url>
      
        <content type="html"><![CDATA[<h2 id="1-增"><a href="#1-增" class="headerlink" title="1.增"></a>1.增</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">add_stu</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 实现插入数据</span>    <span class="token comment" spellcheck="true"># 实现的第一种方式</span>    Student<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>s_name<span class="token operator">=</span><span class="token string">'小涛'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 实现的第二种方式</span>    stu <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token punctuation">)</span>    stu<span class="token punctuation">.</span>s_name <span class="token operator">=</span> <span class="token string">'大大'</span>    stu<span class="token punctuation">.</span>s_gender <span class="token operator">=</span> <span class="token number">0</span>    stu<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'创建学生成功'</span><span class="token punctuation">)</span></code></pre><h2 id="2-删"><a href="#2-删" class="headerlink" title="2.删"></a>2.删</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">del_stu</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 实现删除</span>    <span class="token comment" spellcheck="true"># 1.获取删除对象，  filter(条件)</span>    <span class="token comment" spellcheck="true"># 2.实现删除方法，  delete()</span>    Student<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'删除学生成功'</span><span class="token punctuation">)</span></code></pre><h2 id="3-改"><a href="#3-改" class="headerlink" title="3.改"></a>3.改</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">up_stu</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 实现更新</span>    <span class="token comment" spellcheck="true"># 1.获取更新的对象，  filter(条件)</span>    <span class="token comment" spellcheck="true"># 2.实现更新方法，  update()</span>    <span class="token comment" spellcheck="true"># 更新的第一种方法</span>    Student<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>update<span class="token punctuation">(</span>s_name<span class="token operator">=</span><span class="token string">'臭傻逼'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 更新的第二种方法</span>    <span class="token comment" spellcheck="true"># 后面加.first() 取到的才是id为2的学生对象</span>    stu <span class="token operator">=</span> Student<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>    stu<span class="token punctuation">.</span>s_name <span class="token operator">=</span> <span class="token string">'大傻逼'</span>    stu<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'更新学生成功'</span><span class="token punctuation">)</span></code></pre><h2 id="4-查"><a href="#4-查" class="headerlink" title="4.查"></a>4.查</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">sel_stu</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 查询学生信息</span>    <span class="token comment" spellcheck="true"># 查询所有的学生信息,all()</span>    stus <span class="token operator">=</span> Student<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> stu <span class="token keyword">in</span> stus<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span>s_name<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 查询id=2的学生信息，filter()</span>    stu <span class="token operator">=</span> Student<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 1.get()取唯一的一个对象</span>    <span class="token comment" spellcheck="true"># 2.get(条件)条件必须成立</span>    stu <span class="token operator">=</span> Student<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 查询满足条件的信息</span>    stus <span class="token operator">=</span> Student<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>s_gender<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>stus<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 查询不满足条件的信息</span>    stus <span class="token operator">=</span> Student<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>exclude<span class="token punctuation">(</span>s_gender<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>stus<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 排序order_by</span>    <span class="token comment" spellcheck="true"># 升序：order_by('id')</span>    <span class="token comment" spellcheck="true"># 降序：order_by('-id')</span>    stus <span class="token operator">=</span> Student<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>order_by<span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span>    stus <span class="token operator">=</span> Student<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>order_by<span class="token punctuation">(</span><span class="token string">'-id'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>stus<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 取出对象中的某个字段</span>    stus <span class="token operator">=</span> Student<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token string">'s_name'</span><span class="token punctuation">,</span> <span class="token string">'s_age'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>stus<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 判断要取的值是否存在</span>    aa <span class="token operator">=</span> Student<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>s_name<span class="token operator">=</span><span class="token string">'老王'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>aa<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 计算结果的条数</span>    stus <span class="token operator">=</span> Student<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>s_gender<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>stus<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 语法：字段__运算符</span>    <span class="token comment" spellcheck="true"># 包含，模糊查询：contains</span>    stus <span class="token operator">=</span> Student<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>s_name__contains<span class="token operator">=</span><span class="token string">'大'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>stus<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># like '大%'  '%逼'</span>    <span class="token comment" spellcheck="true"># startswith - 以什么开头    endswith - 以什么结尾</span>    stus <span class="token operator">=</span> Student<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>s_name__startswith<span class="token operator">=</span><span class="token string">'大'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>stus<span class="token punctuation">)</span>    stus <span class="token operator">=</span> Student<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>s_name__endswith<span class="token operator">=</span><span class="token string">'b'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>stus<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># sql  where id in (1,2,3,4,5,6,7,8)</span>    <span class="token comment" spellcheck="true"># __in   - 在某个范围内</span>    <span class="token comment" spellcheck="true"># pk - 主键</span>    stus <span class="token operator">=</span> Student<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>id__in<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>stus<span class="token punctuation">)</span>    stus <span class="token operator">=</span> Student<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>pk__in<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>stus<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># gte(大于等于) gt(大于) lt(小于) lte(小于等于)</span>    stus <span class="token operator">=</span> Student<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>s_age__gte<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">,</span> s_age__lte<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>stus<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 聚合  Avg Max Sum Count</span>    age_avg <span class="token operator">=</span> Student<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>aggregate<span class="token punctuation">(</span>Avg<span class="token punctuation">(</span><span class="token string">'s_age'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>age_avg<span class="token punctuation">)</span>    age_sum <span class="token operator">=</span> Student<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>aggregate<span class="token punctuation">(</span>Sum<span class="token punctuation">(</span><span class="token string">'s_age'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>age_sum<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 查询年龄大于等于18且小于等于20</span>    stus <span class="token operator">=</span> Student<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>s_age__gte<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">,</span> s_age__lte<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>stus<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 查询年龄大于等于18或小于等于20, Q()</span>    stus <span class="token operator">=</span> Student<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>Q<span class="token punctuation">(</span>s_age__gte<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">)</span> <span class="token operator">|</span> Q<span class="token punctuation">(</span>s_age__lte<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>stus<span class="token punctuation">)</span>    stus <span class="token operator">=</span> Student<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span><span class="token operator">~</span>Q<span class="token punctuation">(</span>s_age__gte<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>stus<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 查询物理成绩大于数学成绩的学生</span>    stus <span class="token operator">=</span> Student<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> stu <span class="token keyword">in</span> stus<span class="token punctuation">:</span>        <span class="token keyword">if</span> stu<span class="token punctuation">.</span>wuli <span class="token operator">></span> stu<span class="token punctuation">.</span>math<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span>s_name<span class="token punctuation">)</span>    stus <span class="token operator">=</span> Student<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>order_by<span class="token punctuation">(</span><span class="token string">'-math'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> stus<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>math<span class="token punctuation">)</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'查询所有的学生信息'</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Django基础</title>
      <link href="/2019/01/03/django-ji-chu/"/>
      <url>/2019/01/03/django-ji-chu/</url>
      
        <content type="html"><![CDATA[<h2 id="1-虚拟环境"><a href="#1-虚拟环境" class="headerlink" title="1.虚拟环境"></a>1.虚拟环境</h2><h3 id="a-安装-pip-install-virtualenv"><a href="#a-安装-pip-install-virtualenv" class="headerlink" title="a.安装: pip install virtualenv"></a>a.安装: pip install virtualenv</h3><h3 id="b-使用-virtualenv-–no-site-packages-p-D-python3-python-exe-name"><a href="#b-使用-virtualenv-–no-site-packages-p-D-python3-python-exe-name" class="headerlink" title="b. 使用: virtualenv –no-site-packages -p D:\python3\python.exe name"></a>b. 使用: virtualenv –no-site-packages -p D:\python3\python.exe name</h3><p>–no-site-packages: 表示创建的虚拟环境为纯净的环境，不安装有其他的库<br>-p: 表示虚拟环境中的python版本</p><h3 id="c-pip使用"><a href="#c-pip使用" class="headerlink" title="c. pip使用"></a>c. pip使用</h3><p>pip list: 插看安装的库<br>pip install xxx: 安装</p><h3 id="d-激活虚拟环境"><a href="#d-激活虚拟环境" class="headerlink" title="d. 激活虚拟环境"></a>d. 激活虚拟环境</h3><p>Windows: 直接执行activate命令<br>Mac/Linux/Ubuntu: 直接执行source activate命令</p><h3 id="e-退出虚拟环境"><a href="#e-退出虚拟环境" class="headerlink" title="e. 退出虚拟环境"></a>e. 退出虚拟环境</h3><p>Windows/Mac/Linux/Ubuntu: 直接执行deactivate</p><h2 id="2-Django项目"><a href="#2-Django项目" class="headerlink" title="2.Django项目"></a>2.Django项目</h2><h3 id="a-创建项目-django-amdin-startproject-项目名称"><a href="#a-创建项目-django-amdin-startproject-项目名称" class="headerlink" title="a. 创建项目: django-amdin startproject 项目名称"></a>a. 创建项目: django-amdin startproject 项目名称</h3><h3 id="b-创建应用-python-manage-py-startapp-应用名称"><a href="#b-创建应用-python-manage-py-startapp-应用名称" class="headerlink" title="b. 创建应用: python manage.py startapp 应用名称"></a>b. 创建应用: python manage.py startapp 应用名称</h3><h3 id="c-启动"><a href="#c-启动" class="headerlink" title="c. 启动"></a>c. 启动</h3><p>c1. 启动命令: python manage.py runserver。默认IP为127.0.0.1  默认端口为8000<br>c2. 修改启动端口: python manage.py runserver 端口<br>c3. 修改IP和端口: python manage.py runserver IP:端口<br>c4. IP参数: 如果为0.0.0.0表示任何人都可以通过公网IP访问django项目<br>c5. 端口PORT参数: 如果端口设置为80，表示该端口可以不用写</p><h2 id="3-Django模式"><a href="#3-Django模式" class="headerlink" title="3.Django模式"></a>3.Django模式</h2><p>M:<br>模型层: 定义模型和数据库中的表之间的关联关系<br>V:<br>视图层: 定义业务逻辑<br>T :<br>模板: HTML页面</p><h2 id="4-数据库准备工作"><a href="#4-数据库准备工作" class="headerlink" title="4.数据库准备工作"></a>4.数据库准备工作</h2><h3 id="a-settings-py中配置"><a href="#a-settings-py中配置" class="headerlink" title="a. settings.py中配置"></a>a. settings.py中配置</h3><p>USER参数: 访问用户<br>PASSWORD参数: 密码<br>HOST参数: 访问数据库的地址<br>PORT参数: 访问数据库的端口<br>NAME参数: 数据库名<br>‘OPTIONS’:{‘isolation_level’:None}</p><h3 id="b-安装pymysql"><a href="#b-安装pymysql" class="headerlink" title="b. 安装pymysql"></a>b. 安装pymysql</h3><p>b1. 使用pymysql连接数据库: 因为python3没有MySQLdb驱动，无法直接连接MySQL<br>b2. 在工程目录的<strong>init</strong>.py文件中定义  pymysql.install_as_MySQLdb()</p><h3 id="c-迁移"><a href="#c-迁移" class="headerlink" title="c. 迁移"></a>c. 迁移</h3><p>c1. 第一次迁移: python manege.py migrate<br>c2. 之后迁移(除开第一次迁移)<br>生成迁移文件: python manage.py makemigrations<br>执行迁移文件: python manage.py migrate</p><h3 id="d-插入管理员账号"><a href="#d-插入管理员账号" class="headerlink" title="d. 插入管理员账号"></a>d. 插入管理员账号</h3><p>python manage.py createsuperuser</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>title</title>
      <link href="/2019/01/03/title/"/>
      <url>/2019/01/03/title/</url>
      
        <content type="html"><![CDATA[<h1 id="你好！"><a href="#你好！" class="headerlink" title="你好！"></a>你好！</h1><h1 id="hello！"><a href="#hello！" class="headerlink" title="hello！"></a>hello！</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql查语法</title>
      <link href="/2019/01/03/mysql-cha-yu-fa/"/>
      <url>/2019/01/03/mysql-cha-yu-fa/</url>
      
        <content type="html"><![CDATA[<p>– 创建人力资源管理系统数据库<br>drop database if exists hrs;<br>create database hrs default charset utf8;<br>– 切换数据库上下文环境<br>use hrs;<br>– 删除表<br>drop table if exists tb_emp;<br>drop table if exists tb_dept;<br>– 创建部门表<br>create table tb_dept<br>(<br>dno int comment ‘部门编号’,<br>dname varchar(10) not null comment ‘部门名称’,<br>dloc varchar(20) not null    comment ‘部门所在地’,<br>primary key (dno)<br>);<br>– 添加部门记录<br>insert into tb_dept values<br> (10, ‘会计部’, ‘北京’),<br> (20, ‘研发部’, ‘成都’),<br> (30, ‘销售部’, ‘重庆’),<br> (40, ‘运维部’, ‘深圳’);<br>– 创建员工表<br>create table tb_emp<br>(<br>eno int comment ‘员工编号’,<br>ename varchar(20) not null comment ‘员工姓名’,<br>job varchar(20) not null comment ‘员工职位’,<br>mgr int comment ‘主管编号’,<br>sal int not null comment ‘员工工资’,<br>comm int comment ‘每月补贴’,<br>dno int comment ‘所在部门编号’,<br>primary key (eno),<br>foreign key (dno) references tb_dept (dno)<br>);</p><p>– 添加员工记录<br>insert into tb_emp values<br> (7800, ‘张三丰’, ‘总裁’, null, 9000, 1200, 20),<br> (2056, ‘乔峰’, ‘分析师’, 7800, 5000, 1500, 20),<br> (3088, ‘李莫愁’, ‘设计师’, 2056, 3500, 800, 20),<br> (3211, ‘张无忌’, ‘程序员’, 2056, 3200, null, 20),<br> (3233, ‘丘处机’, ‘程序员’, 2056, 3400, null, 20),<br> (3251, ‘张翠山’, ‘程序员’, 2056, 4000, null, 20),<br> (5566, ‘宋远桥’, ‘会计师’, 7800, 4000, 1000, 10),<br> (5234, ‘郭靖’, ‘出纳’, 5566, 2000, null, 10),<br> (3344, ‘黄蓉’, ‘销售主管’, 7800, 3000, 800, 30),<br> (1359, ‘胡一刀’, ‘销售员’, 3344, 1800, 200, 30),<br> (4466, ‘苗人凤’, ‘销售员’, 3344, 2500, null, 30),<br> (3244, ‘欧阳锋’, ‘程序员’, 3088, 3200, null, 20),<br> (3577, ‘杨过’, ‘会计’, 5566, 2200, null, 10),<br> (3588, ‘朱九真’, ‘会计’, 5566, 2500, null, 10);</p><p>– 查询薪资最高的员工姓名和工资<br>select ename as 姓名, sal as 月薪 from tb_emp<br>where sal=(select max(sal) from tb_emp);</p><p>– 查询员工的姓名和年薪((工资+补贴)<em>12)<br>select ename as 姓名, (sal+ifnull(comm,0))</em>12 as 年薪<br>from tb_emp order by 年薪 desc;</p><p>– 查询有员工的部门的编号和人数<br>select dno as 部门编号, count(dno) as 人数<br>from tb_emp group by dno;</p><p>– 查询所有部门的名称和人数<br>– 当列有二义性的时候使用完全限定名<br>select dname as 部门名称, total from tb_dept t1,<br>(select dno, count(dno) as total from tb_emp group by dno) t2<br>where t1.dno=t2.dno;</p><p>select dname as 部门名称, ifnull(total,0) from tb_dept t1 left outer join<br>(select dno, count(dno) as total from tb_emp group by dno) t2<br>on t1.dno=t2.dno;</p><p>– 查询薪资最高的员工(Boss除外)的姓名和工资<br>select ename as 姓名, sal as 薪资 from tb_emp<br>where sal=(select max(sal) from tb_emp where mgr);<br>– 查询薪水超过平均薪水的员工的姓名和工资<br>select ename as 姓名, sal as 薪资 from tb_emp<br>where sal&gt;(select avg(sal) from tb_emp);<br>– 查询薪水超过其所在部门平均薪水的员工的姓名、部门编号和工资<br>select ename, t1.dno, sal from tb_emp t1 inner join<br>(select dno, avg(sal) as avgsal from tb_emp group by dno) t2<br>on t1.dno=t2.dno<br>where sal&gt;avgsal;<br>– 查询部门中薪水最高的人姓名、工资和所在部门名称<br>select ename as 名字, sal as 工资, dname as 部门名称 from tb_dept t3 inner join<br>(select ename, sal, t1.dno from tb_emp t1 inner join<br>(select dno, max(sal) as maxsal from tb_emp group by dno) t2<br>on t1.dno=t2.dno<br>where sal=maxsal) t4<br>on t3.dno=t4.dno;<br>– 查询主管的姓名和职位</p><p>– 集合运算和去重操作性能都非常糟糕应该尽量避免使用<br>– 可以使用exists和not exists来替代集合运算和去重</p><p>select ename, job from tb_emp t1 where exists<br>(select ‘x’ from tb_emp t2 where t1.eno=t2.mgr);</p><p>select ename, job from tb_emp t1 where not exists<br>(select ‘x’ from tb_emp t2 where t1.eno=t2.mgr);<br>– 查询薪资排名4~6名的员工姓名和工资<br>select ename, sal from tb_emp order by sal desc limit 3,3;<br>select ename, sal from tb_emp order by sal desc limit 3 offset 3;</p><p>– select - from - where - group by(分组) - having - order by(排序) - limit</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前端(总结)</title>
      <link href="/2019/01/02/qian-duan-zong-jie/"/>
      <url>/2019/01/02/qian-duan-zong-jie/</url>
      
        <content type="html"><![CDATA[<p>1.HTML标签 - 承载内容 - content<br>2.CSS - 渲染页面 - display </p><ul><li>选择器<ul><li>通配符</li><li>标签选择器</li><li>类选择器</li><li>id选择器</li><li>属性选择器</li><li>后代选择器 / 父子选择器</li><li>兄弟选择器 / 相邻兄弟选择器</li></ul></li><li>就近原则/具体性原则/重要性原则</li><li>盒子模型（内容-padding-border-背景图-背景色-margin）</li><li>常用样式属性和常用属性值</li><li>伪类 / 伪元素</li></ul><p>3.JavaScript - 交互行为 - behavior</p><ul><li>语法规范 - ECMAScript</li><li>BOM - 浏览器对象模型 - window</li><li>DOM - 文档对象类型 - document<ul><li>getElementById() / getElementsByTagName() /<br>getElementsByClassName() / querySelector() /<br>querySelectorAll()</li><li>createElement() / appendChild() / insertBefore()</li><li>removeChild()</li><li>innerHTML / textContent / className / style</li><li>parentNode / children / prevSibling / nextSibling</li><li>addEventListener / removeEventListener</li></ul></li><li>jQuery - window.$ / window.jQuery<ul><li>$(‘样式表选择器’)：获取页面元素返回jQuery对象</li><li>$(‘&lt;标签&gt;’)：创建新元素得到jQuery对象</li><li>$(原生JavaScript对象)：将原生JS对象转换成jQuery对象</li><li>$(function(){}):绑定页面加载完成之后要执行的回调函数</li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vim编辑器之神</title>
      <link href="/2019/01/02/vim-bian-ji-qi-zhi-shen/"/>
      <url>/2019/01/02/vim-bian-ji-qi-zhi-shen/</url>
      
        <content type="html"><![CDATA[<h1 id="vim编辑器之神"><a href="#vim编辑器之神" class="headerlink" title="vim编辑器之神"></a>vim编辑器之神</h1><h3 id="配置vimrc配置"><a href="#配置vimrc配置" class="headerlink" title="配置vimrc配置"></a>配置vimrc配置</h3><p>在shell中可以通过 <code>vim ~/.vimrc</code> 或者 <code>vim /etc/vimrc</code> 打开vimrc文件对vim进行配置。在这个文件中可以进行很多和vim相关的配置，常用的如下（如果对其他配置感兴趣的可以自己百度）：</p><p><img src="./img/vim1.png" alt=""> </p><h3 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h3><h4 id="1-模式切换"><a href="#1-模式切换" class="headerlink" title="1.模式切换"></a>1.模式切换</h4><p>我们可以将vim分为命令模式、编辑模式和末行模式三种<br><strong>命令模式：</strong>进入vim的时候vim是处于命令模式状态下的，这个时候输入内容不会出现在编辑区  (最末什么都没有)</p><p><strong>末行模式：</strong>在命令模式下输入冒号，让vim进入末行模式。在末行模式的冒号后面可以输入相关的一些指令进行相关操作  (最后有一个冒号)</p><p><strong>编辑模式：</strong>在命令模式下按’i’进入编辑模式。在编辑模式下可以对文件内容进行编辑 (最后 –INSERT– 或者 –插入–)  </p><p>####2.保存和退出<br>在末行模式下输入相应的指令可以对编辑区的内容进行保存和退出vim界面<br><strong>w</strong> – 只保存(类似快捷键ctr+s)<br><strong>q</strong> – 退出（在编辑区的内容全部都保存的情况下才有效）<br><strong>wq</strong> – 保存并退出<br><strong>q!</strong>  – 强制退出（不保存修改信息）    </p><p>####3.光标操作<br>以下光标操作都是在命令模式下输入的<br><strong>^(shift+6)</strong>  – 移动到行首<br><strong>$(shift+4)</strong>  – 移动到行尾<br><strong>G(shift+g)</strong>    – 移动到文件末尾<br><strong>行号G</strong>            – 移动到指定行,例如:30G, 让光标直接跳转到行号是30的那一行<br><strong>gg</strong>                – 移动到文件开头  </p><p>####4.文本操作<br>以下操作不带冒号的是在命令模式下输入，前面有冒号代码后面的内容是在末行模式下输入<br><strong>dd</strong>            – 删除光标所在的行<br><strong>数字dd</strong>        – 从光标所在行开始往后面开始删，删除指定数量行内容<br><strong>:%d</strong>        – 删除所有     </p><p><strong>yy</strong>         – 复制光标所在的行<br><strong>数字yy</strong>        – 从光标所在行开始复制指定行数的内容<br><strong>p</strong>            – 将复制的内容粘贴到光标所在的位置<br><strong>u</strong>            – 撤销<br><strong>ctr+r</strong>    – 反撤销    </p><p><strong>:%!sort</strong>  – 对内容排序  </p><p><strong>:/查找对象[/gice]</strong>    – 搜索匹配正则表达式的内容，按回车回到命令模式后按n往前查找，按N往后查找  </p><p>*<em>:1,$s/被替换对象/替换内容[/gice</em>]*    – 将正则表达式匹配到的内容替换成指定内容   </p><pre><code>-    g: 全局匹配  -     i: 忽略大小写 -   c: 替换时需要提示  -   e: 忽略错误  </code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Redis指令(总结)</title>
      <link href="/2019/01/02/redis-zhi-ling-zong-jie/"/>
      <url>/2019/01/02/redis-zhi-ling-zong-jie/</url>
      
        <content type="html"><![CDATA[<p>登录指令：</p><p>redis-server –requirepass 123456 –appendonly yes –port 6379</p><p>Linux + Apache + MySQL + PHP</p><p>KV存储系统 - REmote DIctionary Server</p><p>Github - 20000 - 50000+</p><p>Github、Twitter、YouTube</p><p>提供高速缓存服务 - 缓存热点数据（访问量大数据量不大）<br>缓解了数据的压力（高频访问数据不用直接访问数据库）</p><p>Redis提供了两种持久化数据的方案：</p><ol><li>RDB - 默认开启</li><li>AOF - 默认关闭 –appendonly yes</li></ol><p>auth - 验证身份<br>ping - 心跳事件<br>set - 设置键值对<br>get - 取值<br>expire - 设置超时时间<br>ttl - 查看剩余时间<br>del - 删除键<br>keys - 查看键<br>exists - 判断键是否存在</p><p>flushdb - 清空数据库中的键值对<br>flushall - 清除所有数据库中的所有键值对<br>select - 切换底层数据库<br>dbsize - 查看当前数据库有多少组键值对</p><p>save / bgsave - 保存数据/后台保存数据<br>shutdown - 关闭服务器<br>quit - 退出</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>redis命令</title>
      <link href="/2019/01/02/redis-ming-ling/"/>
      <url>/2019/01/02/redis-ming-ling/</url>
      
        <content type="html"><![CDATA[<p>1、连接操作相关的命令</p><p>quit：关闭连接（connection）</p><p>auth：简单密码认证</p><p>2、对value操作的命令</p><p>exists(key)：确认一个key是否存在</p><p>del(key)：删除一个key</p><p>type(key)：返回值的类型</p><p>keys(pattern)：返回满足给定pattern的所有key</p><p>randomkey：随机返回key空间的一个key</p><p>rename(oldname, newname)：将key由oldname重命名为newname，若newname存在则删除newname表示的key</p><p>dbsize：返回当前数据库中key的数目</p><p>expire：设定一个key的活动时间（s）</p><p>ttl：获得一个key的活动时间</p><p>select(index)：按索引查询</p><p>move(key, dbindex)：将当前数据库中的key转移到有dbindex索引的数据库</p><p>flushdb：删除当前选择数据库中的所有key</p><p>flushall：删除所有数据库中的所有key</p><p>3、对String操作的命令</p><p>set(key, value)：给数据库中名称为key的string赋予值value</p><p>get(key)：返回数据库中名称为key的string的value</p><p>getset(key, value)：给名称为key的string赋予上一次的value</p><p>mget(key1, key2,…, key N)：返回库中多个string（它们的名称为key1，key2…）的value</p><p>setnx(key, value)：如果不存在名称为key的string，则向库中添加string，名称为key，值为value</p><p>setex(key, time, value)：向库中添加string（名称为key，值为value）同时，设定过期时间time</p><p>mset(key1, value1, key2, value2,…key N, value N)：同时给多个string赋值，名称为key i的string赋值value i</p><p>msetnx(key1, value1, key2, value2,…key N, value N)：如果所有名称为key i的string都不存在，则向库中添加string，</p><p>名称key i赋值为value i</p><p>incr(key)：名称为key的string增1操作</p><p>incrby(key, integer)：名称为key的string增加integer</p><p>decr(key)：名称为key的string减1操作</p><p>decrby(key, integer)：名称为key的string减少integer</p><p>append(key, value)：名称为key的string的值附加value</p><p>substr(key, start, end)：返回名称为key的string的value的子串</p><p>4、对List操作的命令</p><p>rpush(key, value)：在名称为key的list尾添加一个值为value的元素</p><p>lpush(key, value)：在名称为key的list头添加一个值为value的 元素</p><p>llen(key)：返回名称为key的list的长度</p><p>lrange(key, start, end)：返回名称为key的list中start至end之间的元素（下标从0开始，下同）</p><p>ltrim(key, start, end)：截取名称为key的list，保留start至end之间的元素</p><p>lindex(key, index)：返回名称为key的list中index位置的元素</p><p>lset(key, index, value)：给名称为key的list中index位置的元素赋值为value</p><p>lrem(key, count, value)：删除count个名称为key的list中值为value的元素。</p><p>count为0，删除所有值为value的元素，count&gt;0从头至尾删除count个值为value的元素，count&lt;0从尾到头删除|count|个值为value的元素。 </p><p>lpop(key)：返回并删除名称为key的list中的首元素 rpop(key)：返回并删除名称为key的list中的尾元素 </p><p>blpop(key1, key2,… key N, timeout)：lpop命令的block版本。</p><p>即当timeout为0时，若遇到名称为key i的list不存在或该list为空，则命令结束。</p><p>如果timeout&gt;0，则遇到上述情况时，等待timeout秒，如果问题没有解决，则对keyi+1开始的list执行pop操作。</p><p>brpop(key1, key2,… key N, timeout)：rpop的block版本。参考上一命令。</p><p>rpoplpush(srckey, dstkey)：返回并删除名称为srckey的list的尾元素，并将该元素添加到名称为dstkey的list的头部</p><p>5、对Set操作的命令</p><p>sadd(key, member)：向名称为key的set中添加元素member</p><p>srem(key, member) ：删除名称为key的set中的元素member</p><p>spop(key) ：随机返回并删除名称为key的set中一个元素</p><p>smove(srckey, dstkey, member) ：将member元素从名称为srckey的集合移到名称为dstkey的集合</p><p>scard(key) ：返回名称为key的set的基数</p><p>sismember(key, member) ：测试member是否是名称为key的set的元素</p><p>sinter(key1, key2,…key N) ：求交集</p><p>sinterstore(dstkey, key1, key2,…key N) ：求交集并将交集保存到dstkey的集合</p><p>sunion(key1, key2,…key N) ：求并集</p><p>sunionstore(dstkey, key1, key2,…key N) ：求并集并将并集保存到dstkey的集合</p><p>sdiff(key1, key2,…key N) ：求差集</p><p>sdiffstore(dstkey, key1, key2,…key N) ：求差集并将差集保存到dstkey的集合</p><p>smembers(key) ：返回名称为key的set的所有元素</p><p>srandmember(key) ：随机返回名称为key的set的一个元素</p><p>6、对zset（sorted set）操作的命令</p><p>zadd(key, score, member)：向名称为key的zset中添加元素member，score用于排序。如果该元素已经存在，则根据score更新该元素的顺序。</p><p>zrem(key, member) ：删除名称为key的zset中的元素member</p><p>zincrby(key, increment, member) ：如果在名称为key的zset中已经存在元素member，则该元素的score增加increment；</p><p>否则向集合中添加该元素，其score的值为increment</p><p>zrank(key, member) ：返回名称为key的zset（元素已按score从小到大排序）中member元素的rank（即index，从0开始），</p><p>若没有member元素，返回“nil”</p><p>zrevrank(key, member) ：返回名称为key的zset（元素已按score从大到小排序）中member元素的rank（即index，从0开始），</p><p>若没有member元素，返回“nil”</p><p>zrange(key, start, end)：返回名称为key的zset（元素已按score从小到大排序）中的index从start到end的所有元素</p><p>zrevrange(key, start, end)：返回名称为key的zset（元素已按score从大到小排序）中的index从start到end的所有元素</p><p>zrangebyscore(key, min, max)：返回名称为key的zset中score &gt;= min且score &lt;= max的所有元素 </p><p>zcard(key)：返回名称为key的zset的基数 zscore(key, element)：返回名称为key的zset中元素element的</p><p>score zremrangebyrank(key, min, max)：删除名称为key的zset中rank &gt;= min且rank &lt;= max的所有元素 </p><p>zremrangebyscore(key, min, max) ：删除名称为key的zset中score &gt;= min且score &lt;= max的所有元素</p><p>zunionstore / zinterstore(dstkeyN, key1,…,keyN, WEIGHTS w1,…wN, AGGREGATE SUM|MIN|MAX)：对N个zset求并集和交集，</p><p>并将最后的集合保存在dstkeyN中。对于集合中每一个元素的score，在进行AGGREGATE运算前，都要乘以对于的WEIGHT参数。</p><p>如果没有提供WEIGHT，默认为1。默认的AGGREGATE是SUM，即结果集合中元素的score是所有集合对应元素进行SUM运算的值，而MIN和MAX是指，</p><p>结果集合中元素的score是所有集合对应元素中最小值和最大值。</p><p>7、对Hash操作的命令</p><p>hset(key, field, value)：向名称为key的hash中添加元素field&lt;—&gt;value</p><p>hget(key, field)：返回名称为key的hash中field对应的value</p><p>hmget(key, field1, …,field N)：返回名称为key的hash中field i对应的value</p><p>hmset(key, field1, value1,…,field N, value N)：向名称为key的hash中添加元素field i&lt;—&gt;value i</p><p>hincrby(key, field, integer)：将名称为key的hash中field的value增加integer</p><p>hexists(key, field)：名称为key的hash中是否存在键为field的域</p><p>hdel(key, field)：删除名称为key的hash中键为field的域</p><p>hlen(key)：返回名称为key的hash中元素个数</p><p>hkeys(key)：返回名称为key的hash中所有键</p><p>hvals(key)：返回名称为key的hash中所有键对应的value</p><p>hgetall(key)：返回名称为key的hash中所有的键（field）及其对应的value</p><p>8、持久化</p><p>save：将数据同步保存到磁盘</p><p>bgsave：将数据异步保存到磁盘</p><p>lastsave：返回上次成功将数据保存到磁盘的Unix时戳</p><p>shundown：将数据同步保存到磁盘，然后关闭服务</p><p>9、远程服务控制</p><p>info：提供服务器的信息和统计</p><p>monitor：实时转储收到的请求</p><p>slaveof：改变复制策略设置</p><p>config：在运行时配置Redis服务器</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Nginx服务器安装</title>
      <link href="/2019/01/02/nginx-fu-wu-qi-an-zhuang/"/>
      <url>/2019/01/02/nginx-fu-wu-qi-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h1 id="Nginx服务器"><a href="#Nginx服务器" class="headerlink" title="Nginx服务器"></a>Nginx服务器</h1><h3 id="1-阿里云添加80端口"><a href="#1-阿里云添加80端口" class="headerlink" title="1.阿里云添加80端口"></a>1.阿里云添加80端口</h3><p>阿里云上默认只有一个22端口用来做远程登录，如果希望在阿里云上安装支持http请求的nginx服务器，需要给阿里云添加80端口</p><p><img src="./img/aliyun0.png" alt="打开安全组设置"><br><img src="./img/aliyun2.png" alt=""><br><img src="./img/aliyun3.png" alt=""><br><img src="./img/aliyun4.png" alt=""></p><h3 id="2-安装nginx"><a href="#2-安装nginx" class="headerlink" title="2. 安装nginx"></a>2. 安装nginx</h3><p>a) 添加nginx存储库  </p><pre class=" language-python"><code class="language-python">    yum install epel<span class="token operator">-</span>release</code></pre><p>b) 安装nginx</p><pre class=" language-python"><code class="language-python">    yum install nginx</code></pre><p>c) 运行nginx<br>Nginx不会自行启动。要运行Nginx  </p><pre><code>    systemctl start nginx</code></pre><p>nginx的运行命令:  </p><pre><code>    systemctl status nginx 查看nginx的状态      systemctl start/stop/enable/disable nginx 启动/关闭/设置开机启动/禁止开机启动  </code></pre><p>d) 系统启动时启动Nginx  </p><pre><code>    systemctl enable nginx</code></pre><p>e）如果您正在运行防火墙，请运行以下命令以允许HTTP和HTTPS通信：   </p><pre><code>    sudo firewall-cmd --permanent --zone=public --add-service=http     sudo firewall-cmd --permanent --zone=public --add-service=https    sudo firewall-cmd --reload</code></pre><h3 id="3-nginx目录共享配置"><a href="#3-nginx目录共享配置" class="headerlink" title="3.nginx目录共享配置"></a>3.nginx目录共享配置</h3><p>a) 在contOS目录中确定一个需要共享的文件夹，例如： /home/yuting<br>b) 打开 etc/nginx/nginx.conf 文件，设置server</p><pre><code>    #共享设置 - 在浏览器中输入服务器ip地址，会展示共享目录的文件列表    root /home/yuting;    location / {           autoindex on;           autoindex_exact_size on;           autoindex_localtime on;    }  </code></pre><p>除了可以共享文件，还可以自定义页面</p><pre><code>    #自定义服务器页面    location / {            root /home/yuting;            index index.html index.htm;    }</code></pre><p>注意： 如果出现权限问题，可以修改目录的权限  </p><h1 id="ssh密钥认证"><a href="#ssh密钥认证" class="headerlink" title="ssh密钥认证"></a>ssh密钥认证</h1><p>1.在主机和从机上执行：<code>ssh-keygen</code></p><p>2.在从机上执行:  <code>scp  id_rsa.pub  root@主机地址:~/.ssh/master.pub</code><br>(上面这条指令是将从机上的 id_rsa.pub文件拷贝传递给到主机的.ssh文件夹下，并且命名为’master.pub’)</p><p>3.在主机中的.ssh文件夹中创建authorized_keys文件： <code>touch authorized_keys</code> </p><p>4.修改文件authorized_keys的权限: <code>chmod 600  authorized_keys</code>  </p><p>5.将master.pub放进authorized_keys文件中:  <code>cat master.pub &gt;&gt;  authorized_keys</code></p><p>6.在操作主机的时候，需要主机能够自己免密访问自己就将自己的公钥放在自己的authorized_keys文件中</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux文件操作命令</title>
      <link href="/2019/01/02/linux-wen-jian-cao-zuo-ming-ling/"/>
      <url>/2019/01/02/linux-wen-jian-cao-zuo-ming-ling/</url>
      
        <content type="html"><![CDATA[<p>Linux文件操作命令：</p><ul><li>pwd - print working directory</li><li>cd - change directory</li><li>ls - list directory contents<br> -a - all<br>  -l - long<br>  -R - recursive</li><li>mkdir - make directory</li><li>rmdir - remove empty directory</li><li>touch</li><li>cp - copy</li><li>rm - remove</li><li>mv - move</li><li>less / more / head / tail</li><li>cat - concatenate</li><li>uniq / sort / cut / wc / diff</li><li><p>find / grep</p></li><li><p>ps -ef / ps -aux</p></li><li>netstat -nap</li><li>ifconfig / ip</li><li>top / sar</li><li>scp / sftp / ssh</li></ul><p>Linux安装软件和配置服务：</p><ol><li>包管理工具 - yum / rpm / apt / deb</li><li>源代码构建安装<ul><li>wget</li><li>gunzip / xz -d</li><li>tar -xvf</li><li>make &amp;&amp; make install</li><li>ln -s 源 目标</li></ul></li></ol><p>systemctl </p><pre><code>- start / stop / restart / status / enable / disable</code></pre><p>service</p><p>firewalld / iptables - 防火墙</p><p>使用vim</p><p>命令模式 –i/a–&gt; 插入模式（编辑模式） –Esc–&gt; 命令模式<br>命令模式 –:?/–&gt; 末行模式 –Enter–&gt; 命令模式</p><p>Ctrl+e / Ctrl+y - 滚动一行<br>Ctrl+f / Ctrl+b - 滚动一页<br>gg - 到首行<br>G - 到末行<br>100G - 到100行<br>hjkl - 左下上右移动光标<br>$ - 光标到行尾<br>0 - 光标到行首<br>dd / dw / d0 / d$ - 删除<br>yy / p - 复制 / 黏贴<br>u / Ctrl+r - 撤销 / 恢复<br>ZZ / :wq - 保存退出 - ! - 强制操作</p><p>/搜索内容（正则） - 查找 - n / N - 向下/上搜索<br>?搜索内容（正则） - 查找<br>:1,$s/搜索的内容（正则）/替换后的内容/ice - 查找替换</p><p>版本比较 - vim -d 文件1 文件2<br>多文件查看 - vim 文件1 文件2 文件3<br>:ls - 查看文件<br>:b - 切换文件<br>:sp / :vs - 拆分窗口<br>Ctrl+w Ctrl+w - 切换窗口</p><p>配置vim —&gt; ~/.vimrc<br>set nu<br>set ts=4<br>set expandtab<br>set autoindent<br>set nohls<br>syntax on<br>set ruler </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>git常用指令</title>
      <link href="/2019/01/02/git-chang-yong-zhi-ling/"/>
      <url>/2019/01/02/git-chang-yong-zhi-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="git常用指令"><a href="#git常用指令" class="headerlink" title="git常用指令"></a>git常用指令</h1><h2 id="1-基本指令"><a href="#1-基本指令" class="headerlink" title="1.基本指令"></a>1.基本指令</h2><p><code>git init</code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ——  新建git仓库<br><code>git add 文件/文件夹</code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ——  将文件添加到缓存区中<br><code>git add -A</code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; — 添加所有内容到缓存区中<br><code>git stutas</code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;———    查看git状态<br><code>git commit -m  ‘提交信息’</code>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;——  将缓存区中的内容全部提交到git本地仓库中  </p><p><code>git log</code>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;——-    查看提交日志  </p><p><code>git reset  - - hard   HEAD</code>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;——   让工作目录中的内容和仓库中的内容保持一致<br><code>git reset  --hard HEAD^</code>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;——  回到上一个版本<br><code>git  reset  - - hard 版本号</code>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;——  回到指定的版本<br><code>git checkout  - -  文件名</code>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ——  从暂存区中恢复工作目录中的内容(让工作区中的指定文件，回到上次提交的时候的状态)  </p><p><code>git clone &lt;url&gt;</code> - 将服务器上的项目(仓库)克隆 (使用https地址需要输入密码，使用ssh地址需要添加公钥)  </p><p><code>git remote add origin 地址</code>      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;—– 关联远程仓库(只需要关联一次)</p><p><code>git push [-u] origin master</code>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;—– 提交(-u在第一次提交分之的时候才用)  </p><h2 id="2-分之管理"><a href="#2-分之管理" class="headerlink" title="2.分之管理"></a>2.分之管理</h2><p>创建仓库会默认给我们创建一个master分之,这个分之一般作为提交和发布分之;开发一般会自己创建一个develop分之，用来开发和测试;多人协作的时候还可能根据不同的人或者(不同的功能)创建不同的分之，用来独立开发  </p><p>常见分之： master(主要是合并develop), develop(主要合并下面的其他分支), 功能/人员分之(开发)  </p><p><code>git branch [-a]</code>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;        - 查看分之<br><code>git branch 分之名</code>        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- 创建分之<br><code>git checkout   分支名</code>        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-   切换分之<br><code>git checkout -b 分之名</code>        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    - 切换并创建新的分之<br><code>git diff    分之1  分之2</code>        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- 查看两个分之之间的差异<br><code>git merge 分之名</code>            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- 让当前分之和指定分之进行合并     </p><p>注意: 切换分之、push、pull，这些操作前要保证工作区是clean  </p><p>怎么避免冲突：  不要发生多个分之对同一个文件在同一个版本下进行修改(和同伴确认和商量)</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/12/21/hello-world/"/>
      <url>/2018/12/21/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
