<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>flask学习</title>
      <link href="/2019/01/24/flask-xue-xi/"/>
      <url>/2019/01/24/flask-xue-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="1-虚拟环境"><a href="#1-虚拟环境" class="headerlink" title="1.虚拟环境"></a>1.虚拟环境</h2><pre><code>创建: virtualenv--no-site-packages -p xxxx freshenv8安装flask: pip install flask安装文件: pip install -r requirement.txt</code></pre><h2 id="2-Flask最小应用"><a href="#2-Flask最小应用" class="headerlink" title="2.Flask最小应用"></a>2.Flask最小应用</h2><h3 id="2-1最小7行代码"><a href="#2-1最小7行代码" class="headerlink" title="2.1最小7行代码"></a>2.1最小7行代码</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#生成flask对象，传入__name__参数，表示模块名或包名</span>app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 告诉服务器，访问127.0.0.1:5000/hello/地址可触发hello()方法</span><span class="token comment" spellcheck="true"># 类似与Django中的urls.py文件的功能</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/hello/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'hello world'</span>        <span class="token comment" spellcheck="true"># sys.argv接收启动命令时的参数，如: python hello.py 0.0.0.0 80</span>ip <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>port <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># host代表启动的ip地址</span><span class="token comment" spellcheck="true"># port代表启动的端口</span><span class="token comment" spellcheck="true"># debug代表启动的模式，调试模型</span>app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span>ip<span class="token punctuation">,</span> port<span class="token operator">=</span>port<span class="token punctuation">,</span> debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></code></pre><h2 id="3-flask-script"><a href="#3-flask-script" class="headerlink" title="3.flask_script"></a>3.flask_script</h2><pre><code>使用: 用于管理flask启动的命令安装: pip install flask_script使用:from flask_script import Managermanage = Manager(flask应用)启动: manage.run()启动命令: python xxx.py runserver -p 端口 -h IP地址 -d 调试模式</code></pre><h2 id="4-flask-blueprint"><a href="#4-flask-blueprint" class="headerlink" title="4.flask-blueprint"></a>4.flask-blueprint</h2><pre><code>背景: 模块化管理路由地址安装: pip install flask-blueprint</code></pre><h3 id="4-1使用-分两步"><a href="#4-1使用-分两步" class="headerlink" title="4.1使用: 分两步"></a>4.1使用: 分两步</h3><pre><code>第一步: 管理路由初始化: blue = Blueprint(&#39;first&#39;, __name__)管理路由: @blue.route(&#39;路由&#39;)</code></pre><pre><code>第二步: 注册蓝图flask对象.register_blueprint(blueprint=blue, url_prefix=&#39;/xxx&#39;)重定向直接重定向redirect(&#39;/app/hello/&#39;): 直接重定向到某个地址反向解析重定向有参情况redirect(url_for(&#39;生成蓝图的第一个参数.重定向的函数名, 参数=值&#39;))无参情况redirect(url_for(&#39;生成蓝图的第一个参数.重定向的函数名&#39;))</code></pre><h2 id="5-路由规则"><a href="#5-路由规则" class="headerlink" title="5.路由规则"></a>5.路由规则</h2><pre><code>格式: &lt;转换器：参数&gt;&lt;int:id&gt; 表示接受的id值为int类型&lt;string:name&gt;表示接收的name值为字符串类型，默认可简写为&lt;name&gt;&lt;float: price&gt;表示接收的price值为浮点数类型&lt;uuid:uid&gt; 表示接收的uid值为uuid类型的参数&lt;path:p&gt; 表示接收的p参数为path路径</code></pre><h2 id="6-错误抛出与捕获"><a href="#6-错误抛出与捕获" class="headerlink" title="6.错误抛出与捕获"></a>6.错误抛出与捕获</h2><pre><code>导包: from flask import abort使用: abort(500)捕获: @blue.errorhandler(500)抛出错误码时，错误码必须符合HTTP定义的状态码,且抛出的错误码要符合运用场景</code></pre><h2 id="7-请求与响应"><a href="#7-请求与响应" class="headerlink" title="7.请求与响应"></a>7.请求与响应</h2><h3 id="7-1请求"><a href="#7-1请求" class="headerlink" title="7.1请求"></a>7.1请求</h3><pre><code>接收参数GET请求: request.args.get(key)或request.args.getlist(key)POST/PUT/PATCH/DELETE请求: request.form.get(key)或request.form.getlist(key)获取请求方式request.method获取路由request.path获取cookierequest.cookies获取文件request.files</code></pre><h3 id="7-2响应"><a href="#7-2响应" class="headerlink" title="7.2响应"></a>7.2响应</h3><pre><code>创建: make_response(响应内容, 响应状态码)， 状态码默认为200，可不写。响应对象.set_cookie(key, value, max_age)响应对象.delete_cookie(key)</code></pre><h2 id="8-session"><a href="#8-session" class="headerlink" title="8.session"></a>8.session</h2><h3 id="8-1思路"><a href="#8-1思路" class="headerlink" title="8.1思路"></a>8.1思路</h3><pre><code>第一次访问任何一个路由地址时,在客户端，将在cookie中存储一个键值对，键为session，值为唯一的uuid类型的参数第一次方式的同时，在服务端指定的redis中，也将存储cookie中的uuid值如果用户登录成功，则可以像redis中存储的uuid参数中保存信息</code></pre><h3 id="8-2flask自带形式"><a href="#8-2flask自带形式" class="headerlink" title="8.2flask自带形式"></a>8.2flask自带形式</h3><pre><code>存储数据: 将session中存储的键值对内容存放在cookie中存储方式: 设置secret_key参数，越复杂越好使用方式: from flask import sessionsession[&#39;key&#39;] = value</code></pre><h3 id="8-3使用flask-session第三方库"><a href="#8-3使用flask-session第三方库" class="headerlink" title="8.3使用flask-session第三方库"></a>8.3使用flask-session第三方库</h3><pre><code>安装: pip install flask-session配置存储的数据库:flask对象.config[&#39;SESSION_TYPE&#39;] = &#39;redis&#39;flask对象.config[&#39;SESSION_REDIS&#39;] = redis.Redis(host, port, password)初始化:from flask_session import Session第一种: Session(flask对象)第二种:se = Session()se.init_app(flask对象)</code></pre><h2 id="9-数据库"><a href="#9-数据库" class="headerlink" title="9.数据库"></a>9.数据库</h2><pre><code>安装: pip install flask-sqlalchemy创建对象:from flask_sqlalchemy import SQLALChemydb = SQLALChemy()</code></pre><h3 id="9-1模型定义"><a href="#9-1模型定义" class="headerlink" title="9.1模型定义:"></a>9.1模型定义:</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 定义自增的主键id</span>    id <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> autoincrement<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 定义长度为10的name字段，类型为字符串，唯一且不能为空</span>    name <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> unique<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 定义密码password字段</span>    password <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token number">249</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'flask_user'</span></code></pre><h3 id="9-2配置链接"><a href="#9-2配置链接" class="headerlink" title="9.2配置链接:"></a>9.2配置链接:</h3><pre><code>flask对象.config[&#39;SQLALCHEMY_DATABASE_URI&#39;]=&#39;mysql+pymysql://root:123456@127.0.0.1:3306/flask8&#39;</code></pre><h3 id="9-3初始化"><a href="#9-3初始化" class="headerlink" title="9.3初始化:"></a>9.3初始化:</h3><pre><code>db.init_app(flask对象)</code></pre><h3 id="9-4模型的映射"><a href="#9-4模型的映射" class="headerlink" title="9.4模型的映射"></a>9.4模型的映射</h3><pre><code>进入交互环境: python manage.py shell 导入模型: from app.models import db 创建: db.create_all()删除: db.drop_all()</code></pre><h3 id="9-5增"><a href="#9-5增" class="headerlink" title="9.5增"></a>9.5增</h3><pre><code>add(对象)add_all([对象1，对象2， 对象3...])db.session.add(对象)db.session.commit()</code></pre><h3 id="9-6删"><a href="#9-6删" class="headerlink" title="9.6删"></a>9.6删</h3><pre><code>delete(对象)db.session.delete(对象)db.session.commit()</code></pre><h3 id="9-7改"><a href="#9-7改" class="headerlink" title="9.7改"></a>9.7改</h3><pre><code>db.session.add(对象)db.session.commit()注意: add(对象)这个方法可不写</code></pre><h3 id="9-8查"><a href="#9-8查" class="headerlink" title="9.8查"></a>9.8查</h3><pre><code>filter(模型名.字段 == 值), 注意filter中可以加多个条件，表示查询条件之间是且的操作。且filter()可以进行链式调用filter_by(字段 = 值)all(): 查询所有的数据，结果为列表first(): 查询filter或filter_by结果中的第一个元素对象get(id值): 获取主键所在行的对象，获取不到信息也不会报错order_by(): 排序order_by(&#39;-id&#39;): 表示按照id的降序order_by(&#39;id&#39;): 表示按照id的升序offset(数值1).limit(数值2): 表示跳过几个参数(数值1)，再截取几个参数(数值2)</code></pre><h3 id="9-9大小于"><a href="#9-9大小于" class="headerlink" title="9.9大小于"></a>9.9大小于</h3><pre><code>gt: 大于ge:大于等于lt: 小于le:小于等于&gt;,&lt;,&lt;=,&gt;=</code></pre><h3 id="9-10模糊"><a href="#9-10模糊" class="headerlink" title="9.10模糊"></a>9.10模糊</h3><pre><code>contains()： 包含startswith(): 以什么开头endswith(): 以什么结束like(): 模糊查询%: 表示匹配任何长度的数据_: 匹配一位</code></pre><h3 id="9-11且或非"><a href="#9-11且或非" class="headerlink" title="9.11且或非"></a>9.11且或非</h3><pre><code>and_ : 且, 可不写，默认情况就是且的操作not_ : 非or_: 或</code></pre><h3 id="9-12paginate"><a href="#9-12paginate" class="headerlink" title="9.12paginate"></a>9.12paginate</h3><pre><code>has_next: 判断是否有下一页next_num: 下一页页码has_prev: 判断是否有上一页prev_num: 上一页页码page: 当前页pages: 共多少页iter_pages()： 循环脚码</code></pre><h2 id="10-flask-login"><a href="#10-flask-login" class="headerlink" title="10.flask-login"></a>10.flask-login</h2><h3 id="10-1注册"><a href="#10-1注册" class="headerlink" title="10.1注册"></a>10.1注册</h3><pre><code>加密: generate_password_hash()解密: check_password_hash()</code></pre><h3 id="10-2登录"><a href="#10-2登录" class="headerlink" title="10.2登录"></a>10.2登录</h3><pre><code>安装: pip install flask-login初始化: from flask_login import LoginManagerlm = LoginManager()lm.init_app(flask对象)登录用户: login_user(登录系统用户对象)退出用户: logout_user()登录校验: login_required在模板中可使用{{ current_user.name }}渲染登录系统的用户名信息重点: 用户的模型中需继承UserMixin，或者自定义相关的属性与方法必须定义回调user_loader，用于返回登录系统的用户对象</code></pre><h2 id="11-模板"><a href="#11-模板" class="headerlink" title="11.模板"></a>11.模板</h2><h3 id="11-1父模板"><a href="#11-1父模板" class="headerlink" title="11.1父模板:"></a>11.1父模板:</h3><pre><code>父模板负责挖坑{% bolock %}{% endblock %}, 挖的坑可以被子模板动态的填充内容</code></pre><h3 id="11-2子模板-继承于父模板-并动态填充坑的内容"><a href="#11-2子模板-继承于父模板-并动态填充坑的内容" class="headerlink" title="11.2子模板: 继承于父模板,并动态填充坑的内容"></a>11.2子模板: 继承于父模板,并动态填充坑的内容</h3><h4 id="11-2-1继承"><a href="#11-2-1继承" class="headerlink" title="11.2-1继承:"></a>11.2-1继承:</h4><pre><code>{% extends '父模板' %}</code></pre><h4 id="11-2-2包含"><a href="#11-2-2包含" class="headerlink" title="11.2-2包含:"></a>11.2-2包含:</h4><pre><code>{% include '某个模板文件' %}</code></pre><h4 id="11-2-3获取坑之前填充的内容"><a href="#11-2-3获取坑之前填充的内容" class="headerlink" title="11.2-3获取坑之前填充的内容:"></a>11.2-3获取坑之前填充的内容:</h4><pre><code>{{ super() }}</code></pre><h4 id="11-2-4加载静态文件"><a href="#11-2-4加载静态文件" class="headerlink" title="11.2-4加载静态文件"></a>11.2-4加载静态文件</h4><pre><code>硬编码: 指定定义静态文件的路径使用url_for进行解析: {{ url_for('static', filename='css/index.css') }}</code></pre><h4 id="11-2-5注解"><a href="#11-2-5注解" class="headerlink" title="11.2-5注解"></a>11.2-5注解</h4><pre><code>&lt;!--注解内容--&gt;: 注意注解的内容中标签必须定义正确注意: 和django的区别，没有comment标签</code></pre><h4 id="11-2-6标签"><a href="#11-2-6标签" class="headerlink" title="11.2-6标签"></a>11.2-6标签</h4><pre><code>if标签: {% if  条件 == 值 %} {% endif %}for标签: {% for i in 迭代对象 %} {% else %} {% endfor %}</code></pre><h4 id="11-2-7loop"><a href="#11-2-7loop" class="headerlink" title="11.2-7loop"></a>11.2-7loop</h4><pre><code>获取从1开始增加的编号: {{ loop.index }}获取从0开始增加的编号: {{ loop.index0 }}倒序到1结束: {{ loop.revindex }}倒序到0结束: {{ loop.revindex0 }}判断循环第一次: {{ loop.first }}判断循环最后一次: {{ loop.last }}重点: jinja2模板引擎中没有ifequal标签</code></pre><h4 id="11-2-8macro宏定义"><a href="#11-2-8macro宏定义" class="headerlink" title="11.2-8macro宏定义"></a>11.2-8macro宏定义</h4><pre><code>无参情况{%  macro say() %}  {% endmacro %}有参情况{% macro say(name) %}  {{ name }} {% endmacro%}引入{% from 'functions.html' import say %}使用: {{ say() }}</code></pre><h2 id="12-关联模型"><a href="#12-关联模型" class="headerlink" title="12.关联模型"></a>12.关联模型</h2><h3 id="12-1一对多"><a href="#12-1一对多" class="headerlink" title="12.1一对多"></a>12.1一对多</h3><pre><code>定义外键字段, db.ForeignKey(&#39;关联表名.id&#39;)关联字段db.relationship(&#39;关联的模型名&#39;, backref=&#39;反向引用参数&#39;)重点: relationship定义的字段，可以放在任何一个模型中</code></pre><h3 id="12-2多对多"><a href="#12-2多对多" class="headerlink" title="12.2多对多"></a>12.2多对多</h3><pre><code>定义外键字段是通过中间表，db.Table(表名, 字段)关联字段db.relationship(&#39;关联的模型名&#39;, secondary=&#39;中间表&#39;, backref=&#39;反向引用参数&#39;)重点: relationship定义的字段，可以放在任何一个模型中</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>django过滤器</title>
      <link href="/2019/01/23/django-guo-lu-qi/"/>
      <url>/2019/01/23/django-guo-lu-qi/</url>
      
        <content type="html"><![CDATA[<pre><code>1、add ：将value的值增加2。使用形式为：{{ value | add: "2"}}。2、addslashes：在value中的引号前增加反斜线。使用形式为：{{ value | addslashes }}。3、capfirst：value的第一个字符转化成大写形式。使用形式为：{{ value | capfirst }}。4、cut：从给定value中删除所有arg的值。使用形式为：{{ value | cut:arg}}。5、date: 格式化时间格式。使用形式为：{{ value | date:"Y-m-d H:i:s" }}6、default：如果value是False，那么输出使用缺省值。使用形式：{{ value | default: "nothing" }}。例如，如果value是“”，那么输出将是nothing7、default_if_none：如果value是None，那么输出将使用缺省值。使用形式：{{ value | default_if_none:"nothing" }}，例如，如果value是None，那么输出将是nothing8、dictsort：如果value的值是一个字典，那么返回值是按照关键字排序的结果使用形式：{{ value | dictsort:"name"}}，例如，如果value是：[{&#39;name&#39;: &#39;python&#39;},{&#39;name&#39;: &#39;java&#39;},{&#39;name&#39;: &#39;c++&#39;},]那么，输出是：[{&#39;name&#39;: &#39;c++&#39;},{&#39;name&#39;: &#39;java&#39;},{&#39;name&#39;: &#39;python&#39;}, ]9、dictsortreversed：如果value的值是一个字典，那么返回值是按照关键字排序的结果的反序。使用形式：与dictsort过滤器相同。10、divisibleby：如果value能够被arg整除，那么返回值将是True。使用形式：{{ value | divisibleby:arg}}，如果value是9，arg是3，那么输出将是True11、escape：替换value中的某些字符，以适应HTML格式。使用形式：{{ value | escape}}。例如，&lt; 转化为 &amp;lt;&gt; 转化为 &amp;gt;&#39; 转化为  &amp;#39;&quot; 转化为  &amp;quot;13、filesizeformat：格式化value，使其成为易读的文件大小。使用形式：{{ value | filesizeformat }}。例如：13KB，4.1MB等。14、first：返回列表/字符串中的第一个元素。使用形式：{{ value | first }}16、iriencode：如果value中有非ASCII字符，那么将其进行转化成URL中适合的编码，如果value已经进行过URLENCODE，改操作就不会再起作用。使用形式：{{value | iriencode}}17、join：使用指定的字符串连接一个list，作用如同python的str.join(list)。使用形式：{{ value | join:"arg"}}，如果value是[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;]，arg是&#39;//&#39;那么输出是a//b//c18、last：返回列表/字符串中的最后一个元素。使用形式：{{ value | last }}19、length：返回value的长度。使用形式：{{ value | length }}20、length_is：如果value的长度等于arg的时候返回True。使用形式：{{ value | length_is:"arg"}}。例如：如果value是[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;]，arg是3，那么返回True21、linebreaks：value中的&quot;\n&quot;将被&lt;br/&gt;替代，并且整个value使用&lt;/p&gt;包围起来。使用形式：{{value|linebreaks}}22、linebreaksbr：value中的&quot;\n&quot;将被&lt;br/&gt;替代。使用形式：{{value |linebreaksbr}}23、linenumbers：显示的文本，带有行数。使用形式：{{value | linenumbers}}24、ljust：在一个给定宽度的字段中，左对齐显示value。使用形式：{{value | ljust}}25、center：在一个给定宽度的字段中，中心对齐显示value。使用形式：{{value | center}}26、rjust：：在一个给定宽度的字段中，右对齐显示value。使用形式：{{value | rjust}}27、lower：将一个字符串转换成小写形式。使用形式：{{value | lower}}30、random：从给定的list中返回一个任意的Item。使用形式：{{value | random}}31、removetags：删除value中tag1,tag2....的标签。使用形式：{{value | removetags:"tag1 tag2 tag3..."}}32、safe：当系统设置autoescaping打开的时候，该过滤器使得输出不进行escape转换。使用形式：{{value | safe}}33、safeseq：与safe基本相同，但有一点不同的就是：safe是针对字符串，而safeseq是针对多个字符串组成的sequence34、slice：与python语法中的slice相同。使用形式：{{some_list | slice:"2"}}37、striptags：删除value中的所有HTML标签.使用形式：{{value | striptags}}38、time：格式化时间输出。使用形式：{{value | time:"H:i"}}或者{{value | time}}39、title：转换一个字符串成为title格式。40、truncatewords：将value切成truncatewords指定的单词数目。使用形式：{{value | truncatewords:2}}。例如，如果value是Joel is a slug 那么输出将是：Joel is ...42、upper：转换一个字符串为大写形式43、urlencode：将一个字符串进行URLEncode44、wordcount：返回字符串中单词的数目</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Django基础</title>
      <link href="/2019/01/22/django-ji-chu/"/>
      <url>/2019/01/22/django-ji-chu/</url>
      
        <content type="html"><![CDATA[<h2 id="1-虚拟环境"><a href="#1-虚拟环境" class="headerlink" title="1.虚拟环境"></a>1.虚拟环境</h2><h3 id="a-安装-pip-install-virtualenv"><a href="#a-安装-pip-install-virtualenv" class="headerlink" title="a.安装: pip install virtualenv"></a>a.安装: pip install virtualenv</h3><h3 id="b-使用-virtualenv-–no-site-packages-p-D-python3-python-exe-name"><a href="#b-使用-virtualenv-–no-site-packages-p-D-python3-python-exe-name" class="headerlink" title="b. 使用: virtualenv –no-site-packages -p D:\python3\python.exe name"></a>b. 使用: virtualenv –no-site-packages -p D:\python3\python.exe name</h3><p>–no-site-packages: 表示创建的虚拟环境为纯净的环境，不安装有其他的库<br>-p: 表示虚拟环境中的python版本</p><h3 id="c-pip使用"><a href="#c-pip使用" class="headerlink" title="c. pip使用"></a>c. pip使用</h3><p>pip list: 插看安装的库<br>pip install xxx: 安装</p><h3 id="d-激活虚拟环境"><a href="#d-激活虚拟环境" class="headerlink" title="d. 激活虚拟环境"></a>d. 激活虚拟环境</h3><p>Windows: 直接执行activate命令<br>Mac/Linux/Ubuntu: 直接执行source activate命令</p><h3 id="e-退出虚拟环境"><a href="#e-退出虚拟环境" class="headerlink" title="e. 退出虚拟环境"></a>e. 退出虚拟环境</h3><p>Windows/Mac/Linux/Ubuntu: 直接执行deactivate</p><h2 id="2-Django项目"><a href="#2-Django项目" class="headerlink" title="2.Django项目"></a>2.Django项目</h2><h3 id="a-创建项目-django-amdin-startproject-项目名称"><a href="#a-创建项目-django-amdin-startproject-项目名称" class="headerlink" title="a. 创建项目: django-amdin startproject 项目名称"></a>a. 创建项目: django-amdin startproject 项目名称</h3><h3 id="b-创建应用-python-manage-py-startapp-应用名称"><a href="#b-创建应用-python-manage-py-startapp-应用名称" class="headerlink" title="b. 创建应用: python manage.py startapp 应用名称"></a>b. 创建应用: python manage.py startapp 应用名称</h3><h3 id="c-启动"><a href="#c-启动" class="headerlink" title="c. 启动"></a>c. 启动</h3><p>c1. 启动命令: python manage.py runserver。默认IP为127.0.0.1  默认端口为8000<br>c2. 修改启动端口: python manage.py runserver 端口<br>c3. 修改IP和端口: python manage.py runserver IP:端口<br>c4. IP参数: 如果为0.0.0.0表示任何人都可以通过公网IP访问django项目<br>c5. 端口PORT参数: 如果端口设置为80，表示该端口可以不用写</p><h2 id="3-Django模式"><a href="#3-Django模式" class="headerlink" title="3.Django模式"></a>3.Django模式</h2><p>M:<br>模型层: 定义模型和数据库中的表之间的关联关系<br>V:<br>视图层: 定义业务逻辑<br>T :<br>模板: HTML页面</p><h2 id="4-数据库准备工作"><a href="#4-数据库准备工作" class="headerlink" title="4.数据库准备工作"></a>4.数据库准备工作</h2><h3 id="a-settings-py中配置"><a href="#a-settings-py中配置" class="headerlink" title="a. settings.py中配置"></a>a. settings.py中配置</h3><p>USER参数: 访问用户<br>PASSWORD参数: 密码<br>HOST参数: 访问数据库的地址<br>PORT参数: 访问数据库的端口<br>NAME参数: 数据库名<br>‘OPTIONS’:{‘isolation_level’:None}</p><h3 id="b-安装pymysql"><a href="#b-安装pymysql" class="headerlink" title="b. 安装pymysql"></a>b. 安装pymysql</h3><p>b1. 使用pymysql连接数据库: 因为python3没有MySQLdb驱动，无法直接连接MySQL<br>b2. 在工程目录的<strong>init</strong>.py文件中定义  pymysql.install_as_MySQLdb()</p><h3 id="c-迁移"><a href="#c-迁移" class="headerlink" title="c. 迁移"></a>c. 迁移</h3><p>c1. 第一次迁移: python manege.py migrate<br>c2. 之后迁移(除开第一次迁移)<br>生成迁移文件: python manage.py makemigrations<br>执行迁移文件: python manage.py migrate</p><h3 id="d-插入管理员账号"><a href="#d-插入管理员账号" class="headerlink" title="d. 插入管理员账号"></a>d. 插入管理员账号</h3><p>python manage.py createsuperuser</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>centos部署django项目</title>
      <link href="/2019/01/22/centos-bu-shu-django-xiang-mu/"/>
      <url>/2019/01/22/centos-bu-shu-django-xiang-mu/</url>
      
        <content type="html"><![CDATA[<h3 id="1-创建虚拟环境"><a href="#1-创建虚拟环境" class="headerlink" title="1.创建虚拟环境"></a>1.创建虚拟环境</h3><p>指定python版本创建虚拟环境<br>    virtualenv –no-site-packages -p /usr/local/python3/bin/python3 freshenv<br>安装三方库<br>    /home/env/freshenv/bin/pip3 install -r /home/src/fresh_shop/requirement.txt<br>服务器中启动项目<br>    /home/env/freshenv/bin/python3 /home/src/fresh_shop/manage.py runserver 0.0.0.0:80<br>在中间件中需要将’//media//.//‘,’//static//.//‘加入免登陆网页，才能显示图片等文件<br>debug改为False<br>工程文件下的路由下添加以下代码</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token punctuation">,</span> include<span class="token punctuation">,</span> re_path<span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>staticfiles<span class="token punctuation">.</span>urls <span class="token keyword">import</span> static<span class="token keyword">from</span> fresh_shop<span class="token punctuation">.</span>settings <span class="token keyword">import</span> MEDIA_URL<span class="token punctuation">,</span> MEDIA_ROOT<span class="token punctuation">,</span>STATICFILES_DIRS<span class="token keyword">from</span> django<span class="token punctuation">.</span>views<span class="token punctuation">.</span>static <span class="token keyword">import</span> servere_path<span class="token punctuation">(</span>r<span class="token string">'^static/(?P&lt;path>.*)$'</span><span class="token punctuation">,</span> serve<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"document_root"</span><span class="token punctuation">:</span> STATICFILES_DIRS<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>re_path<span class="token punctuation">(</span>r<span class="token string">'^media/(?P&lt;path>.*)$'</span><span class="token punctuation">,</span> serve<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"document_root"</span><span class="token punctuation">:</span> MEDIA_ROOT<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></code></pre><p>查看端口<br>    netstat -lntp<br>使用文件启动django：<br>在src文件下新建一个freshshop.sh文件<br>并在文件中写入<br>    /home/env/freshenv/bin/python3 /home/src/fresh_shop/manage.py runserver 0.0.0.0:80<br>使用命令启动文件启动django<br>    ./freshshop.sh<br>给该文件修改权限<br>    chmod -R 777 freshshop.sh<br>使用nohup启动并在后台运行<br>    nohup ./freshshop.sh &amp;<br>启动并置于后台运行并将自动生成nohup.out文件记录相关访问的信息</p><h3 id="2-使用nginx和uwsgi启动网址"><a href="#2-使用nginx和uwsgi启动网址" class="headerlink" title="2.使用nginx和uwsgi启动网址"></a>2.使用nginx和uwsgi启动网址</h3><h4 id="2-1nginx配置安装"><a href="#2-1nginx配置安装" class="headerlink" title="2.1nginx配置安装"></a>2.1nginx配置安装</h4><p>nginx处理静态文件media/static等功能</p><pre><code>yum install epel-release 添加nginx存储库yum install nginx  安装nginxsystemctl start nginx 运行nginxsystemctl status nginx 查看nginx的状态systemctl enable nginx 系统启动时启动nginx</code></pre><p>查看文件的最后一行并实时进行更新(经常用到开发中用来代替查看情况下的vim)<br>    tail -f 文件名</p><h4 id="2-2uwsgi配置安装"><a href="#2-2uwsgi配置安装" class="headerlink" title="2.2uwsgi配置安装"></a>2.2uwsgi配置安装</h4><p>uwsgi - 处理动态请求，访问首页/登陆/添加购物车等<br>    /home/env/freshenv/bin/pip3 install uwsgi 安装uwsgi服务器<br>在home下的conf文件夹中新建frsshnginx.conf<br>并在里面写入</p><pre><code>server {    # 监听端口      listen    80;      server_name 112.74.61.160;      # 配置请求成功与失败的日志文档      access_log /home/logs/freshaccess.log;      error_log /home/logs/fresherror.log;        # 配置网页访问    location / {       include uwsgi_params;       uwsgi_pass 127.0.0.1:8890;    }    # 配置网页访问时static文件路径    location /static/ {        alias /home/src/fresh_shop/static/;    }# 配置网页访问时media文件路径    location /media/ {        alias /home/src/fresh_shop/media/;    }}</code></pre><p>再新建一个freshuwsgi.ini文件，并再当中写入</p><pre><code>[uwsgi]master = true # 守护进程processes = 4 # 进程个数chdir = /home/src/fresh_shop # 项目地址pythonpath = /home/env/freshenv/bin/python3 # 指定python版本module = fresh_shop.wsgi # 指定uwsgi文件socket = 127.0.0.1:8890 # 和nginx通信地址及端口logto = /home/logs/freshuwsgi.log  # 日志文件地址</code></pre><h4 id="2-3nginx文件配置"><a href="#2-3nginx文件配置" class="headerlink" title="2.3nginx文件配置"></a>2.3nginx文件配置</h4><p>进入etc文件下的nginx下，打开nginx.conf并添加语句</p><pre><code>vim /etc/nginx/nginx.conf 修改nginx配置，include /home/conf/*.conf;</code></pre><p>第37行添加：<br>    include /home/conf/*.conf; #include我们自定义的nginx的文件</p><p>启动nginx：<br>    systemctl start nginx<br>重启nginx：<br>    systemctl restart nginx<br>查看nginx连接状态：<br>    systemctl status nginx</p><p>启动项目：<br>    /home/env/freshenv/bin/uwsgi –ini /home/conf/freshuwsgi.ini</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>字符串方法(总结)</title>
      <link href="/2019/01/22/zi-fu-chuan-fang-fa-zong-jie/"/>
      <url>/2019/01/22/zi-fu-chuan-fang-fa-zong-jie/</url>
      
        <content type="html"><![CDATA[<p>0.len(字符串) - 返回字符串长度（字符的个数）<br>1.字符串.capitalize() - 第一个字母转换大写<br>2.字符串.center(宽度，填充物) - 居中 （ljust-左对齐，rjust-右对齐）<br>3.字符串1.join（字符串2）- 字符串1加入到字符串2每个字符之间<br>4.max（字符串），min（字符串）  - 取最大、最小字符<br>5.字符串.count(字符) - 判断字符在字符串中出现的次数<br>6.字符串.find(字符) - 如果字符在字符串中返回字符，不在返回-1<br>7.字符串.isalnum() - 字符都是字母或数字返回True，否则返回False<br>8.字符串.isalpha() - 字符都是字母返回True<br>9.字符串.isdigit() - 字符都是数字返回True<br>10.字符串.islower() - 至少有一个字母，并且字母都是小写返回True<br>11.字符串.isupper() - 至少有一个字母，并且都是大写返回true<br>12.字符串.isnumeric() - 只包含数字字符返回True<br>13.字符串.isspace() - 只包含空格或者tab空白返回True<br>14.字符串.lower() - 将字符串中的大写字符改为小写<br>15.字符串.upper() - 将字符串中的小写改为大写<br>16.字符串.lstrip() - 截掉字符串最左边空格或者指定字符<br>17.字符串.rstrip() - 只能截掉字符串右边空格<br>18.字符串1.replace(‘字符’,’字符串2’，次数) - 将字符串1中的指定字符替换为字符串2，次数决定替换几次</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/01/22/wan-zhuan-linux-cao-zuo-xi-tong/"/>
      <url>/2019/01/22/wan-zhuan-linux-cao-zuo-xi-tong/</url>
      
        <content type="html"><![CDATA[<h2 id="玩转Linux操作系统"><a href="#玩转Linux操作系统" class="headerlink" title="玩转Linux操作系统"></a>玩转Linux操作系统</h2><h3 id="操作系统发展史"><a href="#操作系统发展史" class="headerlink" title="操作系统发展史"></a>操作系统发展史</h3><p>只有硬件没有软件的计算机系统被称之为“裸机”，我们很难用“裸机”来完成计算机日常的工作（如存储和运算），所以必须用特定的软件来控制硬件的工作。最靠近计算机硬件的软件是系统软件，其中最为重要的就是“操作系统”。“操作系统”是控制和管理整个计算机系统的硬件和软件资源，合理的分配资源和调配任务，为系统用户和其他软件提供接口和环境的程序的集合。</p><h4 id="没有操作系统（手工操作）"><a href="#没有操作系统（手工操作）" class="headerlink" title="没有操作系统（手工操作）"></a>没有操作系统（手工操作）</h4><p>在计算机诞生之初没有操作系统的年代，人们先把程序纸带（或卡片）装上计算机，然后启动输入机把程序和送入计算机，接着通过控制台开关启动程序运行。当程序执行完毕，打印机输出计算的结果，用户卸下并取走纸带（或卡片）。第二个用户上机，重复同样的步骤。在整个过程中用户独占机器，CPU等待手工操作，资源利用率极低。下图是IBM生产的书写Fortran程序的80栏打孔卡，当然这个已经是比较先进的打孔卡了。</p><p><img src="./res/ibm-col80-punched-card.png" alt=""></p><h4 id="批处理系统"><a href="#批处理系统" class="headerlink" title="批处理系统"></a>批处理系统</h4><p>首先启动计算机上的一个监督程序，在监督程序的控制下，计算机能够自动的、成批的处理一个或多个用户的作业。完成一批作业后，监督程度又从输入机读取作业存入磁带机。按照上面的步骤重复处理任务。监督程序不停的处理各个作业，实现了作业的自动转接，减少了作业的建立时间和手工操作时间，提高了计算机资源的利用率。 批处理系统又可以分为单道批处理系统、多道批处理系统、联机批处理系统、脱机批处理系统。</p><h4 id="分时系统和实时系统"><a href="#分时系统和实时系统" class="headerlink" title="分时系统和实时系统"></a>分时系统和实时系统</h4><p>分时系统是把处理器的运行时间分成很短的时间片，按时间片轮流把处理机分配给各联机作业使用。 若某个作业在分配给它的时间片内不能完成其计算，则该作业暂时中断，把处理机让给另一作业使用，等待下一轮调度时再继续其运行。由于计算机速度很快，作业运行轮转得很快，给每个用户的感觉是他独占了一台计算机。而每个用户可以通过自己的终端向系统发出各种操作控制命令，在充分的人机交互情况下，完成作业的运行。为了解决分时系统不能及时响应用户指令的情况，又出现了能够在在严格的时间范围内完成事件处理，及时响应随机外部事件的实时系统。</p><h4 id="通用操作系统"><a href="#通用操作系统" class="headerlink" title="通用操作系统"></a>通用操作系统</h4><ol><li><p>1960s：IBM的System/360系列的机器有了统一的操作系统OS/360。</p></li><li><p>1965年：AT&amp;T的贝尔实验室加入GE和MIT的合作计划开始开发MULTICS。</p></li><li><p>1969年：Ken Tompson为了玩“Space Travel”游戏用汇编语言在PDP-7上开发了Unics。</p><p><img src="./res/pdp-7.png" alt=""></p></li><li><p>1970年~1971年：Ken Tompson和Dennis Ritchie用B语言在PDP-11上重写了Unics，并在Brian Kernighan的建议下将其更名为Unix。</p><p><img src="./res/ken-and-dennis-pdp-11.png" alt=""></p></li><li><p>1972年~1973年：Dennis Ritchie发明了C语言来取代可移植性较差的B语言，并开启了用C语言重写Unix的工作。</p></li><li><p>1974年：Unix推出了里程碑意义的第5版，几乎完全用C语言来实现。</p></li><li><p>1979年：从Unix第7版开始，AT&amp;T发布新的使用条款，将Unix私有化。</p></li><li><p>1987年：Andrew S. Tanenbaum教授为了能在课堂上教授学生操作系统运作的细节，决定在不使用任何AT&amp;T的源代码前提下，自行开发与Unix兼容的操作系统，以避免版权上的争议并将其命名为Minix。</p></li><li><p>1991年：Linus Torvalds就读于芬兰赫尔辛基大学期间，尝试在Minix上做一些开发工作，但因为Minix只是作为教学用途的功能并不强，为了方便在学校的主机的新闻组和邮件系统中读写和下载文件，Linus编写了磁盘驱动程序和文件系统，这些成为了Linux系统内核的雏形。</p><p><img src="./res/Ken-Thompson.png" alt="">Ken L. Thompson (ken)</p><p><img src="./res/dennis-ritchie.png" alt="">Dennis M. Ritchie (DMR)</p><p><img src="./res/andrew-tanenbaum.png" alt="">Andrew S. Tanenbaum (ast)</p><p><img src="./res/linus-torvalds.png" alt="">Linus B. Torvalds</p></li></ol><p>下图是Unix操作系统家族的图谱。</p><p><img src="./res/history-of-unix.png" alt=""></p><h3 id="Linux概述"><a href="#Linux概述" class="headerlink" title="Linux概述"></a>Linux概述</h3><p>Linux是一个通用操作系统。一个操作系统要负责任务调度、内存分配、处理外围设备I/O等操作。操作系统通常由内核（运行其他程序，管理像磁盘、打印机等硬件设备的核心程序）和系统程序（设备驱动、底层库、shell、服务程序等）两部分组成。</p><p>Linux内核是芬兰人Linus Torvalds开发的，于1991年9月发布。而Linux操作系统作为Internet时代的产物，它是由全世界许多开发者共同合作开发的，是一个自由的操作系统（注意自由和免费并不是同一个概念，想了解二者的差别可以<a href="https://www.debian.org/intro/free" target="_blank" rel="noopener">点击这里</a>）。</p><h3 id="Linux系统优点"><a href="#Linux系统优点" class="headerlink" title="Linux系统优点"></a>Linux系统优点</h3><ol><li>通用操作系统，不跟特定的硬件绑定。</li><li>用C语言编写，有可移植性，有内核编程接口。</li><li>支持多用户和多任务，支持安全的分层文件系统。</li><li>大量的实用程序，完善的网络功能以及强大的支持文档。</li><li>可靠的安全性和良好的稳定性，对开发者更友好。</li></ol><h3 id="Linux系统发行版本"><a href="#Linux系统发行版本" class="headerlink" title="Linux系统发行版本"></a>Linux系统发行版本</h3><ol><li><a href="https://www.redhat.com/en" target="_blank" rel="noopener">Redhat</a></li><li><a href="https://www.ubuntu.com/" target="_blank" rel="noopener">Ubuntu</a></li><li><a href="https://www.centos.org/" target="_blank" rel="noopener">CentOS</a></li><li><a href="https://getfedora.org/" target="_blank" rel="noopener">Fedora</a></li><li><a href="https://www.debian.org/" target="_blank" rel="noopener">Debian</a></li><li><a href="https://www.opensuse.org/" target="_blank" rel="noopener">openSUSE</a></li></ol><h3 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h3><p>Linux系统的命令通常都是如下所示的格式：</p><pre class=" language-Shell"><code class="language-Shell">命令名称 [命名参数] [命令对象]</code></pre><ol><li><p>获取登录信息 - <strong>w</strong> / <strong>who</strong> / <strong>last</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root@izwz97tbgo9lkabnat2lo8z ~]# w 23:31:16 up 12:16,  2 users,  load average: 0.00, 0.01, 0.05USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHATroot     pts/0    182.139.66.250   23:03    4.00s  0.02s  0.00s wjackfrue pts/1    182.139.66.250   23:26    3:56   0.00s  0.00s -bash[root@izwz97tbgo9lkabnat2lo8z ~]# whoroot     pts/0        2018-04-12 23:03 (182.139.66.250)jackfrued pts/1        2018-04-12 23:26 (182.139.66.250)[root@izwz97tbgo9lkabnat2lo8z ~]# who am iroot     pts/0        2018-04-12 23:03 (182.139.66.250)</code></pre></li><li><p>查看自己使用的Shell - <strong>ps</strong>。</p><p>Shell也被称为“壳”，它是用户与内核交流的翻译官，简单的说就是人与计算机交互的接口。目前很多Linux系统默认的Shell都是bash（<u>B</u>ourne <u>A</u>gain <u>SH</u>ell），因为它可以使用Tab键进行命令补全、可以保存历史命令、可以方便的配置环境变量以及执行批处理操作等。</p><pre class=" language-Shell"><code class="language-Shell">[root@izwz97tbgo9lkabnat2lo8z ~]# ps  PID TTY          TIME CMD 3531 pts/0    00:00:00 bash 3553 pts/0    00:00:00 ps</code></pre></li><li><p>查看命令的说明 - <strong>whatis</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root@izwz97tbgo9lkabnat2lo8z ~]# whatis psps (1)        - report a snapshot of the current processes.[root@izwz97tbgo9lkabnat2lo8z ~]# whatis pythonpython (1)    - an interpreted, interactive, object-oriented programming language</code></pre></li><li><p>查看命令的位置 - <strong>which</strong> / <strong>whereis</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root@izwz97tbgo9lkabnat2lo8z ~]# whereis psps: /usr/bin/ps /usr/share/man/man1/ps.1.gz[root@izwz97tbgo9lkabnat2lo8z ~]# whereis pythonpython: /usr/bin/python /usr/bin/python2.7 /usr/lib/python2.7 /usr/lib64/python2.7 /etc/python /usr/include/python2.7 /usr/share/man/man1/python.1.gz[root@izwz97tbgo9lkabnat2lo8z ~]# which ps/usr/bin/ps[root@izwz97tbgo9lkabnat2lo8z ~]# which python/usr/bin/python</code></pre></li><li><p>查看帮助文档 - <strong>man</strong> / <strong>info</strong> / <strong>apropos</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root@izwz97tbgo9lkabnat2lo8z ~]# ps --helpUsage: ps [options] Try 'ps --help <simple|list|output|threads|misc|all>'  or 'ps --help <s|l|o|t|m|a>' for additional help text.For more details see ps(1).[root@izwz97tbgo9lkabnat2lo8z ~]# man psPS(1)                                User Commands                                PS(1)NAME       ps - report a snapshot of the current processes.SYNOPSIS       ps [options]DESCRIPTION...[root@izwz97tbgo9lkabnat2lo8z ~]# info ps...</code></pre></li><li><p>切换用户 - <strong>su</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root@izwz97tbgo9lkabnat2lo8z ~]# su hellokitty[hellokitty@izwz97tbgo9lkabnat2lo8z root]$</code></pre></li><li><p>以管理员身份执行命令 - <strong>sudo</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[jackfrued@izwz97tbgo9lkabnat2lo8z ~]$ ls /rootls: cannot open directory /root: Permission denied[jackfrued@izwz97tbgo9lkabnat2lo8z ~]$ sudo ls /root[sudo] password for jackfrued:calendar.py  code  error.txt  hehe  hello.c  index.html  myconf  result.txt</code></pre><blockquote><p><strong>说明</strong>：如果希望用户能够以管理员身份执行命令，用户必须被添加到sudoers名单中，该文件在 <code>/etc</code>目录下。</p></blockquote></li><li><p>登入登出相关 - <strong>logout</strong> / <strong>exit</strong> / <strong>adduser</strong> / <strong>userdel</strong> / <strong>passwd</strong> / <strong>ssh</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root@izwz97tbgo9lkabnat2lo8z ~]# adduser hellokitty[root@izwz97tbgo9lkabnat2lo8z ~]# passwd hellokittyChanging password for user jackfrued.New password:Retype new password:passwd: all authentication tokens updated successfully.[root@izwz97tbgo9lkabnat2lo8z ~]# ssh hellokitty@1.2.3.4hellokitty@1.2.3.4's password:Last login: Thu Apr 12 23:05:32 2018 from 10.12.14.16[hellokitty@izwz97tbgo9lkabnat2lo8z ~]$ logoutConnection to 1.2.3.4 closed.[root@izwz97tbgo9lkabnat2lo8z ~]#</code></pre></li><li><p>查看系统和主机名 - <strong>uname</strong> / <strong>hostname</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root@izwz97tbgo9lkabnat2lo8z ~]# unameLinux[root@izwz97tbgo9lkabnat2lo8z ~]# hostnameizwz97tbgo9lkabnat2lo8z[root@iZwz97tbgo9lkabnat2lo8Z ~]# cat /etc/centos-releaseCentOS Linux release 7.4.1708 (Core) </code></pre></li><li><p>重启和关机 - <strong>reboot</strong> / <strong>init 6</strong> / <strong>shutdown</strong> / <strong>init 0</strong>。</p></li><li><p>查看历史命令 - <strong>history</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# history...452  ls453  cd Python-3.6.5/454  clear455  history[root@iZwz97tbgo9lkabnat2lo8Z ~]# !454</code></pre><blockquote><p>说明：查看到历史命令之后，可以用<code>!历史命令编号</code>来重新执行该命令；通过<code>history -c</code>可以清除历史命令。</p></blockquote></li></ol><h3 id="实用程序"><a href="#实用程序" class="headerlink" title="实用程序"></a>实用程序</h3><h4 id="文件和文件夹操作"><a href="#文件和文件夹操作" class="headerlink" title="文件和文件夹操作"></a>文件和文件夹操作</h4><ol><li><p>创建/删除目录 - <strong>mkdir</strong> / <strong>rmdir</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# mkdir abc[root@iZwz97tbgo9lkabnat2lo8Z ~]# mkdir -p xyz/abc[root@iZwz97tbgo9lkabnat2lo8Z ~]# rmdir abc</code></pre></li><li><p>创建/删除文件 - <strong>touch</strong> / <strong>rm</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# touch readme.txt[root@iZwz97tbgo9lkabnat2lo8Z ~]# touch error.txt[root@iZwz97tbgo9lkabnat2lo8Z ~]# rm error.txtrm: remove regular empty file ‘error.txt’? y[root@iZwz97tbgo9lkabnat2lo8Z ~]# rm -rf xyz</code></pre><ul><li>touch命令用于创建空白文件或修改文件时间。在Linux系统中一个文件有三种时间：<ul><li>更改内容的时间 - mtime。</li><li>更改权限的时间 - ctime。</li><li>最后访问时间 - atime。</li></ul></li><li>rm的几个重要参数：<ul><li>-i：交互式删除，每个删除项都会进行询问。</li><li>-r：删除目录并递归的删除目录中的文件和目录。</li><li>-f：强制删除，忽略不存在的文件，没有任何提示。</li></ul></li></ul></li><li><p>切换和查看当前工作目录 - <strong>cd</strong> / <strong>pwd</strong>。</p><blockquote><p>说明：<code>cd</code>命令后面可以跟相对路径（以当前路径作为参照）或绝对路径（以<code>/</code>开头）来切换到指定的目录，也可以用<code>cd ..</code>来返回上一级目录。</p></blockquote></li><li><p>查看目录内容 - <strong>ls</strong>。</p><ul><li>-l：以长格式查看文件和目录。</li><li>-a：显示以点开头的文件和目录（隐藏文件）。</li><li>-R：遇到目录要进行递归展开（继续列出目录下面的文件和目录）。</li><li>-d：只列出目录，不列出其他内容。</li><li>-S/-t：按大小/时间排序。</li></ul></li><li><p>查看文件内容 - <strong>cat</strong> / <strong>head</strong> / <strong>tail</strong> / <strong>more</strong> / <strong>less</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# wget http://www.sohu.com/ -O sohu.html--2018-06-20 18:42:34--  http://www.sohu.com/Resolving www.sohu.com (www.sohu.com)... 14.18.240.6Connecting to www.sohu.com (www.sohu.com)|14.18.240.6|:80... connected.HTTP request sent, awaiting response... 200 OKLength: 212527 (208K) [text/html]Saving to: ‘sohu.html’100%[==================================================>] 212,527     --.-K/s   in 0.03s2018-06-20 18:42:34 (7.48 MB/s) - ‘sohu.html’ saved [212527/212527][root@iZwz97tbgo9lkabnat2lo8Z ~]# cat sohu.html...[root@iZwz97tbgo9lkabnat2lo8Z ~]# head -10 sohu.html<!DOCTYPE html><html><head><title>搜狐</title><meta name="Keywords" content="搜狐,门户网站,新媒体,网络媒体,新闻,财经,体育,娱乐,时尚,汽车,房产,科技,图片,论坛,微博,博客,视频,电影,电视剧"/><meta name="Description" content="搜狐网为用户提供24小时不间断的最新资讯，及搜索、邮件等网络服务。内容包括全球热点事件、突发新闻、时事评论、热播影视剧、体育赛事、行业动态、生活服务信息，以及论坛、博客、微博、我的搜狐等互动空间。" /><meta name="shenma-site-verification" content="1237e4d02a3d8d73e96cbd97b699e9c3_1504254750"><meta charset="utf-8"/><meta http-equiv="X-UA-Compatible" content="IE=Edge,chrome=1"/>[root@iZwz97tbgo9lkabnat2lo8Z ~]# tail -2 sohu.html</body></html>[root@iZwz97tbgo9lkabnat2lo8Z ~]# less sohu.html...[root@iZwz97tbgo9lkabnat2lo8Z ~]# cat -n sohu.html | more...</code></pre></li><li><p>拷贝/移动文件 - <strong>cp</strong> / <strong>mv</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# mkdir backup[root@iZwz97tbgo9lkabnat2lo8Z ~]# cp sohu.html backup/[root@iZwz97tbgo9lkabnat2lo8Z ~]# cd backup[root@iZwz97tbgo9lkabnat2lo8Z backup]# lssohu.html[root@iZwz97tbgo9lkabnat2lo8Z backup]# mv sohu.html sohu_index.html[root@iZwz97tbgo9lkabnat2lo8Z backup]# lssohu_index.html</code></pre></li><li><p>查找文件和查找内容 - <strong>find</strong> / <strong>grep</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# find / -name "*.html"/root/sohu.html/root/backup/sohu_index.html[root@izwz97tbgo9lkabnat2lo8z ~]# find . -atime 7 -type f -print[root@izwz97tbgo9lkabnat2lo8z ~]# find . -type f -size +2k[root@izwz97tbgo9lkabnat2lo8z ~]# find . -type f -name "*.swp" -delete[root@iZwz97tbgo9lkabnat2lo8Z ~]# grep "<script>" sohu.html -n20:<script>[root@iZwz97tbgo9lkabnat2lo8Z ~]# grep -E \<\/?script.*\> sohu.html -n20:<script>22:</script>24:<script src="//statics.itc.cn/web/v3/static/js/es5-shim-08e41cfc3e.min.js"></script>25:<script src="//statics.itc.cn/web/v3/static/js/es5-sham-1d5fa1124b.min.js"></script>26:<script src="//statics.itc.cn/web/v3/static/js/html5shiv-21fc8c2ba6.js"></script>29:<script type="text/javascript">52:</script>...</code></pre><blockquote><p>说明：<code>grep</code>在搜索字符串时可以使用正则表达式，如果需要使用正则表达式可以用<code>grep -E</code>或者直接使用<code>egrep</code>。</p></blockquote></li><li><p>链接 - <strong>ln</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# ls -l sohu.html-rw-r--r-- 1 root root 212131 Jun 20 19:15 sohu.html[root@iZwz97tbgo9lkabnat2lo8Z ~]# ln /root/sohu.html /root/backup/sohu_backup[root@iZwz97tbgo9lkabnat2lo8Z ~]# ls -l sohu.html-rw-r--r-- 2 root root 212131 Jun 20 19:15 sohu.html[root@iZwz97tbgo9lkabnat2lo8Z ~]# ln /root/sohu.html /root/backup/sohu_backup2[root@iZwz97tbgo9lkabnat2lo8Z ~]# ls -l sohu.html-rw-r--r-- 3 root root 212131 Jun 20 19:15 sohu.html[root@iZwz97tbgo9lkabnat2lo8Z ~]# ln -s /etc/centos-release sysinfo[root@iZwz97tbgo9lkabnat2lo8Z ~]# ls -l sysinfolrwxrwxrwx 1 root root 19 Jun 20 19:21 sysinfo -> /etc/centos-release[root@iZwz97tbgo9lkabnat2lo8Z ~]# cat sysinfoCentOS Linux release 7.4.1708 (Core)[root@iZwz97tbgo9lkabnat2lo8Z ~]# cat /etc/centos-releaseCentOS Linux release 7.4.1708 (Core)</code></pre><blockquote><p>说明：链接可以分为硬链接和软链接（符号链接）。硬链接可以认为是一个指向文件数据的指针，就像Python中对象的引用计数，每添加一个硬链接，文件的对应链接数就增加1，只有当文件的链接数为0时，文件所对应的存储空间才有可能被其他文件覆盖。我们平常删除文件时其实并没有删除硬盘上的数据，我们删除的只是一个指针，或者说是数据的一条使用记录，所以类似于“文件粉碎机”之类的软件在“粉碎”文件时除了删除文件指针，还会在文件对应的存储区域填入数据来保证文件无法再恢复。软链接类似于Windows系统下的快捷方式，当软链接链接的文件被删除时，软链接也就失效了。</p></blockquote></li><li><p>压缩/解压缩和归档/解归档 - <strong>gzip</strong> / <strong>gunzip</strong> / <strong>xz</strong> / <strong>tar</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# wget http://download.redis.io/releases/redis-4.0.10.tar.gz--2018-06-20 19:29:59--  http://download.redis.io/releases/redis-4.0.10.tar.gzResolving download.redis.io (download.redis.io)... 109.74.203.151Connecting to download.redis.io (download.redis.io)|109.74.203.151|:80... connected.HTTP request sent, awaiting response... 200 OKLength: 1738465 (1.7M) [application/x-gzip]Saving to: ‘redis-4.0.10.tar.gz’100%[==================================================>] 1,738,465   70.1KB/s   in 74s2018-06-20 19:31:14 (22.9 KB/s) - ‘redis-4.0.10.tar.gz’ saved [1738465/1738465][root@iZwz97tbgo9lkabnat2lo8Z ~]# ls redis*redis-4.0.10.tar.gz[root@iZwz97tbgo9lkabnat2lo8Z ~]# gunzip redis-4.0.10.tar.gz[root@iZwz97tbgo9lkabnat2lo8Z ~]# ls redis*redis-4.0.10.tar[root@iZwz97tbgo9lkabnat2lo8Z ~]# tar -xvf redis-4.0.10.tarredis-4.0.10/redis-4.0.10/.gitignoreredis-4.0.10/00-RELEASENOTESredis-4.0.10/BUGSredis-4.0.10/CONTRIBUTINGredis-4.0.10/COPYINGredis-4.0.10/INSTALLredis-4.0.10/MANIFESTOredis-4.0.10/Makefileredis-4.0.10/README.mdredis-4.0.10/deps/redis-4.0.10/deps/Makefileredis-4.0.10/deps/README.md...[root@iZwz97tbgo9lkabnat2lo8Z ~]# ls redis*redis-4.0.10.tarredis-4.0.10:00-RELEASENOTES  COPYING  Makefile   redis.conf       runtest-sentinel  testsBUGS             deps     MANIFESTO  runtest          sentinel.conf     utilsCONTRIBUTING     INSTALL  README.md  runtest-cluster  src</code></pre></li><li><p>其他工具 - <strong>sort</strong> / <strong>uniq</strong> / <strong>diff</strong> / <strong>tr</strong> / <strong>cut</strong> / <strong>paste</strong> / <strong>file</strong> / <strong>wc</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# cat foo.txtgrapeapplepitaya[root@iZwz97tbgo9lkabnat2lo8Z ~]# cat bar.txt100200300400[root@iZwz97tbgo9lkabnat2lo8Z ~]# paste foo.txt bar.txtgrape   100apple   200pitaya  300      400[root@iZwz97tbgo9lkabnat2lo8Z ~]# paste foo.txt bar.txt > hello.txt[root@iZwz97tbgo9lkabnat2lo8Z ~]# cut -b 4-8 hello.txtpe      10le      20aya     30[root@iZwz97tbgo9lkabnat2lo8Z ~]# cat hello.txt | tr '\t' ','grape,100apple,200pitaya,300,400[root@iZwz97tbgo9lkabnat2lo8Z ~]# wget https://www.baidu.com/img/bd_logo1.png--2018-06-20 18:46:53--  https://www.baidu.com/img/bd_logo1.pngResolving www.baidu.com (www.baidu.com)... 220.181.111.188, 220.181.112.244Connecting to www.baidu.com (www.baidu.com)|220.181.111.188|:443... connected.HTTP request sent, awaiting response... 200 OKLength: 7877 (7.7K) [image/png]Saving to: ‘bd_logo1.png’100%[==================================================>] 7,877       --.-K/s   in 0s2018-06-20 18:46:53 (118 MB/s) - ‘bd_logo1.png’ saved [7877/7877][root@iZwz97tbgo9lkabnat2lo8Z ~]# file bd_logo1.pngbd_logo1.png: PNG image data, 540 x 258, 8-bit colormap, non-interlaced[root@iZwz97tbgo9lkabnat2lo8Z ~]# wc sohu.html2979   6355 212527 sohu.html[root@iZwz97tbgo9lkabnat2lo8Z ~]# wc -l sohu.html2979 sohu.html</code></pre></li></ol><h4 id="管道和重定向"><a href="#管道和重定向" class="headerlink" title="管道和重定向"></a>管道和重定向</h4><ol><li><p>管道的使用 - <strong>|</strong>。</p><p>例子：查找当前目录下文件个数。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# find ./ | wc -l6152</code></pre><p>例子：列出当前路径下的文件和文件夹，给每一项加一个编号。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# ls | cat -n     1  dump.rdb     2  mongodb-3.6.5     3  Python-3.6.5     4  redis-3.2.11     5  redis.conf</code></pre><p>例子：查找record.log中包含AAA，但不包含BBB的记录的总数</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# cat record.log | grep AAA | grep -v BBB | wc -l</code></pre></li><li><p>输出重定向和错误重定向 - <strong>></strong> / <strong>&gt;&gt;</strong> / <strong>2></strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# cat readme.txtbananaapplegrapeapplegrapewatermelonpearpitaya[root@iZwz97tbgo9lkabnat2lo8Z ~]# cat readme.txt | sort | uniq > result.txt[root@iZwz97tbgo9lkabnat2lo8Z ~]# cat result.txtapplebananagrapepearpitayawatermelon</code></pre></li><li><p>输入重定向 - <strong>\&lt;</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# echo 'hello, world!' > hello.txt[root@iZwz97tbgo9lkabnat2lo8Z ~]# wall < hello.txt[root@iZwz97tbgo9lkabnat2lo8Z ~]#Broadcast message from root@iZwz97tbgo9lkabnat2lo8Z (Wed Jun 20 19:43:05 2018):hello, world![root@iZwz97tbgo9lkabnat2lo8Z ~]# echo 'I will show you some code.' >> hello.txt[root@iZwz97tbgo9lkabnat2lo8Z ~]# wall < hello.txt[root@iZwz97tbgo9lkabnat2lo8Z ~]#Broadcast message from root@iZwz97tbgo9lkabnat2lo8Z (Wed Jun 20 19:43:55 2018):hello, world!I will show you some code.</code></pre></li></ol><h4 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h4><ol><li><p><strong>alias</strong></p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# alias ll='ls -l'[root@iZwz97tbgo9lkabnat2lo8Z ~]# alias frm='rm -rf'[root@iZwz97tbgo9lkabnat2lo8Z ~]# ll...drwxr-xr-x  2 root       root   4096 Jun 20 12:52 abc...[root@iZwz97tbgo9lkabnat2lo8Z ~]# frm abc</code></pre></li><li><p><strong>unalias</strong></p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# unalias frm[root@iZwz97tbgo9lkabnat2lo8Z ~]# frm sohu.html-bash: frm: command not found</code></pre></li></ol><h4 id="其他程序"><a href="#其他程序" class="headerlink" title="其他程序"></a>其他程序</h4><ol><li><p>时间和日期 - <strong>date</strong> / <strong>cal</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# dateWed Jun 20 12:53:19 CST 2018[root@iZwz97tbgo9lkabnat2lo8Z ~]# cal      June 2018Su Mo Tu We Th Fr Sa                1  2 3  4  5  6  7  8  910 11 12 13 14 15 1617 18 19 20 21 22 2324 25 26 27 28 29 30[root@iZwz97tbgo9lkabnat2lo8Z ~]# cal 5 2017      May 2017Su Mo Tu We Th Fr Sa    1  2  3  4  5  6 7  8  9 10 11 12 1314 15 16 17 18 19 2021 22 23 24 25 26 2728 29 30 31</code></pre></li><li><p>录制操作脚本 - <strong>script</strong>。</p></li><li><p>给用户发送消息 - <strong>mesg</strong> / <strong>write</strong> / <strong>wall</strong> / <strong>mail</strong>。</p></li></ol><h3 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h3><h4 id="文件和路径"><a href="#文件和路径" class="headerlink" title="文件和路径"></a>文件和路径</h4><ol><li>命名规则：文件名的最大长度与文件系统类型有关，一般情况下，文件名不应该超过255个字符，虽然绝大多数的字符都可以用于文件名，但是最好使用英文大小写字母、数字、下划线、点这样的符号。文件名中虽然可以使用空格，但应该尽可能避免使用空格，否则在输入文件名时需要用将文件名放在双引号中或者通过<code>\</code>对空格进行转义。</li><li>扩展名：在Linux系统下文件的扩展名是可选的，但是使用扩展名有助于对文件内容的理解。有些应用程序要通过扩展名来识别文件，但是更多的应用程序并不依赖文件的扩展名，就像<code>file</code>命令在识别文件时并不是依据扩展名来判定文件的类型。</li><li>隐藏文件：以点开头的文件在Linux系统中是隐藏文件（不可见文件）。</li></ol><h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><ol><li>/bin - 基本命令的二进制文件。</li><li>/boot - 引导加载程序的静态文件。</li><li>/dev - 设备文件。</li><li><strong>/etc</strong> - 配置文件。</li><li>/home - 普通用户主目录的父目录。</li><li>/lib - 共享库文件。</li><li>/lib64 - 共享64位库文件。</li><li>/lost+found - 存放未链接文件。</li><li>/media - 自动识别设备的挂载目录。</li><li>/mnt - 临时挂载文件系统的挂载点。</li><li>/opt - 可选插件软件包安装位置。</li><li>/proc -  内核和进程信息。</li><li><strong>/root</strong> - 超级管理员用户主目录。</li><li>/run - 存放系统运行时需要的东西。</li><li>/sbin - 超级用户的二进制文件。</li><li>/sys - 设备的伪文件系统。</li><li>/tmp - 临时文件夹。</li><li><strong>/usr</strong> - 用户应用目录。</li><li>/var - 变量数据目录。</li></ol><h4 id="访问权限"><a href="#访问权限" class="headerlink" title="访问权限"></a>访问权限</h4><ol><li><p><strong>chmod</strong> - 改变文件模式比特。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# ls -l...-rw-r--r--  1 root       root 211878 Jun 19 16:06 sohu.html...[root@iZwz97tbgo9lkabnat2lo8Z ~]# chmod g+w,o+w sohu.html[root@iZwz97tbgo9lkabnat2lo8Z ~]# ls -l...-rw-rw-rw-  1 root       root 211878 Jun 19 16:06 sohu.html...[root@iZwz97tbgo9lkabnat2lo8Z ~]# chmod 644 sohu.html[root@iZwz97tbgo9lkabnat2lo8Z ~]# ls -l...-rw-r--r--  1 root       root 211878 Jun 19 16:06 sohu.html...</code></pre><blockquote><p>说明：通过上面的例子可以看出，用<code>chmod</code>改变文件模式比特有两种方式：一种是字符设定法，另一种是数字设定法。除了<code>chmod</code>之外，可以通过<code>umask</code>来设定哪些权限将在新文件的默认权限中被删除。</p></blockquote><p>长格式查看目录或文件时显示结果及其对应权限的数值如下表所示。</p><p><img src="./res/file-mode.png" alt=""></p></li><li><p><strong>chown</strong> - 改变文件所有者。</p><pre class=" language-Shell"><code class="language-Shell"> [root@iZwz97tbgo9lkabnat2lo8Z ~]# ls -l ... -rw-r--r--  1 root root     54 Jun 20 10:06 readme.txt ... [root@iZwz97tbgo9lkabnat2lo8Z ~]# chown hellokitty readme.txt [root@iZwz97tbgo9lkabnat2lo8Z ~]# ls -l ... -rw-r--r--  1 hellokitty root     54 Jun 20 10:06 readme.txt ...</code></pre></li></ol><h4 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h4><ol><li><p>列出文件系统的磁盘使用状况 - <strong>df</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# df -hFilesystem      Size  Used Avail Use% Mounted on/dev/vda1        40G  5.0G   33G  14% /devtmpfs        486M     0  486M   0% /devtmpfs           497M     0  497M   0% /dev/shmtmpfs           497M  356K  496M   1% /runtmpfs           497M     0  497M   0% /sys/fs/cgrouptmpfs           100M     0  100M   0% /run/user/0</code></pre></li><li><p>磁盘分区表操作 - <strong>fdisk</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# fdisk -lDisk /dev/vda: 42.9 GB, 42949672960 bytes, 83886080 sectorsUnits = sectors of 1 * 512 = 512 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytesDisk label type: dosDisk identifier: 0x000a42f4   Device Boot      Start         End      Blocks   Id  System/dev/vda1   *        2048    83884031    41940992   83  LinuxDisk /dev/vdb: 21.5 GB, 21474836480 bytes, 41943040 sectorsUnits = sectors of 1 * 512 = 512 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytes</code></pre></li><li><p>格式化文件系统 - <strong>mkfs</strong>。</p></li><li><p>文件系统检查 - <strong>fsck</strong>。</p></li><li><p>挂载/卸载 - <strong>mount</strong> / <strong>umount</strong>。</p></li></ol><h3 id="编辑器-vim"><a href="#编辑器-vim" class="headerlink" title="编辑器 - vim"></a>编辑器 - vim</h3><ol><li><p>启动vim。可以通过<code>vi</code>或<code>vim</code>命令来启动vim，启动时可以指定文件名来打开一个文件，如果没有指定文件名，也可以在保存的时候指定文件名。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# vim guess.py</code></pre></li><li><p>命令模式、编辑模式和末行模式：启动vim进入的是命令模式（也称为Normal模式），在命令模式下输入英文字母<code>i</code>会进入编辑模式（Insert模式），屏幕下方出现<code>-- INSERT --</code>提示；在编辑模式下按下<code>Esc</code>会回到命令模式，此时如果输入英文<code>:</code>会进入末行模式，在末行模式下输入<code>q!</code>可以在不保存当前工作的情况下强行退出vim；在命令模式下输入<code>v</code>会进入可视模式（Visual模式），可以用光标选择一个区域再完成对应的操作。</p></li><li><p>保存和退出vim：在命令模式下输入<code>:</code> 进入末行模式，输入<code>wq</code>可以实现保存退出；如果想放弃编辑的内容输入<code>q!</code>强行退出，这一点刚才已经提到过了；在命令模式下也可以直接输入<code>ZZ</code>实现保存退出。如果只想保存文件不退出，那么可以在末行模式下输入<code>w</code>；可以在<code>w</code>后面输入空格再指定要保存的文件名。</p></li><li><p>光标操作。</p><ul><li>在命令模式下可以通过<code>h</code>、<code>j</code>、<code>k</code>、<code>l</code>来控制光标向左、下、上、右的方向移动，可以在字母前输入数字来表示移动的距离，例如：<code>10h</code>表示向左移动10个字符。</li><li>在命令模式下可以通过<code>Ctrl+y</code>和<code>Ctrl+e</code>来实现向上、向下滚动一行文本的操作，可以通过<code>Ctrl+f</code>和<code>Ctrl+b</code>来实现向前和向后翻页的操作。</li><li>在命令模式下可以通过输入英文字母<code>G</code>将光标移到文件的末尾，可以通过<code>gg</code>将光标移到文件的开始，也可以通过在<code>G</code>前输入数字来将光标移动到指定的行。</li></ul></li><li><p>文本操作。</p><ul><li>删除：在命令模式下可以用<code>dd</code>来删除整行；可以在<code>dd</code>前加数字来指定删除的行数；可以用<code>d$</code>来实现删除从光标处删到行尾的操作，也可以通过<code>d0</code>来实现从光标处删到行首的操作；如果想删除一个单词，可以使用<code>dw</code>；如果要删除全文，可以在输入<code>:%d</code>（其中<code>:</code>用来从命令模式进入末行模式）。</li><li>复制和粘贴：在命令模式下可以用<code>yy</code>来复制整行；可以在<code>yy</code>前加数字来指定复制的行数；可以通过<code>p</code>将复制的内容粘贴到光标所在的地方。</li><li>撤销和恢复：在命令模式下输入<code>u</code>可以撤销之前的操作；通过<code>Ctrl+r</code>可以恢复被撤销的操作。</li><li>对内容进行排序：在命令模式下输入<code>%!sort</code>。</li></ul></li><li><p>查找和替换。</p><ul><li>查找操作需要输入<code>/</code>进入末行模式并提供正则表达式来匹配与之对应的内容，例如：<code>/doc.*\.</code>，输入<code>n</code>来向前搜索，也可以输入<code>N</code>来向后搜索。</li><li>替换操作需要输入<code>:</code>进入末行模式并指定搜索的范围、正则表达式以及替换后的内容和匹配选项，例如：<code>:1,$s/doc.*/hello/gice</code>，其中：<ul><li><code>g</code> - global：全局匹配。</li><li><code>i</code> - ignore case：忽略大小写匹配。</li><li><code>c</code> - confirm：替换时需要确认。</li><li><code>e</code> - error：忽略错误。</li></ul></li></ul></li><li><p>参数设定：在输入<code>:</code>进入末行模式后可以对vim进行设定。</p><ul><li><p>设置Tab键的空格数：<code>set ts=4</code></p></li><li><p>设置显示/不显示行号：<code>set nu</code> / <code>set nonu</code></p></li><li><p>设置启用/关闭高亮语法：<code>syntax on</code> / <code>syntax off</code></p></li><li><p>设置显示标尺（光标所在的行和列）： <code>set ruler</code></p></li><li><p>设置启用/关闭搜索结果高亮：<code>set hls</code> / <code>set nohls</code></p><blockquote><p>说明：如果希望上面的这些设定在每次启动vim时都能生效，需要将这些设定写到用户主目录下的.vimrc文件中。</p></blockquote></li></ul></li><li><p>高级技巧</p><ul><li><p>比较多个文件。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# vim -d foo.txt bar.txt</code></pre><p><img src="./res/vim-diff.png" alt=""></p></li><li><p>打开多个文件。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# vim foo.txt bar.txt hello.txt</code></pre><p>启动vim后只有一个窗口显示的是foo.txt，可以在末行模式中输入<code>ls</code>查看到打开的三个文件，也可以在末行模式中输入<code>b &lt;num&gt;</code>来显示另一个文件，例如可以用<code>:b 2</code>将bar.txt显示出来，可以用<code>:b 3</code>将hello.txt显示出来。</p></li><li><p>拆分和切换窗口。</p><p>可以在末行模式中输入<code>sp</code>或<code>vs</code>来实现对窗口的水平或垂直拆分，这样我们就可以同时打开多个编辑窗口，通过按两次<code>Ctrl+w</code>就可以实现编辑窗口的切换，在一个窗口中执行退出操作只会关闭对应的窗口，其他的窗口继续保留。</p><p><img src="./res/vim-multi-window.png" alt=""></p></li><li><p>映射快捷键：在vim下可以将一些常用操作映射为快捷键来提升工作效率。</p><ul><li><p>例子1：在命令模式下输入<code>F4</code>执行从第一行开始删除10000行代码的操作。</p><p><code>:map &lt;F4&gt; gg10000dd</code>。</p><p>例子2：在编辑模式下输入<code>__main</code>直接补全为<code>if __name__ == &#39;__main__&#39;:</code>。</p><p><code>:inoremap __main if __name__ == &#39;__main__&#39;:</code></p></li></ul><blockquote><p>说明：上面例子2的<code>inoremap</code>中的<code>i</code>表示映射的键在编辑模式使用， <code>nore</code>表示不要递归，这一点非常重要，否则如果键对应的内容中又出现键本身，就会引发递归（相当于进入了死循环）。如果希望映射的快捷键每次启动vim时都能生效，需要将映射写到用户主目录下的.vimrc文件中。</p></blockquote></li><li><p>录制宏。</p><ul><li><p>在命令模式下输入<code>qa</code>开始录制宏（其中<code>a</code>是寄存器的名字，也可以是其他英文字母或0-9的数字）。</p></li><li><p>执行你的操作（光标操作、编辑操作等），这些操作都会被录制下来。</p></li><li><p>如果录制的操作已经完成了，按<code>q</code>结束录制。</p></li><li><p>通过<code>@a</code>（<code>a</code>是刚才使用的寄存器的名字）播放宏，如果要多次执行宏可以在前面加数字，例如<code>100@a</code>表示将宏播放100次。</p></li><li><p>可以试一试下面的例子来体验录制宏的操作，该例子来源于<a href="https://harttle.land/tags.html#Vim" target="_blank" rel="noopener">Harttle Land网站</a>，该网站上提供了很多关于vim的使用技巧，有兴趣的可以去了解一下。</p><p><img src="./res/vim-macro.png" alt=""></p></li></ul></li></ul></li></ol><h3 id="软件安装和配置"><a href="#软件安装和配置" class="headerlink" title="软件安装和配置"></a>软件安装和配置</h3><h4 id="使用包管理工具"><a href="#使用包管理工具" class="headerlink" title="使用包管理工具"></a>使用包管理工具</h4><ol><li><strong>yum</strong> - Yellowdog Updater Modified。<ul><li><code>yum search</code>：搜索软件包，例如<code>yum search nginx</code>。</li><li><code>yum list installed</code>：列出已经安装的软件包，例如<code>yum list installed | grep zlib</code>。</li><li><code>yum install</code>：安装软件包，例如<code>yum install nginx</code>。</li><li><code>yum remove</code>：删除软件包，例如<code>yum remove nginx</code>。</li><li><code>yum update</code>：更新软件包，例如<code>yum update</code>可以更新所有软件包，而<code>yum update tar</code>只会更新tar。</li><li><code>yum check-update</code>：检查有哪些可以更新的软件包。</li><li><code>yum info</code>：显示软件包的相关信息，例如<code>yum info nginx</code>。</li></ul></li><li><strong>rpm</strong> - Redhat Package Manager。<ul><li>安装软件包：<code>rpm -ivh &lt;packagename&gt;.rpm</code>。</li><li>移除软件包：<code>rpm -e &lt;packagename&gt;</code>。</li><li>查询软件包：<code>rpm -qa</code>，例如可以用<code>rpm -qa | grep mysql</code>来检查是否安装了MySQL相关的软件包。</li></ul></li></ol><p>下面以Nginx为例，演示如何使用yum安装软件。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# yum -y install nginx...Installed:  nginx.x86_64 1:1.12.2-2.el7Dependency Installed:  nginx-all-modules.noarch 1:1.12.2-2.el7  nginx-mod-http-geoip.x86_64 1:1.12.2-2.el7  nginx-mod-http-image-filter.x86_64 1:1.12.2-2.el7  nginx-mod-http-perl.x86_64 1:1.12.2-2.el7  nginx-mod-http-xslt-filter.x86_64 1:1.12.2-2.el7  nginx-mod-mail.x86_64 1:1.12.2-2.el7  nginx-mod-stream.x86_64 1:1.12.2-2.el7Complete![root@iZwz97tbgo9lkabnat2lo8Z ~]# yum info nginxLoaded plugins: fastestmirrorLoading mirror speeds from cached hostfileInstalled PackagesName        : nginxArch        : x86_64Epoch       : 1Version     : 1.12.2Release     : 2.el7Size        : 1.5 MRepo        : installedFrom repo   : epelSummary     : A high performance web server and reverse proxy serverURL         : http://nginx.org/License     : BSDDescription : Nginx is a web server and a reverse proxy server for HTTP, SMTP, POP3 and            : IMAP protocols, with a strong focus on high concurrency, performance and low            : memory usage.[root@iZwz97tbgo9lkabnat2lo8Z ~]# nginx -vnginx version: nginx/1.12.2</code></pre><p>移除Nginx。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# nginx -s stop[root@iZwz97tbgo9lkabnat2lo8Z ~]# yum -y remove nginx</code></pre><p>下面以MySQL为例，演示如何使用rpm安装软件。要安装MySQL需要先到<a href="https://www.mysql.com/" target="_blank" rel="noopener">MySQL官方网站</a>下载对应的<a href="https://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">RPM文件</a>，当然要选择和你使用的Linux系统对应的版本。MySQL现在是Oracle公司旗下的产品，在MySQL被收购后，MySQL的作者重新制作了一个MySQL的分支MariaDB，可以通过yum进行安装。如果要安装MySQL需要先通过yum删除<code>mariadb-libs</code>这个可能会跟MySQL底层库冲突的库，然后还需要安装一个名为<code>libaio</code>的依赖库。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z mysql]# lsmysql-community-client-5.7.22-1.el7.x86_64.rpmmysql-community-common-5.7.22-1.el7.x86_64.rpmmysql-community-libs-5.7.22-1.el7.x86_64.rpmmysql-community-server-5.7.22-1.el7.x86_64.rpm[root@iZwz97tbgo9lkabnat2lo8Z mysql]# yum -y remove mariadb-libs[root@iZwz97tbgo9lkabnat2lo8Z mysql]# yum -y install libaio[root@iZwz97tbgo9lkabnat2lo8Z mysql]# ls | xargs rpm -ivhwarning: mysql-community-client-5.7.22-1.el7.x86_64.rpm: Header V3 DSA/SHA1 Signature, key ID 5072e1f5: NOKEYPreparing...                          ################################# [100%]...</code></pre><blockquote><p>说明：由于MySQL和<a href="https://mariadb.org/" target="_blank" rel="noopener">MariaDB</a>的底层依赖库是有冲突的，所以上面我们首先用<code>yum</code>移除了名为mariadb-libs的依赖库并安装了名为libaio的依赖库。由于我们将安装MySQL所需的rpm文件放在一个独立的目录中，所以可以通过<code>ls</code>命令查看到安装文件并用<code>xargs</code>将<code>ls</code>的输出作为参数交给<code>rpm -ivh</code>来进行安装。关于MySQL和MariaDB之间的关系，可以阅读<a href="https://zh.wikipedia.org/wiki/MariaDB" target="_blank" rel="noopener">维基百科</a>上关于MariaDB的介绍。</p></blockquote><p>移除安装的MySQL。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# rpm -qa | grep mysql | xargs rpm -e</code></pre><h4 id="下载解压配置环境变量"><a href="#下载解压配置环境变量" class="headerlink" title="下载解压配置环境变量"></a>下载解压配置环境变量</h4><p>下面以安装MongoDB为例，演示这类软件应该如何安装。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel70-3.6.5.tgz--2018-06-21 18:32:53--  https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel70-3.6.5.tgzResolving fastdl.mongodb.org (fastdl.mongodb.org)... 52.85.83.16, 52.85.83.228, 52.85.83.186, ...Connecting to fastdl.mongodb.org (fastdl.mongodb.org)|52.85.83.16|:443... connected.HTTP request sent, awaiting response... 200 OKLength: 100564462 (96M) [application/x-gzip]Saving to: ‘mongodb-linux-x86_64-rhel70-3.6.5.tgz’100%[==================================================>] 100,564,462  630KB/s   in 2m 9s2018-06-21 18:35:04 (760 KB/s) - ‘mongodb-linux-x86_64-rhel70-3.6.5.tgz’ saved [100564462/100564462][root@iZwz97tbgo9lkabnat2lo8Z ~]# gunzip mongodb-linux-x86_64-rhel70-3.6.5.tgz[root@iZwz97tbgo9lkabnat2lo8Z ~]# tar -xvf mongodb-linux-x86_64-rhel70-3.6.5.tarmongodb-linux-x86_64-rhel70-3.6.5/READMEmongodb-linux-x86_64-rhel70-3.6.5/THIRD-PARTY-NOTICESmongodb-linux-x86_64-rhel70-3.6.5/MPL-2mongodb-linux-x86_64-rhel70-3.6.5/GNU-AGPL-3.0mongodb-linux-x86_64-rhel70-3.6.5/bin/mongodumpmongodb-linux-x86_64-rhel70-3.6.5/bin/mongorestoremongodb-linux-x86_64-rhel70-3.6.5/bin/mongoexportmongodb-linux-x86_64-rhel70-3.6.5/bin/mongoimportmongodb-linux-x86_64-rhel70-3.6.5/bin/mongostatmongodb-linux-x86_64-rhel70-3.6.5/bin/mongotopmongodb-linux-x86_64-rhel70-3.6.5/bin/bsondumpmongodb-linux-x86_64-rhel70-3.6.5/bin/mongofilesmongodb-linux-x86_64-rhel70-3.6.5/bin/mongoreplaymongodb-linux-x86_64-rhel70-3.6.5/bin/mongoperfmongodb-linux-x86_64-rhel70-3.6.5/bin/mongodmongodb-linux-x86_64-rhel70-3.6.5/bin/mongosmongodb-linux-x86_64-rhel70-3.6.5/bin/mongomongodb-linux-x86_64-rhel70-3.6.5/bin/install_compass[root@iZwz97tbgo9lkabnat2lo8Z ~]# vim .bash_profile...PATH=$PATH:$HOME/bin:$HOME/mongodb-linux-x86_64-rhel70-3.6.5/binexport PATH...[root@iZwz97tbgo9lkabnat2lo8Z ~]# source .bash_profile[root@iZwz97tbgo9lkabnat2lo8Z ~]# mongod --versiondb version v3.6.5git version: a20ecd3e3a174162052ff99913bc2ca9a839d618OpenSSL version: OpenSSL 1.0.1e-fips 11 Feb 2013allocator: tcmallocmodules: nonebuild environment:    distmod: rhel70    distarch: x86_64    target_arch: x86_64[root@iZwz97tbgo9lkabnat2lo8Z ~]# mongo --versionMongoDB shell version v3.6.5git version: a20ecd3e3a174162052ff99913bc2ca9a839d618OpenSSL version: OpenSSL 1.0.1e-fips 11 Feb 2013allocator: tcmallocmodules: nonebuild environment:    distmod: rhel70    distarch: x86_64    target_arch: x86_64</code></pre><blockquote><p>说明：当然也可以通过yum来安装MongoDB，具体可以参照<a href="https://docs.mongodb.com/master/administration/install-on-linux/" target="_blank" rel="noopener">官方网站</a>上给出的说明。</p></blockquote><h4 id="源代码构建安装"><a href="#源代码构建安装" class="headerlink" title="源代码构建安装"></a>源代码构建安装</h4><ol><li><p>安装Python 3.6。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# yum install gcc[root@iZwz97tbgo9lkabnat2lo8Z ~]# wget https://www.python.org/ftp/python/3.6.5/Python-3.6.5.tgz[root@iZwz97tbgo9lkabnat2lo8Z ~]# gunzip Python-3.6.5.tgz[root@iZwz97tbgo9lkabnat2lo8Z ~]# tar -xvf Python-3.6.5.tar[root@iZwz97tbgo9lkabnat2lo8Z ~]# cd Python-3.6.5[root@iZwz97tbgo9lkabnat2lo8Z ~]# ./configure --prefix=/usr/local/python36 --enable-optimizations[root@iZwz97tbgo9lkabnat2lo8Z ~]# yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel[root@iZwz97tbgo9lkabnat2lo8Z ~]# make && make install... 配置环境变量 ...[root@iZwz97tbgo9lkabnat2lo8Z ~]# ln -s /usr/local/python36/bin/python3.6 /usr/bin/python3[root@iZwz97tbgo9lkabnat2lo8Z ~]# python3 --versionPython 3.6.5[root@iZwz97tbgo9lkabnat2lo8Z ~]# python3 -m pip install -U pip[root@iZwz97tbgo9lkabnat2lo8Z ~]# pip3 --version</code></pre></li><li><p>安装Redis-3.2.12。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# wget http://download.redis.io/releases/redis-3.2.12.tar.gz[root@iZwz97tbgo9lkabnat2lo8Z ~]# gunzip redis-3.2.12.tar.gz[root@iZwz97tbgo9lkabnat2lo8Z ~]# tar -xvf redis-3.2.12.tar[root@iZwz97tbgo9lkabnat2lo8Z ~]# cd redis-3.2.12[root@iZwz97tbgo9lkabnat2lo8Z ~]# make && make install[root@iZwz97tbgo9lkabnat2lo8Z ~]# redis-server --versionRedis server v=3.2.12 sha=00000000:0 malloc=jemalloc-4.0.3 bits=64 build=5bc5cd3c03d6ceb6[root@iZwz97tbgo9lkabnat2lo8Z ~]# redis-cli --versionredis-cli 3.2.12</code></pre></li></ol><h3 id="配置服务"><a href="#配置服务" class="headerlink" title="配置服务"></a>配置服务</h3><ol><li><p>启动服务。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# systemctl start firewalld</code></pre></li><li><p>终止服务。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# systemctl stop firewalld</code></pre></li><li><p>重启服务。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# systemctl restart firewalld</code></pre></li><li><p>查看服务。</p><pre class=" language-Shell"><code class="language-Shell"> [root@iZwz97tbgo9lkabnat2lo8Z ~]# systemctl status firewalld</code></pre></li><li><p>设置是否开机自启。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# systemctl enable firewalldCreated symlink from /etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service to /usr/lib/systemd/system/firewalld.service.Created symlink from /etc/systemd/system/multi-user.target.wants/firewalld.service to /usr/lib/systemd/system/firewalld.service.[root@iZwz97tbgo9lkabnat2lo8Z ~]# systemctl disable firewalldRemoved symlink /etc/systemd/system/multi-user.target.wants/firewalld.service.Removed symlink /etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service.</code></pre></li></ol><h3 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h3><ol><li><p><strong>crontab</strong>命令。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# crontab -e* * * * * echo "hello, world!" >> /root/hello.txt59 23 * * * rm -f /root/*.log</code></pre><blockquote><p>说明：输入<code>crontab -e</code>命令会打开vim来编辑Cron表达式并指定触发的任务，上面我们定制了两个计划任务，一个是每分钟向/root目录下的hello.txt中追加输出<code>hello, world!</code>；另一个是每天23时59分执行删除/root目录下以log为后缀名的文件。如果不知道Cron表达式如何书写，可以参照/etc/crontab文件中的提示（下面会讲到）或者用谷歌或百度搜索一下，也可以使用Cron表达式在线生成器来生成Cron表达式。</p></blockquote></li><li><p>crontab相关文件。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# cd /etc[root@iZwz97tbgo9lkabnat2lo8Z etc]# ls -l | grep cron-rw-------.  1 root root      541 Aug  3  2017 anacrontabdrwxr-xr-x.  2 root root     4096 Mar 27 11:56 cron.ddrwxr-xr-x.  2 root root     4096 Mar 27 11:51 cron.daily-rw-------.  1 root root        0 Aug  3  2017 cron.denydrwxr-xr-x.  2 root root     4096 Mar 27 11:50 cron.hourlydrwxr-xr-x.  2 root root     4096 Jun 10  2014 cron.monthly-rw-r--r--   1 root root      493 Jun 23 15:09 crontabdrwxr-xr-x.  2 root root     4096 Jun 10  2014 cron.weekly[root@iZwz97tbgo9lkabnat2lo8Z etc]# vim crontab  1 SHELL=/bin/bash  2 PATH=/sbin:/bin:/usr/sbin:/usr/bin  3 MAILTO=root  4  5 # For details see man 4 crontabs  6  7 # Example of job definition:  8 # .---------------- minute (0 - 59)  9 # |  .------------- hour (0 - 23) 10 # |  |  .---------- day of month (1 - 31) 11 # |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ... 12 # |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat 13 # |  |  |  |  | 14 # *  *  *  *  * user-name  command to be executed</code></pre><p>通过修改<code>/etc</code>目录下的crontab文件也能够定制计划任务。</p></li></ol><h3 id="网络访问和管理"><a href="#网络访问和管理" class="headerlink" title="网络访问和管理"></a>网络访问和管理</h3><ol><li><p>通过网络获取资源 - <strong>wget</strong>。</p><ul><li>-b 后台下载模式</li><li>-O 下载到指定的目录</li><li>-r 递归下载</li></ul></li><li><p>显示/操作网络配置（旧） - <strong>ifconfig</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# ifconfig eth0eth0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500        inet 172.18.61.250  netmask 255.255.240.0  broadcast 172.18.63.255        ether 00:16:3e:02:b6:46  txqueuelen 1000  (Ethernet)        RX packets 1067841  bytes 1296732947 (1.2 GiB)        RX errors 0  dropped 0  overruns 0  frame 0        TX packets 409912  bytes 43569163 (41.5 MiB)        TX errors 0  dropped 0 overruns 0  carrier 0  collisions </code></pre></li><li><p>显示/操作网络配置（新） - <strong>ip</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# ip address1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN qlen 1    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00    inet 127.0.0.1/8 scope host lo       valid_lft forever preferred_lft forever2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP qlen 1000    link/ether 00:16:3e:02:b6:46 brd ff:ff:ff:ff:ff:ff    inet 172.18.61.250/20 brd 172.18.63.255 scope global eth0       valid_lft forever preferred_lft forever</code></pre></li><li><p>网络可达性检查 - <strong>ping</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# ping www.baidu.com -c 3PING www.a.shifen.com (220.181.111.188) 56(84) bytes of data.64 bytes from 220.181.111.188 (220.181.111.188): icmp_seq=1 ttl=51 time=36.3 ms64 bytes from 220.181.111.188 (220.181.111.188): icmp_seq=2 ttl=51 time=36.4 ms64 bytes from 220.181.111.188 (220.181.111.188): icmp_seq=3 ttl=51 time=36.4 ms--- www.a.shifen.com ping statistics ---3 packets transmitted, 3 received, 0% packet loss, time 2002msrtt min/avg/max/mdev = 36.392/36.406/36.427/0.156 ms</code></pre></li><li><p>查看网络服务和端口 - <strong>netstat</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# netstat -nap | grep nginx</code></pre></li><li><p>安全文件拷贝 - <strong>scp</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# scp root@1.2.3.4:/root/guido.jpg hellokitty@4.3.2.1:/home/hellokitty/pic.jpg</code></pre></li><li><p>安全文件传输 - <strong>sftp</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# sftp root@120.77.222.217root@120.77.222.217's password:Connected to 120.77.222.217.sftp></code></pre><ul><li><p><code>help</code>：显示帮助信息。</p></li><li><p><code>ls</code>/<code>lls</code>：显示远端/本地目录列表。</p></li><li><p><code>cd</code>/<code>lcd</code>：切换远端/本地路径。</p></li><li><p><code>mkdir</code>/<code>lmkdir</code>：创建远端/本地目录。</p></li><li><p><code>pwd</code>/<code>lpwd</code>：显示远端/本地当前工作目录。</p></li><li><p><code>get</code>：下载文件。</p></li><li><p><code>put</code>：上传文件。</p></li><li><p><code>rm</code>：删除远端文件。</p></li><li><p><code>bye</code>/<code>exit</code>/<code>quit</code>：退出sftp。</p></li></ul></li></ol><h3 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h3><ol><li><p><strong>ps</strong> - 查询进程。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# ps -efUID        PID  PPID  C STIME TTY          TIME CMDroot         1     0  0 Jun23 ?        00:00:05 /usr/lib/systemd/systemd --switched-root --system --deserialize 21root         2     0  0 Jun23 ?        00:00:00 [kthreadd]...[root@iZwz97tbgo9lkabnat2lo8Z ~]# ps -ef | grep mysqldroot      4943  4581  0 22:45 pts/0    00:00:00 grep --color=auto mysqldmysql    25257     1  0 Jun25 ?        00:00:39 /usr/sbin/mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid</code></pre></li><li><p><strong>kill</strong> - 终止进程。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# kill 1234[root@iZwz97tbgo9lkabnat2lo8Z ~]# kill -9 1234</code></pre><p>例子：用一条命令强制终止正在运行的Redis进程。</p><pre class=" language-Shell"><code class="language-Shell">ps -ef | grep redis | grep -v grep | awk '{print $2}' | xargs kill</code></pre></li><li><p>将进程置于后台运行。</p><ul><li><code>Ctrl+Z</code></li><li><code>&amp;</code></li></ul><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# mongod &[root@iZwz97tbgo9lkabnat2lo8Z ~]# redis-server...^Z[4]+  Stopped                 redis-server</code></pre></li><li><p><strong>jobs</strong> - 查询后台进程。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# jobs[2]   Running                 mongod &[3]-  Stopped                 cat[4]+  Stopped                 redis-server</code></pre></li><li><p><strong>bg</strong> - 让进程在后台继续运行。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# bg %4[4]+ redis-server &[root@iZwz97tbgo9lkabnat2lo8Z ~]# jobs[2]   Running                 mongod &[3]+  Stopped                 cat[4]-  Running                 redis-server &</code></pre></li><li><p><strong>fg</strong> - 将后台进程置于前台。</p><pre class=" language-Shell"><code class="language-Shell"> [root@iZwz97tbgo9lkabnat2lo8Z ~]# fg %4 redis-server ^C5554:signal-handler (1530025281) Received SIGINT scheduling shutdown... 5554:M 26 Jun 23:01:21.413 # User requested shutdown... 5554:M 26 Jun 23:01:21.413 * Saving the final RDB snapshot before exiting. 5554:M 26 Jun 23:01:21.415 * DB saved on disk 5554:M 26 Jun 23:01:21.415 # Redis is now ready to exit, bye bye...</code></pre><blockquote><p>说明：置于前台的进程可以使用<code>Ctrl+C</code>来终止它。</p></blockquote></li><li><p><strong>top</strong> - 进程监控。</p><pre class=" language-Shell"><code class="language-Shell"> [root@iZwz97tbgo9lkabnat2lo8Z ~]# top top - 23:04:23 up 3 days, 14:10,  1 user,  load average: 0.00, 0.01, 0.05 Tasks:  65 total,   1 running,  64 sleeping,   0 stopped,   0 zombie %Cpu(s):  0.3 us,  0.3 sy,  0.0 ni, 99.3 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st KiB Mem :  1016168 total,   191060 free,   324700 used,   500408 buff/cache KiB Swap:        0 total,        0 free,        0 used.   530944 avail Mem ...</code></pre></li></ol><h3 id="系统性能"><a href="#系统性能" class="headerlink" title="系统性能"></a>系统性能</h3><ol><li><p>查看系统活动信息 - <strong>sar</strong>。</p></li><li><p>查看内存使用情况 - <strong>free</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# free              total        used        free      shared  buff/cache   availableMem:        1016168      323924      190452         356      501792      531800Swap:             0           0           0</code></pre></li><li><p>查看进程使用内存状况 - <strong>pmap</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# ps  PID TTY          TIME CMD 4581 pts/0    00:00:00 bash 5664 pts/0    00:00:00 ps[root@iZwz97tbgo9lkabnat2lo8Z ~]# pmap 45814581:   -bash0000000000400000    884K r-x-- bash00000000006dc000      4K r---- bash00000000006dd000     36K rw--- bash00000000006e6000     24K rw---   [ anon ]0000000001de0000    400K rw---   [ anon ]00007f82fe805000     48K r-x-- libnss_files-2.17.so00007f82fe811000   2044K ----- libnss_files-2.17.so...</code></pre></li><li><p>报告设备CPU和I/O统计信息 - <strong>iostat</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# iostatLinux 3.10.0-693.11.1.el7.x86_64 (iZwz97tbgo9lkabnat2lo8Z)      06/26/2018      _x86_64_       (1 CPU)avg-cpu:  %user   %nice %system %iowait  %steal   %idle           0.79    0.00    0.20    0.04    0.00   98.97Device:            tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtnvda               0.85         6.78        21.32    2106565    6623024vdb               0.00         0.01         0.00       2088          0</code></pre></li></ol><h3 id="Shell和Shell编程"><a href="#Shell和Shell编程" class="headerlink" title="Shell和Shell编程"></a>Shell和Shell编程</h3><h4 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h4><ol><li>HOME</li><li>SHELL</li><li>HISTSIZE</li><li>RANDOM</li><li>PATH</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>日志使用指南</title>
      <link href="/2019/01/22/ri-zhi-shi-yong-zhi-nan/"/>
      <url>/2019/01/22/ri-zhi-shi-yong-zhi-nan/</url>
      
        <content type="html"><![CDATA[<h1 id="日志使用指南"><a href="#日志使用指南" class="headerlink" title="日志使用指南"></a>日志使用指南</h1><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在django中对日志记录提供了很好的支持，日志文件在开发环境中以及在线上环境或者在测试环境中都可以很好的反应程序的执行情况，以及出现bug的时候，准确的定位bug的位置，请求方法，错误原因等。所以说日志对于程序猿来说是一个开发者必备的必须了解且精通的东西。一下就来大致讲解下日志的配置以及使用，以及调试等</p><h4 id="1-日志logging模块"><a href="#1-日志logging模块" class="headerlink" title="1. 日志logging模块"></a>1. 日志logging模块</h4><p>logging模块可以收集记录错误，警告等调试信息，在程序中可以捕获这些信息，并且甚至可以将错误的重要信息等都可以通过邮件发送给开发者</p><h5 id="1-1-logging的组成"><a href="#1-1-logging的组成" class="headerlink" title="1.1 logging的组成"></a>1.1 logging的组成</h5><pre><code>LoggersHandlersFiltersFormatters</code></pre><h5 id="1-1-Loggers"><a href="#1-1-Loggers" class="headerlink" title="1.1 Loggers"></a>1.1 Loggers</h5><p>Logger 为日志系统的入口。每个logger 是一个具名的容器，可以向它写入需要处理的消息。</p><p>每个logger 都有一个日志级别。日志级别表示该logger 将要处理的消息的严重性。</p><p>Python 定义以下几种日志级别：</p><pre><code>DEBUG：用于调试目的的底层系统信息INFO：普通的系统信息WARNING：表示出现一个较小的问题。ERROR：表示出现一个较大的问题。CRITICAL：表示出现一个致命的问题。</code></pre><p>日志级别等级CRITICAL &gt; ERROR &gt; WARNING &gt; INFO &gt; DEBUG &gt; NOTSET</p><h5 id="1-2-Handlers"><a href="#1-2-Handlers" class="headerlink" title="1.2 Handlers"></a>1.2 Handlers</h5><p>Handler 决定如何处理logger 中的每条消息。它表示一个特定的日志行为。</p><p>与logger 一样，handler 也有一个日志级别。如果消息的日志级别小于handler 的级别，handler 将忽略该消息。</p><p>Logger 可以有多个handler，而每个handler 可以有不同的日志级别。</p><h5 id="1-3-Filters"><a href="#1-3-Filters" class="headerlink" title="1.3 Filters"></a>1.3 Filters</h5><p>Filter 用于对从logger 传递给handler 的日志记录进行额外的控制。</p><h5 id="1-4-Formatters"><a href="#1-4-Formatters" class="headerlink" title="1.4 Formatters"></a>1.4 Formatters</h5><p>日志记录需要转换成文本。</p><p>Formatter 表示文本的格式。Fomatter 通常由包含日志记录属性的Python 格式字符串组成；</p><p>你也可以编写自定义的fomatter 来实现自己的格式。</p><p>如下展示了formatters格式: <a href="https://github.com/coco369/knowledge/blob/master/django/images/django_logging_model.png" target="_blank" rel="noopener"><img src="https://github.com/coco369/knowledge/raw/master/django/images/django_logging_model.png" alt="图"></a></p><h4 id="2-配置日志"><a href="#2-配置日志" class="headerlink" title="2.配置日志"></a>2.配置日志</h4><p>在settings.py文件中配置LOGGING日志信息：</p><p>步骤1： 先判断日志文件夹的地址是否存在，如果不存在则新建</p><pre><code># 日志文件夹的路径LOG_PATH = os.path.join(BASE_DIR, &#39;logs&#39;)# 如果日志文件夹地址不存在，则自动创建if not LOG_PATH:    os.mkdir(LOG_PATH)</code></pre><p>步骤2： 定义LOGGING中的信息，比如loggers，formatters，handlers等</p><pre><code># 配置日志LOGGING = {    # 必须是1    &#39;version&#39;: 1,    # 默认为True，禁用日志    &#39;disable_existing_loggers&#39;: False,    # 定义formatters组件，定义存储日志中的格式    &#39;formatters&#39;:{        &#39;default&#39;: {            &#39;format&#39;: &#39;%(levelno)s %(name)s %(asctime)s&#39;        }    },    # 定义loggers组件，用于接收日志信息    # 并且将日志信息丢给handlers去处理    &#39;loggers&#39;:{        &#39;&#39;:{            &#39;handlers&#39;: [&#39;console&#39;],            &#39;level&#39;: &#39;INFO&#39;        }    },    # 定义handlers组件，用户写入日志信息    &#39;handlers&#39;:{        &#39;console&#39;:{            &#39;level&#39;: &#39;INFO&#39;,            # 定义存储日志的文件            &#39;filename&#39;: &#39;%s/log.txt&#39; % LOG_PATH,            # 指定写入日志中信息的格式            &#39;formatter&#39;: &#39;default&#39;,            # 指定日志文件超过5M就自动做备份            &#39;class&#39;: &#39;logging.handlers.RotatingFileHandler&#39;,            &#39;maxBytes&#39;: 5 * 1024 * 1024,        }    }}</code></pre><p>注意：loggers的level的级别一定要大于handlers的级别，否则handlers会忽略掉该信息的。</p><h4 id="3-使用logging打印日志"><a href="#3-使用logging打印日志" class="headerlink" title="3. 使用logging打印日志"></a>3. 使用logging打印日志</h4><ol><li><p>在程序中可以使用logging获取日志对象，然后进行日志打印：</p><pre><code> import logging # 获取logger，logger用于接收日志信息，并且丢给handlers进行处理 logger = logging.getLogger(__name__) # logger接收日志信息的几个方法，如下: logger.debug() logger.info() logger.warning() logger.error() logger.critical()</code></pre></li><li><p>定义日志处理的中间件，进行日志的打印处理</p></li></ol><p>定义日志中间件logMiddleware.py文件，定义LoggingMiddleware类，该类继承MiddlewareMixin，并重构process_request和proccess_response方法：</p><pre><code>    import logging    import time    try:        # needed to support Django &gt;= 1.10 MIDDLEWARE        from django.utils.deprecation import MiddlewareMixin    except ImportError:        # needed to keep Django &lt;= 1.9 MIDDLEWARE_CLASSES        MiddlewareMixin = object    # 获取logger    logger = logging.getLogger(__name__)    class LogMiddleware(MiddlewareMixin):        def process_request(self, request):            # url到服务器的时候，经过中间件最先执行的方法            request.init_time = time.time()            request.init_body = request.body        def process_response(self, request, response):            try:                # 经过中间件，最后执行的方法                # 计算请求到响应的时间                count_time = time.time() - request.init_time                # 获取响应的状态码                code = response.status_code                # 获取请求的内容                req_body = request.init_body                # 获取想要的内容                res_body = response.content                msg = &#39;%s %s %s %s&#39; % (count_time, code, req_body, res_body)                # 写入日志信息                logger.info(msg)            except Exception as e:                logger.critical(&#39;log error, Exception:%s&#39; % e)            return response</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前端(总结)</title>
      <link href="/2019/01/22/qian-duan-zong-jie/"/>
      <url>/2019/01/22/qian-duan-zong-jie/</url>
      
        <content type="html"><![CDATA[<p>1.HTML标签 - 承载内容 - content<br>2.CSS - 渲染页面 - display </p><ul><li>选择器<ul><li>通配符</li><li>标签选择器</li><li>类选择器</li><li>id选择器</li><li>属性选择器</li><li>后代选择器 / 父子选择器</li><li>兄弟选择器 / 相邻兄弟选择器</li></ul></li><li>就近原则/具体性原则/重要性原则</li><li>盒子模型（内容-padding-border-背景图-背景色-margin）</li><li>常用样式属性和常用属性值</li><li>伪类 / 伪元素</li></ul><p>3.JavaScript - 交互行为 - behavior</p><ul><li>语法规范 - ECMAScript</li><li>BOM - 浏览器对象模型 - window</li><li>DOM - 文档对象类型 - document<ul><li>getElementById() / getElementsByTagName() /<br>getElementsByClassName() / querySelector() /<br>querySelectorAll()</li><li>createElement() / appendChild() / insertBefore()</li><li>removeChild()</li><li>innerHTML / textContent / className / style</li><li>parentNode / children / prevSibling / nextSibling</li><li>addEventListener / removeEventListener</li></ul></li><li>jQuery - window.$ / window.jQuery<ul><li>$(‘样式表选择器’)：获取页面元素返回jQuery对象</li><li>$(‘&lt;标签&gt;’)：创建新元素得到jQuery对象</li><li>$(原生JavaScript对象)：将原生JS对象转换成jQuery对象</li><li>$(function(){}):绑定页面加载完成之后要执行的回调函数</li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vim编辑器之神</title>
      <link href="/2019/01/22/vim-bian-ji-qi-zhi-shen/"/>
      <url>/2019/01/22/vim-bian-ji-qi-zhi-shen/</url>
      
        <content type="html"><![CDATA[<h1 id="vim编辑器之神"><a href="#vim编辑器之神" class="headerlink" title="vim编辑器之神"></a>vim编辑器之神</h1><h3 id="配置vimrc配置"><a href="#配置vimrc配置" class="headerlink" title="配置vimrc配置"></a>配置vimrc配置</h3><p>在shell中可以通过 <code>vim ~/.vimrc</code> 或者 <code>vim /etc/vimrc</code> 打开vimrc文件对vim进行配置。在这个文件中可以进行很多和vim相关的配置，常用的如下（如果对其他配置感兴趣的可以自己百度）：</p><p><img src="./img/vim1.png" alt=""> </p><h3 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h3><h4 id="1-模式切换"><a href="#1-模式切换" class="headerlink" title="1.模式切换"></a>1.模式切换</h4><p>我们可以将vim分为命令模式、编辑模式和末行模式三种<br><strong>命令模式：</strong>进入vim的时候vim是处于命令模式状态下的，这个时候输入内容不会出现在编辑区  (最末什么都没有)</p><p><strong>末行模式：</strong>在命令模式下输入冒号，让vim进入末行模式。在末行模式的冒号后面可以输入相关的一些指令进行相关操作  (最后有一个冒号)</p><p><strong>编辑模式：</strong>在命令模式下按’i’进入编辑模式。在编辑模式下可以对文件内容进行编辑 (最后 –INSERT– 或者 –插入–)  </p><p>####2.保存和退出<br>在末行模式下输入相应的指令可以对编辑区的内容进行保存和退出vim界面<br><strong>w</strong> – 只保存(类似快捷键ctr+s)<br><strong>q</strong> – 退出（在编辑区的内容全部都保存的情况下才有效）<br><strong>wq</strong> – 保存并退出<br><strong>q!</strong>  – 强制退出（不保存修改信息）    </p><p>####3.光标操作<br>以下光标操作都是在命令模式下输入的<br><strong>^(shift+6)</strong>  – 移动到行首<br><strong>$(shift+4)</strong>  – 移动到行尾<br><strong>G(shift+g)</strong>    – 移动到文件末尾<br><strong>行号G</strong>            – 移动到指定行,例如:30G, 让光标直接跳转到行号是30的那一行<br><strong>gg</strong>                – 移动到文件开头  </p><p>####4.文本操作<br>以下操作不带冒号的是在命令模式下输入，前面有冒号代码后面的内容是在末行模式下输入<br><strong>dd</strong>            – 删除光标所在的行<br><strong>数字dd</strong>        – 从光标所在行开始往后面开始删，删除指定数量行内容<br><strong>:%d</strong>        – 删除所有     </p><p><strong>yy</strong>         – 复制光标所在的行<br><strong>数字yy</strong>        – 从光标所在行开始复制指定行数的内容<br><strong>p</strong>            – 将复制的内容粘贴到光标所在的位置<br><strong>u</strong>            – 撤销<br><strong>ctr+r</strong>    – 反撤销    </p><p><strong>:%!sort</strong>  – 对内容排序  </p><p><strong>:/查找对象[/gice]</strong>    – 搜索匹配正则表达式的内容，按回车回到命令模式后按n往前查找，按N往后查找  </p><p>*<em>:1,$s/被替换对象/替换内容[/gice</em>]*    – 将正则表达式匹配到的内容替换成指定内容   </p><pre><code>-    g: 全局匹配  -     i: 忽略大小写 -   c: 替换时需要提示  -   e: 忽略错误  </code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>title</title>
      <link href="/2019/01/22/title/"/>
      <url>/2019/01/22/title/</url>
      
        <content type="html"><![CDATA[<h1 id="你好！"><a href="#你好！" class="headerlink" title="你好！"></a>你好！</h1><h1 id="hello！"><a href="#hello！" class="headerlink" title="hello！"></a>hello！</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>restful使用指南</title>
      <link href="/2019/01/22/restful-shi-yong-zhi-nan/"/>
      <url>/2019/01/22/restful-shi-yong-zhi-nan/</url>
      
        <content type="html"><![CDATA[<p>restful使用指南1</p><p>前言</p><p>REST是所有Web应用都应该遵守的架构设计指导原则。</p><p>Representational State Transfer，翻译是”表现层状态转化”。</p><p>REST核心: 资源， 状态转移， 统一接口</p><p>资源: 是REST最明显的特征,是指对某类信息实体的抽象，资源是服务器上一个可命名的抽象概念，资源是以名词为核心来组织的，首先关注的是名词。</p><p>状态转移: 是指客户端痛服务端进行交互的过程中，客户端能够通过对资源的表述，实现操作资源的目的</p><p>统一接口: REST要求，必须通过统一的接口来对资源执行各种操作。对于每个资源只能执行一组有限的操作。 比如，客户端通过HTTP的4个请求方式(POST, GET, PUT, PATCH)来操作资源，也就意味着不管你的url是什么，不管请求的资源是什么但操作的资源接口都是统一的。</p><p>GET用来获取资源，POST用来新建资源（也可以用于更新资源），PUT(PATCH)用来更新资源，DELETE用来删除资源。</p><ol><li>api定义规范</li></ol><p><a href="http://xxx.com/api/" target="_blank" rel="noopener">http://xxx.com/api/</a></p><ol start="2"><li>资源</li></ol><p>在RESTful架构中，每个网址代表一种资源（resource），所以网址中不能有动词，只能有名词，而且所用的名词往往与数据库的表格名对应。一般来说，数据库中的表都是同种记录的”集合”（collection），所以API中的名词也应该使用复数。</p><p>举例来说，有一个API提供动物园（zoo）的信息，还包括各种动物和雇员的信息，则它的路径应该设计成下面这样。</p><p><a href="https://api.example.com/v1/zoos" target="_blank" rel="noopener">https://api.example.com/v1/zoos</a></p><p><a href="https://api.example.com/v1/animals" target="_blank" rel="noopener">https://api.example.com/v1/animals</a></p><p><a href="https://api.example.com/v1/employees" target="_blank" rel="noopener">https://api.example.com/v1/employees</a></p><ol start="3"><li>http请求方式</li></ol><p>GET（SELECT）：从服务器取出资源（一项或多项）</p><p>POST（CREATE）：在服务器新建一个资源</p><p>PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）</p><p>PATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）</p><p>DELETE（DELETE）：从服务器删除资源<br>例子：</p><p>GET /zoos：列出所有动物园</p><p>POST /zoos：新建一个动物园</p><p>GET /zoos/ID：获取某个指定动物园的信息</p><p>PUT /zoos/ID：更新某个指定动物园的信息（提供该动物园的全部信息）</p><p>PATCH /zoos/ID：更新某个指定动物园的信息（提供该动物园的部分信息）</p><p>DELETE /zoos/ID：删除某个动物园</p><p>GET /zoos/ID/animals：列出某个指定动物园的所有动物</p><p>DELETE /zoos/ID/animals/ID：删除某个指定动物园的指定动物</p><ol start="4"><li>filter过滤</li></ol><p>?page=2&amp;per_page=100：指定第几页，以及每页的记录数。</p><p>?sortby=name&amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序。</p><p>?animal_type_id=1：指定筛选条件</p><ol start="5"><li>状态码</li></ol><p>服务端向用户返回请求api的结果，在结果中包含了status codes 状态码的，可以通过状态码去判断请求api的状态是成功还是失败</p><p>200 OK - [GET]：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。</p><p>201 CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功。</p><p>202 Accepted - [*]：表示一个请求已经进入后台排队（异步任务）</p><p>204 NO CONTENT - [DELETE]：用户删除数据成功。</p><p>400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。</p><p>401 Unauthorized - [*]：表示用户没有权限（令牌、用户名、密码错误）。</p><p>403 Forbidden - [*] 表示用户得到授权（与401错误相对），但是访问是被禁止的。</p><p>404 NOT FOUND - [*]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。</p><p>406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。</p><p>410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。</p><p>422 Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误。</p><p>500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。</p><ol start="6"><li>错误处理</li></ol><p>如果状态码是4xx，就应该向用户返回出错信息。一般来说，返回的信息中将error作为键名，出错信息作为键值即可。</p><p>{<br>    error: ‘错误信息’<br>}</p><ol start="7"><li>django中使用restful</li></ol><p>pip install djangorestframework==3.4.6</p><p>pip install django-filter  # Filtering support</p><ol start="8"><li>settings.py配置的修改</li></ol><p>在工程目录中的settings.py文件的INSTALLED_APPS中需要添加rest_framework</p><p>INSTALLED_APPS = [<br>    …</p><pre><code>&#39;rest_framework&#39;,</code></pre><p>]</p><ol start="9"><li>在应用app中定义路由URL</li></ol><p>定义路由需要注意：</p><p>使用router.register注册的url为资源，而且资源只能为名词不能为动词。</p><p>定义的资源不要加’/‘斜杠，在访问地址的时候，URL中会默认的添加反斜杠’/‘</p><p> from django.conf.urls import url</p><p> from rest_framework.routers import SimpleRouter</p><p> from app import views</p><h1 id="引入路由"><a href="#引入路由" class="headerlink" title="引入路由"></a>引入路由</h1><p> router = SimpleRouter()</p><h1 id="使用router注册的地址"><a href="#使用router注册的地址" class="headerlink" title="使用router注册的地址"></a>使用router注册的地址</h1><p> router.register(r’^student’, views.StudentView)</p><p> urlpatterns = [</p><p> ]<br> urlpatterns += router.urls</p><ol start="10"><li>在视图views.py文件中定义StudentView类</li></ol><p>具体的详细介绍在地址</p><p>通过定义StudentView并继承了mixins的方法，即可有对应个增删改查的方法。在StudentView中还定义了两个变量queryset、serializer_class。</p><p>from rest_framework import viewsets, mixins</p><p>from app.models import Student<br>from app.serializers import StudentSerializer</p><p>class StudentView(mixins.ListModelMixin,<br>                  mixins.CreateModelMixin,<br>                  mixins.DestroyModelMixin,<br>                  mixins.RetrieveModelMixin,<br>                  mixins.UpdateModelMixin,<br>                  viewsets.GenericViewSet):</p><pre><code># 返回数据queryset = Student.objects.all()# 序列化结果serializer_class = StudentSerializer</code></pre><p>其中queryset参数表示需要需要序列化的数据 serializer_class参数指定序列化的类</p><ol start="11"><li>定义序列化类</li></ol><p>序列化类需要继承ModelSerializer，使用ModelSerializer表明序列化整个Student模型，并且可以指定虚拟化哪些字段。</p><p>from rest_framework import serializers</p><p>from app.models import Student</p><p>class StudentSerializer(serializers.ModelSerializer):</p><pre><code>class Meta:    # 指定序列化的模型    model = Student    # 指定序列化哪些字段    fields = [&#39;id&#39;, &#39;s_name&#39;, &#39;s_age&#39;]</code></pre><p>通过以上的代码，可以通过以下的URL和HTTP请求方式，完成对资源Student的CRUD操作：</p><p>CRUD对应的增删改查：</p><p>增： POST <a href="http://127.0.0.1:8080/stu/addStu/" target="_blank" rel="noopener">http://127.0.0.1:8080/stu/addStu/</a></p><p>删： DELETE <a href="http://127.0.0.1:8080/stu/addStu/1/" target="_blank" rel="noopener">http://127.0.0.1:8080/stu/addStu/1/</a></p><p>改： UPDATE <a href="http://127.0.0.1:8080/stu/addStu/1/" target="_blank" rel="noopener">http://127.0.0.1:8080/stu/addStu/1/</a></p><p>查： GET <a href="http://127.0.0.1:8080/stu/addStu/1/" target="_blank" rel="noopener">http://127.0.0.1:8080/stu/addStu/1/</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Redis指令(总结)</title>
      <link href="/2019/01/22/redis-zhi-ling-zong-jie/"/>
      <url>/2019/01/22/redis-zhi-ling-zong-jie/</url>
      
        <content type="html"><![CDATA[<p>登录指令：</p><p>redis-server –requirepass 123456 –appendonly yes –port 6379</p><p>Linux + Apache + MySQL + PHP</p><p>KV存储系统 - REmote DIctionary Server</p><p>Github - 20000 - 50000+</p><p>Github、Twitter、YouTube</p><p>提供高速缓存服务 - 缓存热点数据（访问量大数据量不大）<br>缓解了数据的压力（高频访问数据不用直接访问数据库）</p><p>Redis提供了两种持久化数据的方案：</p><ol><li>RDB - 默认开启</li><li>AOF - 默认关闭 –appendonly yes</li></ol><p>auth - 验证身份<br>ping - 心跳事件<br>set - 设置键值对<br>get - 取值<br>expire - 设置超时时间<br>ttl - 查看剩余时间<br>del - 删除键<br>keys - 查看键<br>exists - 判断键是否存在</p><p>flushdb - 清空数据库中的键值对<br>flushall - 清除所有数据库中的所有键值对<br>select - 切换底层数据库<br>dbsize - 查看当前数据库有多少组键值对</p><p>save / bgsave - 保存数据/后台保存数据<br>shutdown - 关闭服务器<br>quit - 退出</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>redis命令</title>
      <link href="/2019/01/22/redis-ming-ling/"/>
      <url>/2019/01/22/redis-ming-ling/</url>
      
        <content type="html"><![CDATA[<p>1、连接操作相关的命令</p><p>quit：关闭连接（connection）</p><p>auth：简单密码认证</p><p>2、对value操作的命令</p><p>exists(key)：确认一个key是否存在</p><p>del(key)：删除一个key</p><p>type(key)：返回值的类型</p><p>keys(pattern)：返回满足给定pattern的所有key</p><p>randomkey：随机返回key空间的一个key</p><p>rename(oldname, newname)：将key由oldname重命名为newname，若newname存在则删除newname表示的key</p><p>dbsize：返回当前数据库中key的数目</p><p>expire：设定一个key的活动时间（s）</p><p>ttl：获得一个key的活动时间</p><p>select(index)：按索引查询</p><p>move(key, dbindex)：将当前数据库中的key转移到有dbindex索引的数据库</p><p>flushdb：删除当前选择数据库中的所有key</p><p>flushall：删除所有数据库中的所有key</p><p>3、对String操作的命令</p><p>set(key, value)：给数据库中名称为key的string赋予值value</p><p>get(key)：返回数据库中名称为key的string的value</p><p>getset(key, value)：给名称为key的string赋予上一次的value</p><p>mget(key1, key2,…, key N)：返回库中多个string（它们的名称为key1，key2…）的value</p><p>setnx(key, value)：如果不存在名称为key的string，则向库中添加string，名称为key，值为value</p><p>setex(key, time, value)：向库中添加string（名称为key，值为value）同时，设定过期时间time</p><p>mset(key1, value1, key2, value2,…key N, value N)：同时给多个string赋值，名称为key i的string赋值value i</p><p>msetnx(key1, value1, key2, value2,…key N, value N)：如果所有名称为key i的string都不存在，则向库中添加string，</p><p>名称key i赋值为value i</p><p>incr(key)：名称为key的string增1操作</p><p>incrby(key, integer)：名称为key的string增加integer</p><p>decr(key)：名称为key的string减1操作</p><p>decrby(key, integer)：名称为key的string减少integer</p><p>append(key, value)：名称为key的string的值附加value</p><p>substr(key, start, end)：返回名称为key的string的value的子串</p><p>4、对List操作的命令</p><p>rpush(key, value)：在名称为key的list尾添加一个值为value的元素</p><p>lpush(key, value)：在名称为key的list头添加一个值为value的 元素</p><p>llen(key)：返回名称为key的list的长度</p><p>lrange(key, start, end)：返回名称为key的list中start至end之间的元素（下标从0开始，下同）</p><p>ltrim(key, start, end)：截取名称为key的list，保留start至end之间的元素</p><p>lindex(key, index)：返回名称为key的list中index位置的元素</p><p>lset(key, index, value)：给名称为key的list中index位置的元素赋值为value</p><p>lrem(key, count, value)：删除count个名称为key的list中值为value的元素。</p><p>count为0，删除所有值为value的元素，count&gt;0从头至尾删除count个值为value的元素，count&lt;0从尾到头删除|count|个值为value的元素。 </p><p>lpop(key)：返回并删除名称为key的list中的首元素 rpop(key)：返回并删除名称为key的list中的尾元素 </p><p>blpop(key1, key2,… key N, timeout)：lpop命令的block版本。</p><p>即当timeout为0时，若遇到名称为key i的list不存在或该list为空，则命令结束。</p><p>如果timeout&gt;0，则遇到上述情况时，等待timeout秒，如果问题没有解决，则对keyi+1开始的list执行pop操作。</p><p>brpop(key1, key2,… key N, timeout)：rpop的block版本。参考上一命令。</p><p>rpoplpush(srckey, dstkey)：返回并删除名称为srckey的list的尾元素，并将该元素添加到名称为dstkey的list的头部</p><p>5、对Set操作的命令</p><p>sadd(key, member)：向名称为key的set中添加元素member</p><p>srem(key, member) ：删除名称为key的set中的元素member</p><p>spop(key) ：随机返回并删除名称为key的set中一个元素</p><p>smove(srckey, dstkey, member) ：将member元素从名称为srckey的集合移到名称为dstkey的集合</p><p>scard(key) ：返回名称为key的set的基数</p><p>sismember(key, member) ：测试member是否是名称为key的set的元素</p><p>sinter(key1, key2,…key N) ：求交集</p><p>sinterstore(dstkey, key1, key2,…key N) ：求交集并将交集保存到dstkey的集合</p><p>sunion(key1, key2,…key N) ：求并集</p><p>sunionstore(dstkey, key1, key2,…key N) ：求并集并将并集保存到dstkey的集合</p><p>sdiff(key1, key2,…key N) ：求差集</p><p>sdiffstore(dstkey, key1, key2,…key N) ：求差集并将差集保存到dstkey的集合</p><p>smembers(key) ：返回名称为key的set的所有元素</p><p>srandmember(key) ：随机返回名称为key的set的一个元素</p><p>6、对zset（sorted set）操作的命令</p><p>zadd(key, score, member)：向名称为key的zset中添加元素member，score用于排序。如果该元素已经存在，则根据score更新该元素的顺序。</p><p>zrem(key, member) ：删除名称为key的zset中的元素member</p><p>zincrby(key, increment, member) ：如果在名称为key的zset中已经存在元素member，则该元素的score增加increment；</p><p>否则向集合中添加该元素，其score的值为increment</p><p>zrank(key, member) ：返回名称为key的zset（元素已按score从小到大排序）中member元素的rank（即index，从0开始），</p><p>若没有member元素，返回“nil”</p><p>zrevrank(key, member) ：返回名称为key的zset（元素已按score从大到小排序）中member元素的rank（即index，从0开始），</p><p>若没有member元素，返回“nil”</p><p>zrange(key, start, end)：返回名称为key的zset（元素已按score从小到大排序）中的index从start到end的所有元素</p><p>zrevrange(key, start, end)：返回名称为key的zset（元素已按score从大到小排序）中的index从start到end的所有元素</p><p>zrangebyscore(key, min, max)：返回名称为key的zset中score &gt;= min且score &lt;= max的所有元素 </p><p>zcard(key)：返回名称为key的zset的基数 zscore(key, element)：返回名称为key的zset中元素element的</p><p>score zremrangebyrank(key, min, max)：删除名称为key的zset中rank &gt;= min且rank &lt;= max的所有元素 </p><p>zremrangebyscore(key, min, max) ：删除名称为key的zset中score &gt;= min且score &lt;= max的所有元素</p><p>zunionstore / zinterstore(dstkeyN, key1,…,keyN, WEIGHTS w1,…wN, AGGREGATE SUM|MIN|MAX)：对N个zset求并集和交集，</p><p>并将最后的集合保存在dstkeyN中。对于集合中每一个元素的score，在进行AGGREGATE运算前，都要乘以对于的WEIGHT参数。</p><p>如果没有提供WEIGHT，默认为1。默认的AGGREGATE是SUM，即结果集合中元素的score是所有集合对应元素进行SUM运算的值，而MIN和MAX是指，</p><p>结果集合中元素的score是所有集合对应元素中最小值和最大值。</p><p>7、对Hash操作的命令</p><p>hset(key, field, value)：向名称为key的hash中添加元素field&lt;—&gt;value</p><p>hget(key, field)：返回名称为key的hash中field对应的value</p><p>hmget(key, field1, …,field N)：返回名称为key的hash中field i对应的value</p><p>hmset(key, field1, value1,…,field N, value N)：向名称为key的hash中添加元素field i&lt;—&gt;value i</p><p>hincrby(key, field, integer)：将名称为key的hash中field的value增加integer</p><p>hexists(key, field)：名称为key的hash中是否存在键为field的域</p><p>hdel(key, field)：删除名称为key的hash中键为field的域</p><p>hlen(key)：返回名称为key的hash中元素个数</p><p>hkeys(key)：返回名称为key的hash中所有键</p><p>hvals(key)：返回名称为key的hash中所有键对应的value</p><p>hgetall(key)：返回名称为key的hash中所有的键（field）及其对应的value</p><p>8、持久化</p><p>save：将数据同步保存到磁盘</p><p>bgsave：将数据异步保存到磁盘</p><p>lastsave：返回上次成功将数据保存到磁盘的Unix时戳</p><p>shundown：将数据同步保存到磁盘，然后关闭服务</p><p>9、远程服务控制</p><p>info：提供服务器的信息和统计</p><p>monitor：实时转储收到的请求</p><p>slaveof：改变复制策略设置</p><p>config：在运行时配置Redis服务器</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Nginx服务器安装</title>
      <link href="/2019/01/22/nginx-fu-wu-qi-an-zhuang/"/>
      <url>/2019/01/22/nginx-fu-wu-qi-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h1 id="Nginx服务器"><a href="#Nginx服务器" class="headerlink" title="Nginx服务器"></a>Nginx服务器</h1><h3 id="1-阿里云添加80端口"><a href="#1-阿里云添加80端口" class="headerlink" title="1.阿里云添加80端口"></a>1.阿里云添加80端口</h3><p>阿里云上默认只有一个22端口用来做远程登录，如果希望在阿里云上安装支持http请求的nginx服务器，需要给阿里云添加80端口</p><p><img src="./img/aliyun0.png" alt="打开安全组设置"><br><img src="./img/aliyun2.png" alt=""><br><img src="./img/aliyun3.png" alt=""><br><img src="./img/aliyun4.png" alt=""></p><h3 id="2-安装nginx"><a href="#2-安装nginx" class="headerlink" title="2. 安装nginx"></a>2. 安装nginx</h3><p>a) 添加nginx存储库  </p><pre class=" language-python"><code class="language-python">    yum install epel<span class="token operator">-</span>release</code></pre><p>b) 安装nginx</p><pre class=" language-python"><code class="language-python">    yum install nginx</code></pre><p>c) 运行nginx<br>Nginx不会自行启动。要运行Nginx  </p><pre><code>    systemctl start nginx</code></pre><p>nginx的运行命令:  </p><pre><code>    systemctl status nginx 查看nginx的状态      systemctl start/stop/enable/disable nginx 启动/关闭/设置开机启动/禁止开机启动  </code></pre><p>d) 系统启动时启动Nginx  </p><pre><code>    systemctl enable nginx</code></pre><p>e）如果您正在运行防火墙，请运行以下命令以允许HTTP和HTTPS通信：   </p><pre><code>    sudo firewall-cmd --permanent --zone=public --add-service=http     sudo firewall-cmd --permanent --zone=public --add-service=https    sudo firewall-cmd --reload</code></pre><h3 id="3-nginx目录共享配置"><a href="#3-nginx目录共享配置" class="headerlink" title="3.nginx目录共享配置"></a>3.nginx目录共享配置</h3><p>a) 在contOS目录中确定一个需要共享的文件夹，例如： /home/yuting<br>b) 打开 etc/nginx/nginx.conf 文件，设置server</p><pre><code>    #共享设置 - 在浏览器中输入服务器ip地址，会展示共享目录的文件列表    root /home/yuting;    location / {           autoindex on;           autoindex_exact_size on;           autoindex_localtime on;    }  </code></pre><p>除了可以共享文件，还可以自定义页面</p><pre><code>    #自定义服务器页面    location / {            root /home/yuting;            index index.html index.htm;    }</code></pre><p>注意： 如果出现权限问题，可以修改目录的权限  </p><h1 id="ssh密钥认证"><a href="#ssh密钥认证" class="headerlink" title="ssh密钥认证"></a>ssh密钥认证</h1><p>1.在主机和从机上执行：<code>ssh-keygen</code></p><p>2.在从机上执行:  <code>scp  id_rsa.pub  root@主机地址:~/.ssh/master.pub</code><br>(上面这条指令是将从机上的 id_rsa.pub文件拷贝传递给到主机的.ssh文件夹下，并且命名为’master.pub’)</p><p>3.在主机中的.ssh文件夹中创建authorized_keys文件： <code>touch authorized_keys</code> </p><p>4.修改文件authorized_keys的权限: <code>chmod 600  authorized_keys</code>  </p><p>5.将master.pub放进authorized_keys文件中:  <code>cat master.pub &gt;&gt;  authorized_keys</code></p><p>6.在操作主机的时候，需要主机能够自己免密访问自己就将自己的公钥放在自己的authorized_keys文件中</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql增删查改</title>
      <link href="/2019/01/22/mysql-zeng-shan-cha-gai/"/>
      <url>/2019/01/22/mysql-zeng-shan-cha-gai/</url>
      
        <content type="html"><![CDATA[<p>– 关系型数据库可以保证数据的完整性<br>– 实体完整性:每条记录都是独一无二的没有冗余 - 主键/唯一索引<br>– 参照完整性(引用完整性):外键<br>– 域完整性:数据类型、非空约束、默认值约束、检查约束</p><p>– 创建SRS数据库<br>drop database if exists SRS;<br>create database SRS default charset utf8 collate utf8_bin;</p><p>– 切换到SRS数据库<br>use SRS;</p><p>– 创建学院表<br>create table tb_college<br>(<br>collid int not null auto_increment comment ‘学院编号’,<br>collname varchar(50) not null comment ‘学院名称’,<br>collmaster varchar(20) not null comment ‘院长姓名’,<br>collweb varchar(511) default ‘’ comment ‘学院网站’,<br>primary key (collid)<br>);</p><p>– 添加唯一约束<br>alter table tb_college add constraint uni_college_collname unique (collname);</p><p>– 创建学生表<br>create table tb_student<br>(<br>stuid int not null comment ‘学号’,<br>sname varchar(20) not null comment ‘学生姓名’,<br>gender bit default 1 comment ‘性别’,<br>birth date not null comment ‘出生日期’,<br>addr varchar(255) default ‘’ comment ‘籍贯’,<br>collid int not null comment ‘所属学院编号’,<br>primary key (stuid)<br>);</p><p>– 添加外键约束<br>alter table tb_student add constraint fk_student_collid foreign key (collid) references tb_college (collid);</p><p>– 创建教师表<br>create table tb_teacher<br>(<br>teaid int not null comment ‘教师工号’,<br>tname varchar(20) not null comment ‘教师姓名’,<br>title varchar(10) default ‘’ comment ‘职称’,<br>collid int not null comment ‘所属学院编号’<br>);</p><p>– 添加主键约束<br>alter table tb_teacher add constraint pk_teacher primary key (teaid);</p><p>– 添加外键约束<br>alter table tb_teacher add constraint fk_teacher_collid foreign key (collid) references tb_college (collid);</p><p>– 创建课程表<br>create table tb_course<br>(<br>couid int not null comment ‘课程编号’,<br>cname varchar(50) not null comment ‘课程名称’,<br>credit tinyint not null comment ‘学分’,<br>teaid int not null comment ‘教师工号’,<br>primary key (couid)<br>);</p><p>– 添加外键约束<br>alter table tb_course add constraint fk_course_tid foreign key (teaid) references tb_teacher (teaid);</p><p>– 创建学生选课表<br>create table tb_score<br>(<br>scid int not null auto_increment comment ‘选课编号’,<br>sid int not null comment ‘学号’,<br>cid int not null comment ‘课程编号’,<br>seldate date comment ‘选课时间日期’,<br>mark decimal(4,1) comment ‘考试成绩’,<br>primary key (scid)<br>);</p><p>– 添加外键约束<br>alter table tb_score add constraint fk_score_sid foreign key (sid) references tb_student (stuid);<br>alter table tb_score add constraint fk_score_cid foreign key (cid) references tb_course (couid);<br>– 添加唯一约束<br>alter table tb_score add constraint uni_score_sid_cid unique (sid, cid);</p><p>– 插入学院数据<br>insert into tb_college (collname, collmaster, collweb) values<br>(‘计算机学院’, ‘左冷禅’, ‘<a href="http://www.abc.com&#39;)" target="_blank" rel="noopener">http://www.abc.com&#39;)</a>,<br>(‘外国语学院’, ‘岳不群’, ‘<a href="http://www.xyz.com&#39;)" target="_blank" rel="noopener">http://www.xyz.com&#39;)</a>,<br>(‘经济管理学院’, ‘风清扬’, ‘<a href="http://www.foo.com&#39;)" target="_blank" rel="noopener">http://www.foo.com&#39;)</a>;</p><p>– 插入学生数据<br>insert into tb_student (stuid, sname, gender, birth, addr, collid) values<br>(1001, ‘杨逍’, 1, ‘1990-3-4’, ‘四川成都’, 1),<br>(1002, ‘任我行’, 1, ‘1992-2-2’, ‘湖南长沙’, 1),<br>(1033, ‘王语嫣’, 0, ‘1989-12-3’, ‘四川成都’, 1),<br>(1572, ‘岳不群’, 1, ‘1993-7-19’, ‘陕西咸阳’, 1),<br>(1378, ‘纪嫣然’, 0, ‘1995-8-12’, ‘四川绵阳’, 1),<br>(1954, ‘林平之’, 1, ‘1994-9-20’, ‘福建莆田’, 1),<br>(2035, ‘东方不败’, 1, ‘1988-6-30’, null, 2),<br>(3011, ‘林震南’, 1, ‘1985-12-12’, ‘福建莆田’, 3),<br>(3755, ‘项少龙’, 1, ‘1993-1-25’, null, 3),<br>(3923, ‘杨不悔’, 0, ‘1985-4-17’, ‘四川成都’, 3);</p><p>– 插入老师数据<br>insert into tb_teacher (teaid, tname, title, collid) values<br>(1122, ‘张三丰’, ‘教授’, 1),<br>(1133, ‘宋远桥’, ‘副教授’, 1),<br>(1144, ‘杨逍’, ‘副教授’, 1),<br>(2255, ‘范遥’, ‘副教授’, 2),<br>(3366, ‘韦一笑’, ‘讲师’, 3);</p><p>– 插入课程数据<br>insert into tb_course (couid, cname, credit, teaid) values<br>(1111, ‘Python程序设计’, 3, 1122),<br>(2222, ‘Web前端开发’, 2, 1122),<br>(3333, ‘操作系统’, 4, 1122),<br>(4444, ‘计算机网络’, 2, 1133),<br>(5555, ‘编译原理’, 4, 1144),<br>(6666, ‘算法和数据结构’, 3, 1144),<br>(7777, ‘经贸法语’, 3, 2255),<br>(8888, ‘成本会计’, 2, 3366),<br>(9999, ‘审计学’, 3, 3366);</p><p>– 插入选课数据<br>insert into tb_score (sid, cid, seldate, mark) values<br>(1001, 1111, ‘2017-09-01’, 95),<br>(1001, 2222, ‘2017-09-01’, 87.5),<br>(1001, 3333, ‘2017-09-01’, 100),<br>(1001, 4444, ‘2018-09-03’, null),<br>(1001, 6666, ‘2017-09-02’, 100),<br>(1002, 1111, ‘2017-09-03’, 65),<br>(1002, 5555, ‘2017-09-01’, 42),<br>(1033, 1111, ‘2017-09-03’, 92.5),<br>(1033, 4444, ‘2017-09-01’, 78),<br>(1033, 5555, ‘2017-09-01’, 82.5),<br>(1572, 1111, ‘2017-09-02’, 78),<br>(1378, 1111, ‘2017-09-05’, 82),<br>(1378, 7777, ‘2017-09-02’, 65.5),<br>(2035, 7777, ‘2018-09-03’, 88),<br>(2035, 9999, date(now()), null),<br>(3755, 1111, date(now()), null),<br>(3755, 8888, date(now()), null),<br>(3755, 9999, ‘2017-09-01’, 92);</p><p>– 查询所有学生信息<br>select * from tb_student;</p><p>– 查询所有课程名称及学分(投影和别名)<br>select cname as 课程名称, credit as 学分 from tb_course;</p><p>– 查询所有女学生的姓名和出生日期(筛选)<br>select sname as 姓名, birth as 出生日期 from tb_student where gender=0;</p><p>– 查询所有80后学生的姓名、性别和出生日期(筛选)<br>select<br>    sname as 姓名,<br>    case gender when 1 then ‘男’ else ‘女’ end as 性别,<br>    birth as 出生日期<br>from tb_student<br>where birth between ‘1980-1-1’ and ‘1989-12-31’;</p><p>– 写法2(使用MySQL中的分支函数)<br>select<br>    sname as 姓名,<br>    if(gender,’男’,’女’) as 性别,<br>    birth as 出生日期<br>from tb_student<br>where birth between ‘1980-1-1’ and ‘1989-12-31’;</p><p>– 查询名字有四个中文字符的学生学号和姓名(函数)<br>select stuid as 学号, sname as 姓名 from tb_student<br>where length(sname)/3=4;</p><p>– 查询姓”杨“的学生姓名和性别(模糊)<br>select sname as 姓名, if(gender,’男’,’女’) as 性别<br>from tb_student where sname like ‘杨%’;</p><p>– 查询姓”杨“名字两个字的学生姓名和性别(模糊)<br>select sname as 姓名, if(gender,’男’,’女’) as 性别<br>from tb_student where sname like ‘杨_’;</p><p>– 查询姓”杨“名字三个字的学生姓名和性别(模糊)<br>select sname as 姓名, if(gender,’男’,’女’) as 性别<br>from tb_student where sname like ‘杨__’;</p><p>– 查询名字中有”不“字或“嫣”字的学生的姓名(模糊)<br>select sname as 姓名<br>from tb_student where sname like ‘%不%’ or sname like ‘%嫣%’</p><p>– 查询没有录入家庭住址的学生姓名(空值)<br>select sname as 姓名<br>from tb_student where addr is null or addr=’’;</p><p>– 查询录入了家庭住址的学生姓名(空值)<br>select sname as 姓名 from tb_student<br>where addr is not null and addr&lt;&gt;’’;</p><p>– 查询学生选课的所有日期(去重)<br>select distinct seldate as 选课日期 from tb_score;</p><p>– 查询学生的家庭住址(去重)<br>select distinct addr 家庭地址 from tb_student<br>where addr is not null and addr&lt;&gt;’’;</p><p>– 查询男学生的姓名和生日按年龄从大到小排列(排序)<br>– 降序 desc / 升序 asc（默认）<br>select sname as 姓名, year(now())-year(birth) as 出生日期 from tb_student<br>where gender=1 order by birth desc;</p><p>select stuid, sname, gender from tb_student<br>order by gender asc, stuid desc;</p><p>– 聚合函数: max / min / sum / avg / count</p><p>– 查询学生数量<br>select count(stuid) from tb_student<br>select count(*) from tb_course;</p><p>– 查询年龄最大的学生的出生日期(聚合函数)<br>select min(birth) from tb_student;</p><p>– 查询年龄最小的学生的出生日期(聚合函数)<br>select max(birth) from tb_student;</p><p>– 查询男女学生的人数(分组和聚合函数)<br>select gender as 性别, count(gender) as 人数<br>from tb_student group by gender;</p><p>– 查询课程编号为1111的课程的平均成绩(筛选和聚合函数)<br>select avg(mark) as 平均成绩 from tb_score<br>where cid=1111;</p><p>– 查询学号为1001的学生所有课程的平均分(筛选和聚合函数)<br>select avg(mark) as 平均成绩 from tb_score<br>where sid=1001;</p><p>– 查询每个学生的学号和平均成绩(分组和聚合函数)<br>select sid as 学号, avg(mark) as 平均成绩 from tb_score<br>group by sid;</p><p>– 查询平均成绩大于等于90分且学号在1000到2000之间的的学生的学号和平均成绩<br>– 总结：分组之前的筛选用where子句，分组之后的筛选用having子句。<br>select sid as 学号, avg(mark) as 平均成绩 from tb_score<br>where sid between 1000 and 3999<br>group by sid having avg(mark)&gt;=90<br>order by avg(mark) desc;</p><p>– 查询年龄最大的学生的姓名(嵌套查询/子查询)<br>– 把一个查询的结果当成另一个查询的一部分来使用<br>select sname as 姓名 from tb_student<br>where birth=(select min(birth) from tb_student);</p><p>– 查询选了两门以上的课程的学生姓名(子查询/分组条件/集合运算)<br>select sname as 姓名 from tb_student<br>where stuid in (<br>select sid from tb_score<br>group by sid having count(sid)&gt;2<br>);</p><p>– 查询学生姓名、课程名称以及成绩(连接查询)<br>select sname, cname, mark<br>from tb_student, tb_course, tb_score<br>where stuid=sid and couid=cid;<br>– 查询选课学生的姓名和平均成绩(子查询和连接查询)<br>select sname as 姓名, avgmark as 平均分<br>from tb_student t1,<br>(select sid, avg(mark) as avgmark<br>from tb_score group by sid) t2<br>where stuid=sid;</p><p>select sname as 姓名, avgmark as 平均分<br>from tb_student t1 inner join<br>(select sid, avg(mark) as avgmark<br>from tb_score group by sid) t2<br>on stuid=sid;</p><p>– 查询每个学生的姓名和选课数量(左外连接和子查询)<br>– 左外连接：将左表不满足连表条件的记录也要查出来，不满足连表条件的地方补空值<br>– 右外连接：将右表不满足连表条件的记录也要查出来，不满足连表条件的地方补空值<br>– 在连接多表查询时写在前面的表称为左表，下载后面的称为右表<br>– left outer join / right outer join<br>– MySQL不支持全外连接 full outer join<br>select sname as 姓名, ifnull(total, 0) as 选课数量<br>from tb_student t1<br>left join (select sid, count(sid) as total<br>from tb_score group by sid) t2<br>on stuid=sid;</p><p>– 练习<br>select sname as 学生姓名, cname as 课程名称, mark as 成绩<br>from tb_student, tb_course, tb_score<br>where stuid=sid and couid=cid;</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql权限管理</title>
      <link href="/2019/01/22/mysql-quan-xian-guan-li/"/>
      <url>/2019/01/22/mysql-quan-xian-guan-li/</url>
      
        <content type="html"><![CDATA[<p>use hrs</p><p>– 事务：多个数据操作要么全都成功要么全都失败（不可分割） - 一致性问题<br>start transaction;  – 开启事务<br>begin;              – 开启事务</p><p>commit;             – 提交事务</p><p>rollback;           – 回滚（撤销全部）</p><p>create user hellokitty@’%’ identified by ‘123123’;</p><p>grant select on hrs.* to hellokitty@’%’;</p><p>grant insert on hrs.* to hellokitty@’%’;</p><p>grant all privileges on *.* to hellokitty@’%’;</p><p>grant all privileges on *.* to hellokitty@’%’ with grant option;</p><p>revoke all privileges on *.* from hellokitty@’%’;</p><p>drop user hellokitty@’%’;</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql基础</title>
      <link href="/2019/01/22/mysql-ji-chu-zhi-shi/"/>
      <url>/2019/01/22/mysql-ji-chu-zhi-shi/</url>
      
        <content type="html"><![CDATA[<p>xlrd xlwt<br>1.数据库 - 实现项目中的数据持久化</p><p>数据库的类别：</p><ul><li>关系型数据库 - MySQL<br>特点:<br>1.理论基础：集合论和关系代数<br>2.用二维表来组织数据（行（记录）和列（字段））</li><li>能够唯一标识一条记录的列成为主键(primary key)<br>3.SQL - 结构化查询语言</li><li>DDL - 数据定义语言 - create(创建) / drop(删除) / alter(修改)</li><li>DML - 数据操作语言 - insert(插入) / delete(删除) / update(更新) / select(选择)</li><li>DCL - 数据控制语言 - grant(添加权限) / revoke(删除权限) / commit(提交事务) / rollback(回滚)</li></ul><p>关系型数据库产品：<br>1.Oracle - 甲骨文<br>2.MySQL - 甲骨文 - MariaDB<br>3.DB2、SQLServer、PostgreSQL、SQLite</p><ul><li><p>NoSQL数据库 - Redis<br>1.MongoDB - 文档数据库 - 适合量大但是价值低的数据库<br>2.Redis - KV数据库 - 性能好适合做高速缓存服务<br>3.ElasticSearch - 搜索引擎</p></li><li><p>Linux安装软件<br>1.包管理工具 - yum / rpm</p></li></ul><p>Docker - 虚拟化服务，创建虚拟化容器并安装软件<br>yum -y install docker-io<br>yum -y remove docker-io<br>yum info …<br>yum search …<br>yum list installed | grep docker-io</p><p>启动Docker服务<br>systemctl start docker - 启动服务<br>systemctl stop docker - 停止服务<br>systemctl restart docker - 重启<br>systemctl status docker - 查看状态<br>systemctl enabl docker  - 开机自启<br>systemctl disable docker - 禁用开机自启</p><p>使用Docker的命令<br>1.查看已经下载的镜像文件（安装包）：</p><ul><li>docker images</li></ul><p>2.下载MySQL的镜像文件：<br>docker pull mysql:5.7</p><p>MySQL数据超级管理员账号 - root<br>Oracle数据库超级管理员账号 - sys<br>SQLServer数据超级管理员账号 - sa</p><p>3.创建并运行容器<br>docker run -d -p 3306:3306 –name mysql57 -e MYSQL_ROOT_PASSWORD=123456 mysql:5.7</p><p>4.查看运行中的容器<br>docker ps</p><p>5.查看所有的容器<br>docker container ls -a</p><p>6.停止容器<br>docker stop mysql57</p><p>7.启动容器<br>docker start mysql57</p><p>8.删除容器<br>docker rm -f mysql57</p><p>安装MySQL客户端工具:<br>Navicat for MySQL - 猫<br>SQLyoh - 海豚<br>Toad for MySQL - 蛤蟆</p><p>===========================================================<br>1.<br>– SQL - 结构化查询语言<br>– DDL - 数据定义语言 - create / drop / alter<br>– DML - 数据操作语言 - insert / delete / update / select<br>– DCL - 数据控制语言 - grant / revoke</p><p>2.<br>– 创建名为srs的数据库并设置默认字符集为utf8<br>create database srs default charset utf8;</p><p>– 切换到srs数据库<br>use srs;</p><p>– 如果存在名为tb_student的表就删除<br>drop table if exists tb_student;</p><p>3.<br>– 在学生表中学号可以唯一的标记一条学生记录</p><p>– 我们通常称这样的列为主键列</p><p>– Error: Duplicated Entry  主键冲突报的错误（主键已经存在）</p><p>4.– 修改学生表添加联系方式列</p><p>alter table tb_student add column stutel char(11);  – 定长字符串，长度是11的字符串</p><p>– 修改学生表删除联系方式列</p><p>alter table tb_student drop column stutel;</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql查语法</title>
      <link href="/2019/01/22/mysql-cha-yu-fa/"/>
      <url>/2019/01/22/mysql-cha-yu-fa/</url>
      
        <content type="html"><![CDATA[<p>– 创建人力资源管理系统数据库<br>drop database if exists hrs;<br>create database hrs default charset utf8;<br>– 切换数据库上下文环境<br>use hrs;<br>– 删除表<br>drop table if exists tb_emp;<br>drop table if exists tb_dept;<br>– 创建部门表<br>create table tb_dept<br>(<br>dno int comment ‘部门编号’,<br>dname varchar(10) not null comment ‘部门名称’,<br>dloc varchar(20) not null    comment ‘部门所在地’,<br>primary key (dno)<br>);<br>– 添加部门记录<br>insert into tb_dept values<br> (10, ‘会计部’, ‘北京’),<br> (20, ‘研发部’, ‘成都’),<br> (30, ‘销售部’, ‘重庆’),<br> (40, ‘运维部’, ‘深圳’);<br>– 创建员工表<br>create table tb_emp<br>(<br>eno int comment ‘员工编号’,<br>ename varchar(20) not null comment ‘员工姓名’,<br>job varchar(20) not null comment ‘员工职位’,<br>mgr int comment ‘主管编号’,<br>sal int not null comment ‘员工工资’,<br>comm int comment ‘每月补贴’,<br>dno int comment ‘所在部门编号’,<br>primary key (eno),<br>foreign key (dno) references tb_dept (dno)<br>);</p><p>– 添加员工记录<br>insert into tb_emp values<br> (7800, ‘张三丰’, ‘总裁’, null, 9000, 1200, 20),<br> (2056, ‘乔峰’, ‘分析师’, 7800, 5000, 1500, 20),<br> (3088, ‘李莫愁’, ‘设计师’, 2056, 3500, 800, 20),<br> (3211, ‘张无忌’, ‘程序员’, 2056, 3200, null, 20),<br> (3233, ‘丘处机’, ‘程序员’, 2056, 3400, null, 20),<br> (3251, ‘张翠山’, ‘程序员’, 2056, 4000, null, 20),<br> (5566, ‘宋远桥’, ‘会计师’, 7800, 4000, 1000, 10),<br> (5234, ‘郭靖’, ‘出纳’, 5566, 2000, null, 10),<br> (3344, ‘黄蓉’, ‘销售主管’, 7800, 3000, 800, 30),<br> (1359, ‘胡一刀’, ‘销售员’, 3344, 1800, 200, 30),<br> (4466, ‘苗人凤’, ‘销售员’, 3344, 2500, null, 30),<br> (3244, ‘欧阳锋’, ‘程序员’, 3088, 3200, null, 20),<br> (3577, ‘杨过’, ‘会计’, 5566, 2200, null, 10),<br> (3588, ‘朱九真’, ‘会计’, 5566, 2500, null, 10);</p><p>– 查询薪资最高的员工姓名和工资<br>select ename as 姓名, sal as 月薪 from tb_emp<br>where sal=(select max(sal) from tb_emp);</p><p>– 查询员工的姓名和年薪((工资+补贴)<em>12)<br>select ename as 姓名, (sal+ifnull(comm,0))</em>12 as 年薪<br>from tb_emp order by 年薪 desc;</p><p>– 查询有员工的部门的编号和人数<br>select dno as 部门编号, count(dno) as 人数<br>from tb_emp group by dno;</p><p>– 查询所有部门的名称和人数<br>– 当列有二义性的时候使用完全限定名<br>select dname as 部门名称, total from tb_dept t1,<br>(select dno, count(dno) as total from tb_emp group by dno) t2<br>where t1.dno=t2.dno;</p><p>select dname as 部门名称, ifnull(total,0) from tb_dept t1 left outer join<br>(select dno, count(dno) as total from tb_emp group by dno) t2<br>on t1.dno=t2.dno;</p><p>– 查询薪资最高的员工(Boss除外)的姓名和工资<br>select ename as 姓名, sal as 薪资 from tb_emp<br>where sal=(select max(sal) from tb_emp where mgr);<br>– 查询薪水超过平均薪水的员工的姓名和工资<br>select ename as 姓名, sal as 薪资 from tb_emp<br>where sal&gt;(select avg(sal) from tb_emp);<br>– 查询薪水超过其所在部门平均薪水的员工的姓名、部门编号和工资<br>select ename, t1.dno, sal from tb_emp t1 inner join<br>(select dno, avg(sal) as avgsal from tb_emp group by dno) t2<br>on t1.dno=t2.dno<br>where sal&gt;avgsal;<br>– 查询部门中薪水最高的人姓名、工资和所在部门名称<br>select ename as 名字, sal as 工资, dname as 部门名称 from tb_dept t3 inner join<br>(select ename, sal, t1.dno from tb_emp t1 inner join<br>(select dno, max(sal) as maxsal from tb_emp group by dno) t2<br>on t1.dno=t2.dno<br>where sal=maxsal) t4<br>on t3.dno=t4.dno;<br>– 查询主管的姓名和职位</p><p>– 集合运算和去重操作性能都非常糟糕应该尽量避免使用<br>– 可以使用exists和not exists来替代集合运算和去重</p><p>select ename, job from tb_emp t1 where exists<br>(select ‘x’ from tb_emp t2 where t1.eno=t2.mgr);</p><p>select ename, job from tb_emp t1 where not exists<br>(select ‘x’ from tb_emp t2 where t1.eno=t2.mgr);<br>– 查询薪资排名4~6名的员工姓名和工资<br>select ename, sal from tb_emp order by sal desc limit 3,3;<br>select ename, sal from tb_emp order by sal desc limit 3 offset 3;</p><p>– select - from - where - group by(分组) - having - order by(排序) - limit</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux文件操作命令</title>
      <link href="/2019/01/22/linux-wen-jian-cao-zuo-ming-ling/"/>
      <url>/2019/01/22/linux-wen-jian-cao-zuo-ming-ling/</url>
      
        <content type="html"><![CDATA[<p>Linux文件操作命令：</p><ul><li>pwd - print working directory</li><li>cd - change directory</li><li>ls - list directory contents<br> -a - all<br>  -l - long<br>  -R - recursive</li><li>mkdir - make directory</li><li>rmdir - remove empty directory</li><li>touch</li><li>cp - copy</li><li>rm - remove</li><li>mv - move</li><li>less / more / head / tail</li><li>cat - concatenate</li><li>uniq / sort / cut / wc / diff</li><li><p>find / grep</p></li><li><p>ps -ef / ps -aux</p></li><li>netstat -nap</li><li>ifconfig / ip</li><li>top / sar</li><li>scp / sftp / ssh</li></ul><p>Linux安装软件和配置服务：</p><ol><li>包管理工具 - yum / rpm / apt / deb</li><li>源代码构建安装<ul><li>wget</li><li>gunzip / xz -d</li><li>tar -xvf</li><li>make &amp;&amp; make install</li><li>ln -s 源 目标</li></ul></li></ol><p>systemctl </p><pre><code>- start / stop / restart / status / enable / disable</code></pre><p>service</p><p>firewalld / iptables - 防火墙</p><p>使用vim</p><p>命令模式 –i/a–&gt; 插入模式（编辑模式） –Esc–&gt; 命令模式<br>命令模式 –:?/–&gt; 末行模式 –Enter–&gt; 命令模式</p><p>Ctrl+e / Ctrl+y - 滚动一行<br>Ctrl+f / Ctrl+b - 滚动一页<br>gg - 到首行<br>G - 到末行<br>100G - 到100行<br>hjkl - 左下上右移动光标<br>$ - 光标到行尾<br>0 - 光标到行首<br>dd / dw / d0 / d$ - 删除<br>yy / p - 复制 / 黏贴<br>u / Ctrl+r - 撤销 / 恢复<br>ZZ / :wq - 保存退出 - ! - 强制操作</p><p>/搜索内容（正则） - 查找 - n / N - 向下/上搜索<br>?搜索内容（正则） - 查找<br>:1,$s/搜索的内容（正则）/替换后的内容/ice - 查找替换</p><p>版本比较 - vim -d 文件1 文件2<br>多文件查看 - vim 文件1 文件2 文件3<br>:ls - 查看文件<br>:b - 切换文件<br>:sp / :vs - 拆分窗口<br>Ctrl+w Ctrl+w - 切换窗口</p><p>配置vim —&gt; ~/.vimrc<br>set nu<br>set ts=4<br>set expandtab<br>set autoindent<br>set nohls<br>syntax on<br>set ruler </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/01/22/hello-world/"/>
      <url>/2019/01/22/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>git常用指令</title>
      <link href="/2019/01/22/git-chang-yong-zhi-ling/"/>
      <url>/2019/01/22/git-chang-yong-zhi-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="git常用指令"><a href="#git常用指令" class="headerlink" title="git常用指令"></a>git常用指令</h1><h2 id="1-基本指令"><a href="#1-基本指令" class="headerlink" title="1.基本指令"></a>1.基本指令</h2><p><code>git init</code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ——  新建git仓库<br><code>git add 文件/文件夹</code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ——  将文件添加到缓存区中<br><code>git add -A</code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; — 添加所有内容到缓存区中<br><code>git stutas</code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;———    查看git状态<br><code>git commit -m  ‘提交信息’</code>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;——  将缓存区中的内容全部提交到git本地仓库中  </p><p><code>git log</code>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;——-    查看提交日志  </p><p><code>git reset  - - hard   HEAD</code>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;——   让工作目录中的内容和仓库中的内容保持一致<br><code>git reset  --hard HEAD^</code>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;——  回到上一个版本<br><code>git  reset  - - hard 版本号</code>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;——  回到指定的版本<br><code>git checkout  - -  文件名</code>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ——  从暂存区中恢复工作目录中的内容(让工作区中的指定文件，回到上次提交的时候的状态)  </p><p><code>git clone &lt;url&gt;</code> - 将服务器上的项目(仓库)克隆 (使用https地址需要输入密码，使用ssh地址需要添加公钥)  </p><p><code>git remote add origin 地址</code>      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;—– 关联远程仓库(只需要关联一次)</p><p><code>git push [-u] origin master</code>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;—– 提交(-u在第一次提交分之的时候才用)  </p><h2 id="2-分之管理"><a href="#2-分之管理" class="headerlink" title="2.分之管理"></a>2.分之管理</h2><p>创建仓库会默认给我们创建一个master分之,这个分之一般作为提交和发布分之;开发一般会自己创建一个develop分之，用来开发和测试;多人协作的时候还可能根据不同的人或者(不同的功能)创建不同的分之，用来独立开发  </p><p>常见分之： master(主要是合并develop), develop(主要合并下面的其他分支), 功能/人员分之(开发)  </p><p><code>git branch [-a]</code>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;        - 查看分之<br><code>git branch 分之名</code>        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- 创建分之<br><code>git checkout   分支名</code>        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-   切换分之<br><code>git checkout -b 分之名</code>        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    - 切换并创建新的分之<br><code>git diff    分之1  分之2</code>        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- 查看两个分之之间的差异<br><code>git merge 分之名</code>            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- 让当前分之和指定分之进行合并     </p><p>注意: 切换分之、push、pull，这些操作前要保证工作区是clean  </p><p>怎么避免冲突：  不要发生多个分之对同一个文件在同一个版本下进行修改(和同伴确认和商量)</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>github上传文件</title>
      <link href="/2019/01/22/github-shang-chuan-wen-jian/"/>
      <url>/2019/01/22/github-shang-chuan-wen-jian/</url>
      
        <content type="html"><![CDATA[<h3 id="第一种-："><a href="#第一种-：" class="headerlink" title="第一种 ："></a>第一种 ：</h3><p>直接拖拽上传</p><h3 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h3><h4 id="建立本地仓库"><a href="#建立本地仓库" class="headerlink" title="建立本地仓库"></a>建立本地仓库</h4><p>1.进入要上传的文件<br>输入指令：git init<br>2.将所有文件添加到本地仓库<br>指令： git add .<br>3.提交文件到缓存区<br>指令：git commit -m ‘提交文件’<br>注意：引号里面随便输入，相当于标记本次操作</p><h4 id="关联github仓库"><a href="#关联github仓库" class="headerlink" title="关联github仓库"></a>关联github仓库</h4><p>1.复制仓库http地址<br>2.执行指令：git remote add origin <a href="https://github.com/321203500/blog.git" target="_blank" rel="noopener">https://github.com/321203500/blog.git</a><br>3.合并代码[注：pull=fetch+merge]<br>执行指令：git pull –rebase origin master</p><h4 id="上传本地代码"><a href="#上传本地代码" class="headerlink" title="上传本地代码"></a>上传本地代码</h4><p>执行指令：git push -u origin master</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>中间件</title>
      <link href="/2019/01/22/django-zhong-jian-jian/"/>
      <url>/2019/01/22/django-zhong-jian-jian/</url>
      
        <content type="html"><![CDATA[<p>django分页，中间件，验证码使用指南</p><p>前言<br>面向切面编程AOP中的中间件是一个最好的例子。官方的说法：中间件是一个用来处理Django的请求和响应的框架级别的钩子。它是一个轻量、低级别的插件系统，用于在全局范围内改变Django的输入和输出。</p><h2 id="1-中间件Middleware描述"><a href="#1-中间件Middleware描述" class="headerlink" title="1. 中间件Middleware描述"></a>1. 中间件Middleware描述</h2><p>中间件：</p><p>是一个轻量级的，底层的插件，可以介入Django的请求和响应的过程（面向切面编程)</p><p>中间件的本质就是一个python类</p><p>注意：中间件是帮助我们在视图函数执行之前和执行之后都可以做一些额外的操作，它本质上就是一个自定义类，类中定义了几个方法，Django框架会在请求的特定的时间去执行这些方法。</p><p>思考：</p><p>什么是中间件，在settings.py中有很多的中间件，主要是用来做什么功能的呢，他们处理请求的url的过程在那些阶段呢，一般用来做那些数据的处理呢</p><h2 id="2-中间件类函数描述"><a href="#2-中间件类函数描述" class="headerlink" title="2. 中间件类函数描述"></a>2. 中间件类函数描述</h2><p>在Django项目中，在settings.py中可以查看到已经定义好的中间件，并加入我们自定义的两个中间件。</p><pre class=" language-python"><code class="language-python">MIDDLEWARE <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'django.middleware.security.SecurityMiddleware'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.sessions.middleware.SessionMiddleware'</span><span class="token punctuation">,</span>    <span class="token string">'django.middleware.common.CommonMiddleware'</span><span class="token punctuation">,</span>    <span class="token string">'django.middleware.csrf.CsrfViewMiddleware'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.auth.middleware.AuthenticationMiddleware'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.messages.middleware.MessageMiddleware'</span><span class="token punctuation">,</span>    <span class="token string">'django.middleware.clickjacking.XFrameOptionsMiddleware'</span><span class="token punctuation">,</span>    <span class="token string">'utils.middleware.TestMiddlware1'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 加载中间件TestMiddlware1</span>    <span class="token string">'utils.middleware.TestMiddlware2'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 加载中间件TestMiddlware2</span><span class="token punctuation">]</span></code></pre><p>每个中间件是一个独立的类, 有几下几个方法</p><pre><code>1. process_request(self, request)    执行时机在django接收到request之后, 但仍未解析出url以确定运行哪个视图函数view之前2. process_view(self, request, view_func, view_args, view_kwargs)    执行时机在django执行完request预处理函数并确定待执行的view之后, 但在视图函数view之前    request: HttpRequest对象    view_fun: 是django将要调用的视图函数, 是真实的函数对象本身    view_args: 将传入view的位置参数列表, 不包括request参数    view_kwargs: 将传入view的字典参数3. process_response(self, request, response)    该方法必须返回HttpResponse对象, 可以是原来的, 也可以是修改后的    调用时机在django执行完view函数并生成response之后, 该中间件能修改response的内容, 常见用途比如压缩内容    request是request对象    response是从view中返回的response对象4. process_exception(self, request, exception)    默认不主动调用，该方法只有在request处理过程中出了问题并且view函数抛出了一个未捕获的异常才会被调用, 可以用来发送错误通知, 将相关信息输出到日志文件, 或者甚至尝试从错误中自动恢复    参数包括request对象, 还有view函数抛出的异常对象exception    必须返回None或HttpResponse对象5. process_template_response(self, request, response)    默认不主动调用，在视图执行render()返回后进行调用，必须返回None或HttpResponse对象以上方法的返回值可以是None或一个HttpResponse对象，如果是None，则继续按照django定义的规则向后继续执行，如果是HttpResponse对象，则直接将该对象返回给用户。</code></pre><h2 id="3-process-request-函数"><a href="#3-process-request-函数" class="headerlink" title="3. process_request()函数"></a>3. process_request()函数</h2><p>process_request方法中有一个request参数，其表示请求。该方法中可以返回None或不用返回任何参数，或返回HttpResponse对象。如果返回None或不返回任何参数则表示继续执行其余中间件，如果是返回HttpResponse对象则直接返回HttpResponse对象给客户端，而不再执行视图函数。</p><p>访问index路由地址，在Pycharm的控制台中可以打印如下的内容：</p><pre><code>test1 process_requesttest2 process_requestindex views</code></pre><p>从结果中可以发现，中间件TestMiddlware1的process_request比TestMiddlware2的process_request方法先执行，并且视图函数是最后才执行。 通过以上的打印可以得出总结：</p><pre><code>1）    中间件的process_request方法是按照在MIDDLEWARE中定义的先后顺序执行的。2）    视图函数在process_request方法执行之后才执行。</code></pre><h2 id="4-process-response-self-request-response-函数"><a href="#4-process-response-self-request-response-函数" class="headerlink" title="4. process_response(self, request, response)函数"></a>4. process_response(self, request, response)函数</h2><p>process_ response方法中两个参数，一个是请求request参数，一个是响应response参数，该response参数就是视图函数返回的HttpResponse对象。</p><p>修改中间件TestMiddlware1和TestMiddlware2，修改代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">TestMiddlware1</span><span class="token punctuation">(</span>MiddlewareMixin<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">process_request</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'test1 process_request'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">process_response</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'test1 process_response'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> response<span class="token keyword">class</span> <span class="token class-name">TestMiddlware2</span><span class="token punctuation">(</span>MiddlewareMixin<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">process_request</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'test2 process_request'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">process_response</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'test2 process_response'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> response</code></pre><p>访问inde路由地址，在控制台中可以打印如下的内容:</p><pre><code>test1 process_requesttest2 process_requestindex viewstest2 process_responsetest1 process_response</code></pre><p>从结果中可以发现，中间件的process_request在访问视图函数之前执行，而process_reponse在视图函数之后执行。并且从执行顺序中可以得出以下结论:</p><pre><code>1）    多个中间件的process_request的执行顺序是按照在MIDDLEWARE中定义的先后顺序执行的。2）    多个中间件的process_response的执行顺序是按照MIDDLEWARE中定义的顺序逆序执行的。也就是说第一个中间件的process_request先执行，而第一个中间件的process_response最后执行。3）    视图函数在process_request之后执行。4）    视图函数在process_response之前执行。5）    process_response必须返回响应对象。</code></pre><h2 id="5-process-view-self-view-func-view-args-view-kwargs-讲解及处理流程"><a href="#5-process-view-self-view-func-view-args-view-kwargs-讲解及处理流程" class="headerlink" title="5.process_view(self, view_func, view_args, view_kwargs) 讲解及处理流程"></a>5.process_view(self, view_func, view_args, view_kwargs) 讲解及处理流程</h2><p>该方法接收四个参数:</p><pre><code>请求requestview_func: 即将被执行的函数view_args：传递给视图函数的列表参数view_kwargs：传递给视图函数的字典参数</code></pre><p>修改中间件TestMiddlware1和TestMiddlware2，修改代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">TestMiddlware1</span><span class="token punctuation">(</span>MiddlewareMixin<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">process_request</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'test1 process_request'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">process_response</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'test1 process_response'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> response    <span class="token keyword">def</span> <span class="token function">process_view</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> view_func<span class="token punctuation">,</span> view_args<span class="token punctuation">,</span> view_kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'test1 process_view'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">TestMiddlware2</span><span class="token punctuation">(</span>MiddlewareMixin<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">process_request</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'test2 process_request'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">process_response</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'test2 process_response'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> response    <span class="token keyword">def</span> <span class="token function">process_view</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> view_func<span class="token punctuation">,</span> view_args<span class="token punctuation">,</span> view_kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'test2 process_view'</span><span class="token punctuation">)</span></code></pre><p>访问index路由地址，在控制台中可以打印如下的内容:</p><pre><code>test1 process_requesttest2 process_requesttest1 process_viewtest2 process_viewindex viewstest2 process_responsetest1 process_response</code></pre><p>从结果中可以发现，中间件中的process_view方法在视图函数之前执行，在process_request方法之后执行，process_view执行的顺序按照MIDDLEWARE中定义中间件的顺序执行的。并且从执行的结果中可以得出以下结论:</p><pre><code>1）    process_request执行后才执行process_view2）    视图函数在process_view方法执行后执行3）    process_view方法在process_response方法之后执行，并且执行的顺序按照MIDDLEWARE中定义中间件的顺序执行</code></pre><h2 id="6-process-template-response-self-request-response-讲解及处理流程"><a href="#6-process-template-response-self-request-response-讲解及处理流程" class="headerlink" title="6.process_template_response(self, request, response) 讲解及处理流程"></a>6.process_template_response(self, request, response) 讲解及处理流程</h2><p>该方法中接收两个参数，一个是请求request，一个是响应response，该响应response由视图函数产生。process_template_response方法默认是不执行的，只会在视图函数返回对象有一个render方法时才会被调用。</p><p>修改index视图函数 def index(request): print(‘ index views’) def index_render(): return render(request, ‘index.html’)</p><pre class=" language-python"><code class="language-python">    rep <span class="token operator">=</span> HttpResponse<span class="token punctuation">(</span><span class="token punctuation">)</span>    rep<span class="token punctuation">.</span>render <span class="token operator">=</span> index_render    <span class="token keyword">return</span> rep</code></pre><p>修改中间件TestMiddlware1和TestMiddlware2，修改代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">TestMiddlware1</span><span class="token punctuation">(</span>MiddlewareMixin<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">process_request</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'test1 process_request'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">process_response</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'test1 process_response'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> response    <span class="token keyword">def</span> <span class="token function">process_view</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> view_func<span class="token punctuation">,</span> view_args<span class="token punctuation">,</span> view_kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'test1 process_view'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">process_exception</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> exception<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'test1 process_except'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">process_template_response</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'test1 process_template_response'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> response<span class="token keyword">class</span> <span class="token class-name">TestMiddlware2</span><span class="token punctuation">(</span>MiddlewareMixin<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">process_request</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'test2 process_request'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">process_response</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'test2 process_response'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> response    <span class="token keyword">def</span> <span class="token function">process_view</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> view_func<span class="token punctuation">,</span> view_args<span class="token punctuation">,</span> view_kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'test2 process_view'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">process_exception</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> exception<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'test2 process_except'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">process_template_response</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'test2 process_template_response'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> response</code></pre><p>访问index路由地址，在控制台中可以打印如下的内容:</p><pre><code>test1 process_requesttest2 process_requesttest1 process_viewtest2 process_viewindex viewstest2 process_template_responsetest1 process_template_responsetest2 process_responsetest1 process_response</code></pre><p>从结果中可以得出以下结论:</p><pre><code>1）    process_template_response在视图函数执行完后。并且执行的顺序按照MIDDLEWARE中定义中间件的顺序逆序执行。2）    process_response方法是最后执行的，并且执行的顺序按照MIDDLEWARE中定义中间件的顺序逆序执行。</code></pre><h2 id="7-process-exception-self-request-exception-讲解及处理流程"><a href="#7-process-exception-self-request-exception-讲解及处理流程" class="headerlink" title="7.process_exception(self, request, exception) 讲解及处理流程"></a>7.process_exception(self, request, exception) 讲解及处理流程</h2><p>该方法中接收两个参数，一个是请求request，一个是异常exception，该exception是视图函数产生的异常Exception对象。process_exception方法默认是不执行的，只会在视图函数出现异常的情况才会执行。</p><p>修改index视图函数，使得index方法抛出一个异常:</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'GET'</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'index views'</span><span class="token punctuation">)</span>        <span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span>        <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'我是index方法'</span><span class="token punctuation">)</span></code></pre><p>修改中间件TestMiddlware1和TestMiddlware2，修改代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">TestMiddlware1</span><span class="token punctuation">(</span>MiddlewareMixin<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">process_request</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'test1 process_request'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">process_response</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'test1 process_response'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> response    <span class="token keyword">def</span> <span class="token function">process_view</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> view_func<span class="token punctuation">,</span> view_args<span class="token punctuation">,</span> view_kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'test1 process_view'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">process_exception</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> exception<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'test1 process_except'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">TestMiddlware2</span><span class="token punctuation">(</span>MiddlewareMixin<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">process_request</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'test2 process_request'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">process_response</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'test2 process_response'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> response    <span class="token keyword">def</span> <span class="token function">process_view</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> view_func<span class="token punctuation">,</span> view_args<span class="token punctuation">,</span> view_kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'test2 process_view'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">process_exception</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> exception<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'test2 process_except'</span><span class="token punctuation">)</span></code></pre><p>访问index路由地址，在控制台中可以打印如下的内容:</p><pre><code>test1 process_requesttest2 process_requesttest1 process_viewtest2 process_viewindex viewstest2 process_excepttest1 process_excepttest2 process_responsetest1 process_response</code></pre><p>从结果中可以得出以下结论:</p><pre><code>1）    process_request最先执行。并且执行的顺序按照MIDDLEWARE中定义中间件的顺序执行。2）    process_view在视图函数之前执行，并且执行的顺序按照MIDDLEWARE中定义中间件的顺序执行。3）    视图函数在process_view方法执行后执行，在process_exception方法之前执行。4）    process_exception方法在process_response方法之前执行，并且执行的顺序按照MIDDLEWARE中定义中间件的顺序逆序执行。5）    process_response方法是最后执行的，并且执行的顺序按照MIDDLEWARE中定义中间件的顺序逆序执行。</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Django增删查改</title>
      <link href="/2019/01/22/django-zeng-shan-cha-gai/"/>
      <url>/2019/01/22/django-zeng-shan-cha-gai/</url>
      
        <content type="html"><![CDATA[<h2 id="1-增"><a href="#1-增" class="headerlink" title="1.增"></a>1.增</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">add_stu</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 实现插入数据</span>    <span class="token comment" spellcheck="true"># 实现的第一种方式</span>    Student<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>s_name<span class="token operator">=</span><span class="token string">'小涛'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 实现的第二种方式</span>    stu <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token punctuation">)</span>    stu<span class="token punctuation">.</span>s_name <span class="token operator">=</span> <span class="token string">'大大'</span>    stu<span class="token punctuation">.</span>s_gender <span class="token operator">=</span> <span class="token number">0</span>    stu<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'创建学生成功'</span><span class="token punctuation">)</span></code></pre><h2 id="2-删"><a href="#2-删" class="headerlink" title="2.删"></a>2.删</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">del_stu</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 实现删除</span>    <span class="token comment" spellcheck="true"># 1.获取删除对象，  filter(条件)</span>    <span class="token comment" spellcheck="true"># 2.实现删除方法，  delete()</span>    Student<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'删除学生成功'</span><span class="token punctuation">)</span></code></pre><h2 id="3-改"><a href="#3-改" class="headerlink" title="3.改"></a>3.改</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">up_stu</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 实现更新</span>    <span class="token comment" spellcheck="true"># 1.获取更新的对象，  filter(条件)</span>    <span class="token comment" spellcheck="true"># 2.实现更新方法，  update()</span>    <span class="token comment" spellcheck="true"># 更新的第一种方法</span>    Student<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>update<span class="token punctuation">(</span>s_name<span class="token operator">=</span><span class="token string">'臭傻逼'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 更新的第二种方法</span>    <span class="token comment" spellcheck="true"># 后面加.first() 取到的才是id为2的学生对象</span>    stu <span class="token operator">=</span> Student<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>    stu<span class="token punctuation">.</span>s_name <span class="token operator">=</span> <span class="token string">'大傻逼'</span>    stu<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'更新学生成功'</span><span class="token punctuation">)</span></code></pre><h2 id="4-查"><a href="#4-查" class="headerlink" title="4.查"></a>4.查</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">sel_stu</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 查询学生信息</span>    <span class="token comment" spellcheck="true"># 查询所有的学生信息,all()</span>    stus <span class="token operator">=</span> Student<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> stu <span class="token keyword">in</span> stus<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span>s_name<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 查询id=2的学生信息，filter()</span>    stu <span class="token operator">=</span> Student<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 1.get()取唯一的一个对象</span>    <span class="token comment" spellcheck="true"># 2.get(条件)条件必须成立</span>    stu <span class="token operator">=</span> Student<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 查询满足条件的信息</span>    stus <span class="token operator">=</span> Student<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>s_gender<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>stus<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 查询不满足条件的信息</span>    stus <span class="token operator">=</span> Student<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>exclude<span class="token punctuation">(</span>s_gender<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>stus<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 排序order_by</span>    <span class="token comment" spellcheck="true"># 升序：order_by('id')</span>    <span class="token comment" spellcheck="true"># 降序：order_by('-id')</span>    stus <span class="token operator">=</span> Student<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>order_by<span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span>    stus <span class="token operator">=</span> Student<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>order_by<span class="token punctuation">(</span><span class="token string">'-id'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>stus<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 取出对象中的某个字段</span>    stus <span class="token operator">=</span> Student<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token string">'s_name'</span><span class="token punctuation">,</span> <span class="token string">'s_age'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>stus<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 判断要取的值是否存在</span>    aa <span class="token operator">=</span> Student<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>s_name<span class="token operator">=</span><span class="token string">'老王'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>aa<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 计算结果的条数</span>    stus <span class="token operator">=</span> Student<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>s_gender<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>stus<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 语法：字段__运算符</span>    <span class="token comment" spellcheck="true"># 包含，模糊查询：contains</span>    stus <span class="token operator">=</span> Student<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>s_name__contains<span class="token operator">=</span><span class="token string">'大'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>stus<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># like '大%'  '%逼'</span>    <span class="token comment" spellcheck="true"># startswith - 以什么开头    endswith - 以什么结尾</span>    stus <span class="token operator">=</span> Student<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>s_name__startswith<span class="token operator">=</span><span class="token string">'大'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>stus<span class="token punctuation">)</span>    stus <span class="token operator">=</span> Student<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>s_name__endswith<span class="token operator">=</span><span class="token string">'b'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>stus<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># sql  where id in (1,2,3,4,5,6,7,8)</span>    <span class="token comment" spellcheck="true"># __in   - 在某个范围内</span>    <span class="token comment" spellcheck="true"># pk - 主键</span>    stus <span class="token operator">=</span> Student<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>id__in<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>stus<span class="token punctuation">)</span>    stus <span class="token operator">=</span> Student<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>pk__in<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>stus<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># gte(大于等于) gt(大于) lt(小于) lte(小于等于)</span>    stus <span class="token operator">=</span> Student<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>s_age__gte<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">,</span> s_age__lte<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>stus<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 聚合  Avg Max Sum Count</span>    age_avg <span class="token operator">=</span> Student<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>aggregate<span class="token punctuation">(</span>Avg<span class="token punctuation">(</span><span class="token string">'s_age'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>age_avg<span class="token punctuation">)</span>    age_sum <span class="token operator">=</span> Student<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>aggregate<span class="token punctuation">(</span>Sum<span class="token punctuation">(</span><span class="token string">'s_age'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>age_sum<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 查询年龄大于等于18且小于等于20</span>    stus <span class="token operator">=</span> Student<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>s_age__gte<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">,</span> s_age__lte<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>stus<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 查询年龄大于等于18或小于等于20, Q()</span>    stus <span class="token operator">=</span> Student<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>Q<span class="token punctuation">(</span>s_age__gte<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">)</span> <span class="token operator">|</span> Q<span class="token punctuation">(</span>s_age__lte<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>stus<span class="token punctuation">)</span>    stus <span class="token operator">=</span> Student<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span><span class="token operator">~</span>Q<span class="token punctuation">(</span>s_age__gte<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>stus<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 查询物理成绩大于数学成绩的学生</span>    stus <span class="token operator">=</span> Student<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> stu <span class="token keyword">in</span> stus<span class="token punctuation">:</span>        <span class="token keyword">if</span> stu<span class="token punctuation">.</span>wuli <span class="token operator">></span> stu<span class="token punctuation">.</span>math<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span>s_name<span class="token punctuation">)</span>    stus <span class="token operator">=</span> Student<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>order_by<span class="token punctuation">(</span><span class="token string">'-math'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> stus<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>math<span class="token punctuation">)</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'查询所有的学生信息'</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>模型设计(django)</title>
      <link href="/2019/01/22/django-mo-xing-she-ji/"/>
      <url>/2019/01/22/django-mo-xing-she-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="0-模板"><a href="#0-模板" class="headerlink" title="0.模板"></a>0.模板</h2><h3 id="a-解析模板文件的位置"><a href="#a-解析模板文件的位置" class="headerlink" title="a.解析模板文件的位置"></a>a.解析模板文件的位置</h3><p>配置: 在settings.py文件中定义TEMPALTES的目录地址<br>[os.path.join(BASE_DIR, ‘templates’)]</p><h3 id="b-后端渲染模板"><a href="#b-后端渲染模板" class="headerlink" title="b.后端渲染模板"></a>b.后端渲染模板</h3><p>使用render()渲染模板<br>传递参数给模板, render(request, 模板名, {key1:value1, key2: value2})</p><h3 id="c-前端渲染数据"><a href="#c-前端渲染数据" class="headerlink" title="c.前端渲染数据"></a>c.前端渲染数据</h3><pre><code>解析变量: {{ 变量 }}解析标签: {% 标签 %} {% end标签 %}标签: for</code></pre><h2 id="1-迁移表名的定义"><a href="#1-迁移表名的定义" class="headerlink" title="1.迁移表名的定义"></a>1.迁移表名的定义</h2><h3 id="a-指定db-table参数，表示模型迁移时，映射到数据库中的表名称"><a href="#a-指定db-table参数，表示模型迁移时，映射到数据库中的表名称" class="headerlink" title="a.指定db_table参数，表示模型迁移时，映射到数据库中的表名称"></a>a.指定db_table参数，表示模型迁移时，映射到数据库中的表名称</h3><h3 id="b-如果没指定db-table参数-则数据库中模型映射的表名为-应用名app-模型名称的小写"><a href="#b-如果没指定db-table参数-则数据库中模型映射的表名为-应用名app-模型名称的小写" class="headerlink" title="b.如果没指定db_table参数,则数据库中模型映射的表名为: 应用名app_模型名称的小写"></a>b.如果没指定db_table参数,则数据库中模型映射的表名为: 应用名app_模型名称的小写</h3><h2 id="2-字段类型"><a href="#2-字段类型" class="headerlink" title="2.字段类型"></a>2.字段类型</h2><p>CharField: 字符串类型<br>IntegerField: 整型<br>ImageField: 字符串类型,用于存图片<br>BooleanField: 布尔， True 或者 False<br>DateTimeField: 日期, 年月日时分秒<br>DateField: 年月日<br>TextField: 存储长文本内容, areatext标签<br>FloatField: 浮点类型<br>DecimalField: 浮点类型，限制最大长度和小数点后的长度</p><h2 id="3-约束"><a href="#3-约束" class="headerlink" title="3.约束"></a>3.约束</h2><p>unique: 是否唯一<br>default: 默认值<br>null: 是否可以为空<br>primary_key: 主键<br>auto_now_add: 创建时，默认赋值为当前时间<br>auto_now: 创建或修改时，默认赋值为当前时间<br>max_length: 最大长度<br>related_name: 反向查询名称</p><p>on_delete: 删除的约束条件:<br>    models.CASCADE 删除主表，从表也会被删<br>    models.PROTECT 不让删除主表<br>    models.SET_NULL 删除主表，从表的关联字段设置为空</p><h2 id="4-一对一，1-1"><a href="#4-一对一，1-1" class="headerlink" title="4.一对一，1:1"></a>4.一对一，1:1</h2><h3 id="a-存储"><a href="#a-存储" class="headerlink" title="a.存储"></a>a.存储</h3><p>关联字段存储1： stu_info.关联字段 = 关联对象<br>关联字段存储2: stu_info.关联字段_id = 主键id值</p><h3 id="b-查询"><a href="#b-查询" class="headerlink" title="b.查询"></a>b.查询</h3><p>学生模型和学生拓展模型的定义，一对一<br>查询1,没设置related_name参数时<br>学生对象查询拓展表对象:  学生对象.拓展模型名称的小写<br>拓展表对象查询学生对象: 拓展表对象.OneToOneField定义的字段<br>查询2, 设置related_name参数时<br>学生对象查询拓展表对象: 对象对象.related_name参数<br>拓展表对象查询学生对象: 拓展表对象.OneToOneField定义的字段</p><h3 id="c-定义模型"><a href="#c-定义模型" class="headerlink" title="c.定义模型"></a>c.定义模型</h3><p>OneToOneField: 定义在关联模型的任何一方都可以</p><h2 id="5-一对多，1-N"><a href="#5-一对多，1-N" class="headerlink" title="5.一对多，1:N"></a>5.一对多，1:N</h2><h3 id="a-存储-1"><a href="#a-存储-1" class="headerlink" title="a.存储"></a>a.存储</h3><p>关联字段的存储1: stu.关系字段 = 关联模型对象<br>关联字段的存储2: stu.关系字段_id = 关联表的主键id值</p><h3 id="b-查询-1"><a href="#b-查询-1" class="headerlink" title="b.查询"></a>b.查询</h3><p>查询1: 没有定义related_name参数<br>学生查询班级: 多的一方(学生)对象.关联字段<br>班级查询学生: 少的一的一方（班级）.关联模型名的小写_set.filter().all()<br>查询2: 设置了related_name参数<br>学生查询班级: 多的一方（学生）对象.关联字段<br>班级查询学生: 少的一的一方(班级).related_name参数.filter().all()</p><h3 id="c-定义模型-1"><a href="#c-定义模型-1" class="headerlink" title="c.定义模型"></a>c.定义模型</h3><p>ForeignKey: 定义在多(N)的一方</p><h2 id="5-多对多-N-M"><a href="#5-多对多-N-M" class="headerlink" title="5.多对多, N:M"></a>5.多对多, N:M</h2><h3 id="a-存储-同一对多"><a href="#a-存储-同一对多" class="headerlink" title="a.存储: 同一对多"></a>a.存储: 同一对多</h3><h3 id="b-查询-2"><a href="#b-查询-2" class="headerlink" title="b.查询"></a>b.查询</h3><p>查询1: 没有设置related_name参数<br>课程查询学生: 课程对象.关联字段.filter()<br>学生查询课程: 学生对象.关联模型名的小写_set<br>查询2: 设置了related_name参数<br>课程查询学生: 课程对象.关联字段.filter().all()<br>学生查询课程: 学生对象.related_name参数.filter().all()</p><h3 id="c-定义模型-2"><a href="#c-定义模型-2" class="headerlink" title="c.定义模型"></a>c.定义模型</h3><p>ManyToManyField: 定义在模型的任何一方都可以</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
